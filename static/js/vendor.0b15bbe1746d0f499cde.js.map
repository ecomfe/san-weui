{"version":3,"sources":["webpack:///static/js/vendor.0b15bbe1746d0f499cde.js","webpack:///../~/san/dist/san.source.js","webpack:///../~/san-router/dist/san-router.source.js","webpack:///../~/babel-runtime/~/core-js/library/modules/_descriptors.js","webpack:///../~/babel-runtime/~/core-js/library/modules/_is-object.js","webpack:///../~/babel-runtime/~/core-js/library/modules/_core.js","webpack:///../~/babel-runtime/~/core-js/library/modules/_fails.js","webpack:///../~/babel-runtime/~/core-js/library/modules/_global.js","webpack:///../~/babel-runtime/~/core-js/library/modules/_object-dp.js","webpack:///../~/babel-runtime/core-js/object/define-property.js","webpack:///../~/babel-runtime/helpers/defineProperty.js","webpack:///../~/babel-runtime/~/core-js/library/fn/object/define-property.js","webpack:///../~/babel-runtime/~/core-js/library/modules/_a-function.js","webpack:///../~/babel-runtime/~/core-js/library/modules/_an-object.js","webpack:///../~/babel-runtime/~/core-js/library/modules/_ctx.js","webpack:///../~/babel-runtime/~/core-js/library/modules/_dom-create.js","webpack:///../~/babel-runtime/~/core-js/library/modules/_export.js","webpack:///../~/babel-runtime/~/core-js/library/modules/_hide.js","webpack:///../~/babel-runtime/~/core-js/library/modules/_ie8-dom-define.js","webpack:///../~/babel-runtime/~/core-js/library/modules/_property-desc.js","webpack:///../~/babel-runtime/~/core-js/library/modules/_to-primitive.js","webpack:///../~/babel-runtime/~/core-js/library/modules/es6.object.define-property.js","webpack:///../~/classnames/index.js","webpack:///../~/webpack/~/node-libs-browser/~/process/browser.js","webpack:///../~/webpack/~/node-libs-browser/~/timers-browserify/main.js","webpack:///../~/webpack/~/node-libs-browser/~/timers-browserify/~/setimmediate/setImmediate.js","webpack:///../~/css-loader/lib/css-base.js","webpack:///../~/style-loader/addStyles.js"],"names":["webpackJsonp","module","exports","__webpack_require__","setImmediate","root","extend","target","source","key","hasOwnProperty","inherits","subClass","superClass","subClassProto","prototype","F","Function","constructor","each","array","iterator","thisArg","length","i","l","call","contains","value","result","item","bind","func","nativeBind","slice","Array","apply","arguments","args","concat","on","el","eventName","listener","addEventListener","attachEvent","un","removeEventListener","detachEvent","removeEl","parentNode","removeChild","createEl","tagName","svgTags","document","createElementNS","createElement","guid","guidIndex","nextTick","fn","nextTasks","push","nextHandler","tasks","task","MutationObserver","num","observer","text","createTextNode","observe","characterData","data","setTimeout","StringBuffer","this","raw","isCompatStringJoin","IndexedList","index","tagIsAutoClose","test","Walker","len","ANode","options","isText","directives","props","events","childs","parseTemplate","pushTextNode","currentNode","textExpr","parseText","parent","rootNode","replace","tagMatch","walker","tagReg","attrReg","beforeLastIndex","match","tagEnd","toLowerCase","currentCode","closeTargetNode","go","aElement","tagClose","nextCharCode","charCode","attrMatch","integrateAttr","cut","aNode","name","ignoreNormal","id","realName","prefix","prefixIndex","indexOf","expr","parseCall","directive","parseDirective","integrateProp","xMatch","parseExpr","x","textPropExtra","prop","segs","seg","type","ExprType","INTERP","filters","CALL","parser","directiveParsers","pushStringToSeg","STRING","exprMatch","exprStartReg","beforeIndex","parseInterp","TEXT","readTertiaryExpr","goUntil","readCall","readString","startCode","startIndex","walkLoop","nextCode","literal","readIdentifier","readNumber","NUMBER","readPropertyAccessor","ACCESSOR","paths","accessorLoop","conditional","readLogicalORExpr","yesExpr","TERTIARY","readLogicalANDExpr","BINARY","operator","readEqualityExpr","readRelationalExpr","code","readAdditiveExpr","readMultiplicativeExpr","readUnaryExpr","UNARY","readParenthesizedExpr","ident","changeExprCompareExprs","changeExpr","exprs","model","changeExprCompare","changePaths","changeLen","pathExpr","evalExpr","Math","max","filterResult","filter","Model","listeners","htmlFilterReplacer","c","HTML_ENTITY","escapeHTML","String","owner","escapeInterpHtml","opHandler","BinaryOp","cond","get","filterName","filterFn","DEFAULT_FILTERS","arg","buf","segValue","toString","LifeCycle","Node","lifeCycle","init","genStumpHTML","node","TextNode","Element","genBoolPropHandler","attrName","tagNames","input","attr","element","propName","HTML_ATTR_PROP_MAP","choose","getPropHandler","propHandlers","defaultElementPropHandler","bindOutputer","bindInfo","output","elementEventListener","eventBind","e","argExpr","Component","window","event","isOwn","method","elementGenStartHTML","stringBuffer","elementGenCloseHTML","elementGenChildsHTML","valueProp","aNodeChild","child","createNode","_static","genHTML","isDataChangeByElement","change","changeTarget","option","SlotElement","slotChilds","dataChanges","compileChildsFromEl","current","DOMChildsWalker","createNodeByEl","goNext","scope","IfDirective","ElseDirective","ForDirective","ComponentType","components","elWalker","ComponentClass","componentName","getAttribute","childANode","parseANodeFromEl","stumpName","isStump","attributes","firstChild","nodeType","nextSibling","next","createIfDirectiveChild","ifElement","remove","parentChilds","directiveValue","setAttribute","removeAttribute","ifDirective","Error","createForDirectiveChild","forElement","exprResolve","forDirective","list","itemScope","resolvedExpr","set","rawFn","directiveANode","defineComponent","proto","emitDevTool","san","debug","__san_devtool__","emit","split","ieVersionMatch","navigator","userAgent","ie","isFEFFBeforeStump","join","getAt","splice","other","start","end","distance","charCodeAt","reg","lastIndex","exec","for","ref","if","else","43","a","b","45","42","47","60","62","76","94","121","122","123","155","183","248","ModelChangeType","SET","SPLICE","onChange","unChange","fireChange","pathValue","silence","pop","shift","unshift","removeAt","returnValue","deleteCount","insertions","&","<",">","\"","'","html","url","encodeURIComponent","clazz","style","LifeCycles","compiled","inited","created","attached","mutex","detached","disposed","is","_callHook","_init","parentComponent","_created","getElementById","_noticeAttached","dispose","_dispose","innerHTML","_pushChildANode","_inited","defaultText","update","previousSibling","textProp","textContent","insertAdjacentHTML","updateView","changes","elementContainer","_initFromEl","binds","_initPropHandlers","_create","create","_initSelfChanger","bindEvents","outputer","CompositionEvent","composing","createEvent","initEvent","dispatchEvent","readonly","cellpadding","cellspacing","colspan","rowspan","valign","usemap","frameborder","class","elementPropHandlers","bindValue","checked","bindType","parentValueProp","attrStr","cssText","propHandler","attach","parentEl","beforeEl","_attach","insertBefore","appendChild","unbindEvents","fire","nameListeners","setProp","detach","_detach","_disposeChilds","nameBind","literalOwner","givenSlots","givenChilds","slotUpdateView","computed","messages","_compile","protoANode","givenANode","slotName","slotBind","initData","computedDeps","_calcComputed","computedExpr","watch","_isInitFromEl","_attached","_detached","_updated","dispatch","childsTraversal","refDirective","refComponent","slotChild","componentPropExtra","_isComponentsReady","componentClass","tpl","template","extra","dataChanger","_dataChanger","bindItem","relation","setExpr","updateExpr","updateScopeExpr","dataName","dataExpr","ifExpr","onlyChilds","childsChanges","repaintAll","forLen","changeIndex","changeStart","lengthChange","indexChange","insertionsLen","spliceArgs","childsChangesSpliceArgs","insertion","childChanges","attachStump","headingBlank","version","factory","modules","moduleId","installedModules","m","d","getter","o","Object","defineProperty","configurable","enumerable","n","__esModule","object","property","p","s","_interopRequireDefault","obj","default","resolveURL","base","sourceLoc","_parseUrl2","baseLoc","sourcePath","path","sourceSegs","baseSegs","queryString","_parseUrl","parseURL","hash","hashStart","query","queryStart","forEach","querySeg","equalIndex","decodeURIComponent","_classCallCheck","instance","Constructor","TypeError","_typeof","Symbol","_createClass","defineProperties","descriptor","writable","protoProps","staticProps","_Event","_Event2","_EventQueue","_EventQueue2","EVENT_POOL","EventTarget","thisObject","queue","assign","add","once","handler","execute","globalQueue","_main","_resolveUrl","_resolveUrl2","clicker","href","router","locator","redirect","preventDefault","mode","_possibleConstructorReturn","self","ReferenceError","_inherits","setPrototypeOf","__proto__","getLocation","location","_EventTarget2","_EventTarget3","HASHCHANGE_HANDLER_KEY","Locator","_EventTarget","_this","getPrototypeOf","referrer","undefined","force","isChanged","silent","pathname","search","POPSTATE_HANDLER_KEY","history","pushState","isSupport","Link","Router","_hash","_hash2","_html","_html2","_link","_link2","routeID","_ref","_ref$mode","routes","routeAlives","locatorRedirectHandler","routeItem","rule","keys","j","doRoute","component","setMode","isUpdateAlive","routeAlive","targetEl","querySelector","_ref2","_ref2$target","regText","RegExp","isStarted","reload","stop","restart","isObject","EVENT_PROPERTY_BLACK_LIST","Set","Event","isDefaultPrevented","isPropagationStopped","isImmediatePropagationStopped","stopPropagation","originalEvent","defaults","preserveData","syncState","newEvent","has","stopImmediatePropagation","from","fromType","to","toType","useDifferentType","config","delegator","fromEvent","QUEUE","isContextIdentical","context","EventQueue","wrapper","clear","it","core","__e","global","__g","anObject","IE8_DOM_DEFINE","toPrimitive","dP","f","O","P","Attributes","_defineProperty","_defineProperty2","$Object","desc","aFunction","that","ctx","hide","PROTOTYPE","$export","own","out","IS_FORCED","IS_GLOBAL","G","IS_STATIC","S","IS_PROTO","IS_BIND","B","IS_WRAP","W","expProto","C","virtual","R","U","createDesc","bitmap","val","valueOf","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","classNames","classes","argType","isArray","hasOwn","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queueIndex","drainQueue","timeout","run","Item","noop","process","title","browser","env","argv","versions","addListener","off","removeListener","removeAllListeners","binding","cwd","chdir","dir","umask","Timeout","clearFn","_id","_clearFn","setInterval","clearInterval","close","unref","enroll","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","clearImmediate","callback","tasksByHandle","nextHandle","registerImmediate","handle","runIfPresent","currentlyRunningATask","installNextTickImplementation","canUsePostMessage","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","installPostMessageImplementation","messagePrefix","random","onGlobalMessage","installMessageChannelImplementation","channel","MessageChannel","port1","port2","installReadyStateChangeImplementation","doc","documentElement","script","onreadystatechange","installSetTimeoutImplementation","attachTo","mediaQuery","alreadyImportedModules","addStylesToDom","styles","domStyle","stylesInDom","refs","parts","addStyle","listToStyles","newStyles","css","media","sourceMap","part","insertStyleElement","styleElement","head","getHeadElement","lastStyleElementInsertedAtTop","styleElementsInsertedAtTop","insertAt","removeStyleElement","idx","createStyleElement","createLinkElement","linkElement","rel","singleton","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","URL","createObjectURL","revokeObjectURL","Blob","btoa","updateLink","applyToTag","newObj","styleSheet","replaceText","cssNode","childNodes","unescape","JSON","stringify","blob","oldSrc","memoize","memo","isOldIE","getElementsByTagName","newList","mayRemove","textStore","replacement","Boolean"],"mappings":"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","file":"static/js/vendor.0b15bbe1746d0f499cde.js","sourcesContent":["webpackJsonp([2,0],[\n/* 0 */,\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(setImmediate) {/**\n\t * San\n\t * Copyright 2016 Baidu Inc. All rights reserved.\n\t *\n\t * @file 组件体系，vm引擎\n\t * @author errorrik(errorrik@gmail.com)\n\t *         otakustay(otakustay@gmail.com)\n\t *         junmer(junmer@foxmail.com)\n\t */\n\t\n\t\n\t/* eslint-disable fecs-max-statements */\n\t(function (root) {\n\t/* eslint-enable fecs-max-statements */\n\t\n\t    // #region utils\n\t    /**\n\t     * 对象属性拷贝\n\t     *\n\t     * @inner\n\t     * @param {Object} target 目标对象\n\t     * @param {Object} source 源对象\n\t     * @return {Object} 返回目标对象\n\t     */\n\t    function extend(target, source) {\n\t        for (var key in source) {\n\t            if (source.hasOwnProperty(key)) {\n\t                target[key] = source[key];\n\t            }\n\t        }\n\t\n\t        return target;\n\t    }\n\t\n\t    /**\n\t     * 构建类之间的继承关系\n\t     *\n\t     * @inner\n\t     * @param {Function} subClass 子类函数\n\t     * @param {Function} superClass 父类函数\n\t     */\n\t    function inherits(subClass, superClass) {\n\t        /* jshint -W054 */\n\t        var subClassProto = subClass.prototype;\n\t        var F = new Function();\n\t        F.prototype = superClass.prototype;\n\t        subClass.prototype = new F();\n\t        subClass.prototype.constructor = subClass;\n\t        extend(subClass.prototype, subClassProto);\n\t        /* jshint +W054 */\n\t    }\n\t\n\t    /**\n\t     * 遍历数组集合\n\t     *\n\t     * @inner\n\t     * @param {Array} array 数组源\n\t     * @param {function(Any,number):boolean} iterator 遍历函数\n\t     * @param {Object=} thisArg this指向对象\n\t     */\n\t    function each(array, iterator, thisArg) {\n\t        if (array && array.length > 0) {\n\t            for (var i = 0, l = array.length; i < l; i++) {\n\t                if (iterator.call(thisArg || array, array[i], i) === false) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t\n\t    /**\n\t     * 判断数组中是否包含某项\n\t     *\n\t     * @inner\n\t     * @param {Array} array 数组\n\t     * @param {*} value 包含的项\n\t     * @return {boolean}\n\t     */\n\t    function contains(array, value) {\n\t        var result;\n\t        each(array, function (item) {\n\t            result = item === value;\n\t            return !result;\n\t        });\n\t\n\t        return result;\n\t    }\n\t\n\t    /**\n\t     * Function.prototype.bind 方法的兼容性封装\n\t     *\n\t     * @inner\n\t     * @param {Function} func 要bind的函数\n\t     * @param {Object} thisArg this指向对象\n\t     * @param {...*} args 预设的初始参数\n\t     * @return {Function}\n\t     */\n\t    function bind(func, thisArg) {\n\t        var nativeBind = Function.prototype.bind;\n\t        var slice = Array.prototype.slice;\n\t        if (nativeBind && func.bind === nativeBind) {\n\t            return nativeBind.apply(func, slice.call(arguments, 1));\n\t        }\n\t\n\t        var args = slice.call(arguments, 2);\n\t        return function () {\n\t            return func.apply(thisArg, args.concat(slice.call(arguments)));\n\t        };\n\t    }\n\t\n\t    /**\n\t     * DOM 事件挂载\n\t     *\n\t     * @inner\n\t     * @param {HTMLElement} el DOM元素\n\t     * @param {string} eventName 事件名\n\t     * @param {Function} listener 监听函数\n\t     */\n\t    function on(el, eventName, listener) {\n\t        if (el.addEventListener) {\n\t            el.addEventListener(eventName, listener, false);\n\t        }\n\t        else {\n\t            el.attachEvent('on' + eventName, listener);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * DOM 事件卸载\n\t     *\n\t     * @inner\n\t     * @param {HTMLElement} el DOM元素\n\t     * @param {string} eventName 事件名\n\t     * @param {Function} listener 监听函数\n\t     */\n\t    function un(el, eventName, listener) {\n\t        if (el.addEventListener) {\n\t            el.removeEventListener(eventName, listener, false);\n\t        }\n\t        else {\n\t            el.detachEvent('on' + eventName, listener);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * 将 DOM 从页面中移除\n\t     *\n\t     * @inner\n\t     * @param {HTMLElement} el DOM元素\n\t     */\n\t    function removeEl(el) {\n\t        if (el && el.parentNode) {\n\t            el.parentNode.removeChild(el);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * svgTags\n\t     *\n\t     * @see https://www.w3.org/TR/SVG/svgdtd.html 只取常用\n\t     * @inner\n\t     * @type {Object}\n\t     */\n\t    var svgTags = {};\n\t    each((''\n\t            // structure\n\t            + 'svg,g,defs,desc,metadata,symbol,use,'\n\t            // image & shape\n\t            + 'image,path,rect,circle,line,ellipse,polyline,polygon,'\n\t            // text\n\t            + 'text,tspan,tref,textpath,'\n\t            // other\n\t            + 'marker,pattern,clippath,mask,filter,cursor,view,animate,'\n\t            // font\n\t            + 'font,font-face,glyph,missing-glyph'\n\t        ).split(','),\n\t        function (key) {\n\t            svgTags[key] = 1;\n\t        }\n\t    );\n\t\n\t    /**\n\t     * 创建 DOM 元素\n\t     *\n\t     * @inner\n\t     * @param  {string} tagName tagName\n\t     * @return {HTMLElement}\n\t     */\n\t    function createEl(tagName) {\n\t        if (svgTags[tagName]) {\n\t            return document.createElementNS('http://www.w3.org/2000/svg', tagName);\n\t        }\n\t\n\t        return document.createElement(tagName);\n\t    }\n\t\n\t    /**\n\t     * 唯一id的起始值\n\t     *\n\t     * @inner\n\t     * @type {number}\n\t     */\n\t    var guidIndex = 1;\n\t\n\t    /**\n\t     * 获取唯一id\n\t     *\n\t     * @inner\n\t     * @return {string} 唯一id\n\t     */\n\t    function guid() {\n\t        return '_san_' + (guidIndex++);\n\t    }\n\t\n\t    /**\n\t     * 下一个周期要执行的任务列表\n\t     *\n\t     * @inner\n\t     * @type {Array}\n\t     */\n\t    var nextTasks = [];\n\t\n\t    /**\n\t     * 执行下一个周期任务的函数\n\t     *\n\t     * @inner\n\t     * @type {Function}\n\t     */\n\t    var nextHandler;\n\t\n\t    /**\n\t     * 在下一个时间周期运行任务\n\t     *\n\t     * @inner\n\t     * @param {Function} fn 要运行的任务函数\n\t     * @param {Object=} thisArg this指向对象\n\t     */\n\t    function nextTick(fn, thisArg) {\n\t        if (thisArg) {\n\t            fn = bind(fn, thisArg);\n\t        }\n\t        nextTasks.push(fn);\n\t\n\t        if (nextHandler) {\n\t            return;\n\t        }\n\t\n\t        nextHandler = function () {\n\t            var tasks = nextTasks.slice(0);\n\t            nextTasks = [];\n\t            nextHandler = null;\n\t\n\t            each(tasks, function (task) {\n\t                task();\n\t            });\n\t        };\n\t\n\t        if (typeof MutationObserver === 'function') {\n\t            var num = 1;\n\t            var observer = new MutationObserver(nextHandler);\n\t            var text = document.createTextNode(num);\n\t            observer.observe(text, {\n\t                characterData: true\n\t            });\n\t            text.data = ++num;\n\t        }\n\t        else if (typeof setImmediate === 'function') {\n\t            setImmediate(nextHandler);\n\t        }\n\t        else {\n\t            setTimeout(nextHandler, 0);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * 从userAgent中ie版本号的匹配信息\n\t     *\n\t     * @inner\n\t     * @type {Array}\n\t     */\n\t    var ieVersionMatch = typeof navigator !== 'undefined'\n\t        && navigator.userAgent.match(/msie\\s*([0-9]+)/i);\n\t\n\t    /**\n\t     * ie版本号，非ie时为0\n\t     *\n\t     * @inner\n\t     * @type {number}\n\t     */\n\t    var ie = ieVersionMatch ? ieVersionMatch[1] - 0 : 0;\n\t\n\t    /**\n\t     * 字符串连接时是否使用老式的兼容方案\n\t     *\n\t     * @inner\n\t     * @type {boolean}\n\t     */\n\t    var isCompatStringJoin = ie && ie < 8;\n\t\n\t    // HACK: IE8下，设置innerHTML时如果以script开头，script会被自动滤掉\n\t    //       为了保证script的stump存在，前面加个零宽特殊字符\n\t    /**\n\t     * 是否在桩元素前面插入空白字符\n\t     *\n\t     * @inner\n\t     * @type {boolean}\n\t     */\n\t    var isFEFFBeforeStump = ie && ie < 9;\n\t\n\t    /**\n\t     * 写个用于跨平台提高性能的字符串连接类\n\t     * 万一不小心支持老式浏览器了呢\n\t     *\n\t     * @inner\n\t     * @class\n\t     */\n\t    function StringBuffer() {\n\t        this.raw = isCompatStringJoin ? [] : '';\n\t        this.length = 0;\n\t    }\n\t\n\t    /**\n\t     * 获取连接的字符串结果\n\t     *\n\t     * @inner\n\t     * @return {string}\n\t     */\n\t    StringBuffer.prototype.toString = function () {\n\t        return isCompatStringJoin ? this.raw.join('') : this.raw;\n\t    };\n\t\n\t    /**\n\t     * 增加字符串片段\n\t     * 就不支持多参数，别问我为什么，这东西也不是给外部用的\n\t     *\n\t     * @inner\n\t     * @param {string} source 字符串片段\n\t     */\n\t    StringBuffer.prototype.push = isCompatStringJoin\n\t        ? function (source) {\n\t            this.raw[this.length++] = source;\n\t        }\n\t        : function (source) {\n\t            this.length++;\n\t            this.raw += source;\n\t        };\n\t\n\t    /**\n\t     * 索引列表，能根据 item 中的 name 进行索引\n\t     *\n\t     * @inner\n\t     * @class\n\t     */\n\t    function IndexedList() {\n\t        this.raw = [];\n\t        this.index = {};\n\t    }\n\t\n\t    /**\n\t     * 在列表末尾添加 item\n\t     *\n\t     * @inner\n\t     * @param {Object} item 要添加的对象\n\t     */\n\t    IndexedList.prototype.push = function (item) {\n\t        // #begin-ignore\n\t        if (!item.name) {\n\t            throw new Error('Miss \"name\" property');\n\t        }\n\t        // #end-ignore\n\t\n\t        if (!this.index[item.name]) {\n\t            this.raw.push(item);\n\t            this.index[item.name] = item;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 根据顺序下标获取 item\n\t     *\n\t     * @inner\n\t     * @param {number} index 顺序下标\n\t     * @return {Object}\n\t     */\n\t    IndexedList.prototype.getAt = function (index) {\n\t        return this.raw[index];\n\t    };\n\t\n\t    /**\n\t     * 根据 name 获取 item\n\t     *\n\t     * @inner\n\t     * @param {string} name name\n\t     * @return {Object}\n\t     */\n\t    IndexedList.prototype.get = function (name) {\n\t        return this.index[name];\n\t    };\n\t\n\t    /**\n\t     * 遍历 items\n\t     *\n\t     * @inner\n\t     * @param {function(*,Number):boolean} iterator 遍历函数\n\t     * @param {Object} thisArg 遍历函数运行的this环境\n\t     */\n\t    IndexedList.prototype.each = function (iterator, thisArg) {\n\t        each(this.raw, bind(iterator, thisArg || this));\n\t    };\n\t\n\t    /**\n\t     * 根据 name 移除 item\n\t     *\n\t     * @inner\n\t     * @param {string} name name\n\t     */\n\t    IndexedList.prototype.remove = function (name) {\n\t        this.index[name] = null;\n\t\n\t        var len = this.raw.length;\n\t        while (len--) {\n\t            if (this.raw[len].name === name) {\n\t                this.raw.splice(len, 1);\n\t                break;\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 连接另外一个 IndexedList，返回一个新的 IndexedList\n\t     *\n\t     * @inner\n\t     * @param {IndexedList} other 要连接的IndexedList\n\t     * @return {IndexedList}\n\t     */\n\t    IndexedList.prototype.concat = function (other) {\n\t        var result = new IndexedList();\n\t        each(this.raw.concat(other.raw), function (item) {\n\t            result.push(item);\n\t        });\n\t\n\t        return result;\n\t    };\n\t\n\t    /**\n\t     * 判断标签是否应自关闭\n\t     *\n\t     * @inner\n\t     * @param {string} tagName 标签名\n\t     * @return {boolean}\n\t     */\n\t    function tagIsAutoClose(tagName) {\n\t        return /^(area|base|br|col|embed|hr|img|input|keygen|param|source|track|wbr)$/i.test(tagName);\n\t    }\n\t\n\t\n\t    // #region parse\n\t    /**\n\t     * 表达式类型\n\t     *\n\t     * @inner\n\t     * @const\n\t     * @type {Object}\n\t     */\n\t    var ExprType = {\n\t        STRING: 1,\n\t        NUMBER: 2,\n\t        ACCESSOR: 3,\n\t        INTERP: 4,\n\t        CALL: 5,\n\t        TEXT: 6,\n\t        BINARY: 7,\n\t        UNARY: 8,\n\t        TERTIARY: 9\n\t    };\n\t\n\t    /**\n\t     * 字符串源码读取类，用于模板字符串解析过程\n\t     *\n\t     * @inner\n\t     * @class\n\t     * @param {string} source 要读取的字符串\n\t     */\n\t    function Walker(source) {\n\t        this.source = source;\n\t        this.len = this.source.length;\n\t        this.index = 0;\n\t    }\n\t\n\t    /**\n\t     * 获取当前字符码\n\t     *\n\t     * @return {number}\n\t     */\n\t    Walker.prototype.currentCode = function () {\n\t        return this.charCode(this.index);\n\t    };\n\t\n\t    /**\n\t     * 截取字符串片段\n\t     *\n\t     * @param {number} start 起始位置\n\t     * @param {number} end 结束位置\n\t     * @return {string}\n\t     */\n\t    Walker.prototype.cut = function (start, end) {\n\t        return this.source.slice(start, end);\n\t    };\n\t\n\t    /**\n\t     * 向前读取字符\n\t     *\n\t     * @param {number} distance 读取字符数\n\t     */\n\t    Walker.prototype.go = function (distance) {\n\t        this.index += distance;\n\t    };\n\t\n\t    /**\n\t     * 读取下一个字符，返回下一个字符的 code\n\t     *\n\t     * @return {number}\n\t     */\n\t    Walker.prototype.nextCode = function () {\n\t        this.go(1);\n\t        return this.currentCode();\n\t    };\n\t\n\t    /**\n\t     * 获取相应位置字符的 code\n\t     *\n\t     * @param {number} index 字符位置\n\t     * @return {number}\n\t     */\n\t    Walker.prototype.charCode = function (index) {\n\t        return this.source.charCodeAt(index);\n\t    };\n\t\n\t    /**\n\t     * 向前读取字符，直到遇到指定字符再停止\n\t     *\n\t     * @param {number=} charCode 指定字符的code\n\t     * @return {boolean} 当指定字符时，返回是否碰到指定的字符\n\t     */\n\t    Walker.prototype.goUntil = function (charCode) {\n\t        var code;\n\t        while (this.index < this.len && (code = this.currentCode())) {\n\t            switch (code) {\n\t                case 32:\n\t                case 9:\n\t                    this.index++;\n\t                    break;\n\t                default:\n\t                    if (code === charCode) {\n\t                        this.index++;\n\t                        return 1;\n\t                    }\n\t                    return;\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 向前读取符合规则的字符片段，并返回规则匹配结果\n\t     *\n\t     * @param {RegExp} reg 字符片段的正则表达式\n\t     * @return {Array}\n\t     */\n\t    Walker.prototype.match = function (reg) {\n\t        reg.lastIndex = this.index;\n\t\n\t        var match = reg.exec(this.source);\n\t        if (match) {\n\t            this.index = reg.lastIndex;\n\t        }\n\t\n\t        return match;\n\t    };\n\t\n\t    /**\n\t     * 模板解析生成的抽象节点\n\t     *\n\t     * @class\n\t     * @inner\n\t     * @param {Object=} options 节点参数\n\t     * @param {string=} options.tagName 标签名\n\t     * @param {ANode=} options.parent 父节点\n\t     * @param {boolean=} options.isText 是否文本节点\n\t     */\n\t    function ANode(options) {\n\t        if (!options || !options.isText) {\n\t            this.directives = new IndexedList();\n\t            this.props = new IndexedList();\n\t            this.events = [];\n\t            this.childs = [];\n\t        }\n\t\n\t        extend(this, options);\n\t    }\n\t\n\t    /**\n\t     * 解析 template\n\t     *\n\t     * @inner\n\t     * @param {string} source template 源码\n\t     * @return {node.Root}\n\t     */\n\t    function parseTemplate(source) {\n\t        var rootNode = new ANode();\n\t\n\t        if (typeof source !== 'string') {\n\t            return rootNode;\n\t        }\n\t\n\t        source = source.replace(/<!--([\\s\\S]*?)-->/mg, '').replace(/(^\\s+|\\s+$)/g, '');\n\t        var walker = new Walker(source);\n\t\n\t        var tagReg = /<(\\/)?([a-z0-9-]+)\\s*/ig;\n\t        var attrReg = /([-:0-9a-z\\(\\)\\[\\]]+)(=(['\"])([^\\3]*?)\\3)?\\s*/ig;\n\t\n\t        var tagMatch;\n\t        var currentNode = rootNode;\n\t        var beforeLastIndex = 0;\n\t\n\t        while ((tagMatch = walker.match(tagReg)) != null) {\n\t            var tagEnd = tagMatch[1];\n\t            var tagName = tagMatch[2].toLowerCase();\n\t\n\t            pushTextNode(source.slice(\n\t                beforeLastIndex,\n\t                walker.index - tagMatch[0].length\n\t            ));\n\t\n\t            // 62: >\n\t            // 47: /\n\t            if (tagEnd && walker.currentCode() === 62) {\n\t                // 满足关闭标签的条件时，关闭标签\n\t                // 向上查找到对应标签，找不到时忽略关闭\n\t                var closeTargetNode = currentNode;\n\t                while (closeTargetNode && closeTargetNode.tagName !== tagName) {\n\t                    closeTargetNode = closeTargetNode.parent;\n\t                }\n\t\n\t                closeTargetNode && (currentNode = closeTargetNode.parent);\n\t                walker.go(1);\n\t            }\n\t            else if (!tagEnd) {\n\t                var aElement = new ANode({\n\t                    tagName: tagName,\n\t                    parent: currentNode\n\t                });\n\t                var tagClose = tagIsAutoClose(tagName);\n\t\n\t                // 解析 attributes\n\t\n\t                /* eslint-disable no-constant-condition */\n\t                while (1) {\n\t                /* eslint-enable no-constant-condition */\n\t\n\t                    var nextCharCode = walker.currentCode();\n\t\n\t                    // 标签结束时跳出 attributes 读取\n\t                    // 标签可能直接结束或闭合结束\n\t                    if (nextCharCode === 62) {\n\t                        walker.go(1);\n\t                        break;\n\t                    }\n\t                    else if (nextCharCode === 47\n\t                        && walker.charCode(walker.index + 1) === 62\n\t                    ) {\n\t                        walker.go(2);\n\t                        tagClose = 1;\n\t                        break;\n\t                    }\n\t\n\t                    // 读取 attribute\n\t                    var attrMatch = walker.match(attrReg);\n\t                    if (attrMatch) {\n\t                        integrateAttr(\n\t                            aElement,\n\t                            attrMatch[1],\n\t                            attrMatch[2] ? attrMatch[4] : attrMatch[1]\n\t                        );\n\t                    }\n\t                }\n\t\n\t                currentNode.childs.push(aElement);\n\t                if (!tagClose) {\n\t                    currentNode = aElement;\n\t                }\n\t            }\n\t\n\t            beforeLastIndex = walker.index;\n\t        }\n\t\n\t        pushTextNode(walker.cut(beforeLastIndex));\n\t\n\t        return rootNode;\n\t\n\t        /**\n\t         * 在读取栈中添加文本节点\n\t         *\n\t         * @inner\n\t         * @param {string} text 文本内容\n\t         */\n\t        function pushTextNode(text) {\n\t            if (text) {\n\t                currentNode.childs.push(new ANode({\n\t                    isText: true,\n\t                    text: text,\n\t                    textExpr: parseText(text),\n\t                    parent: currentNode\n\t                }));\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\n\t     * 解析抽象节点属性\n\t     *\n\t     * @inner\n\t     * @param {ANode} aNode 抽象节点\n\t     * @param {string} name 属性名称\n\t     * @param {string} value 属性值\n\t     * @param {boolean=} ignoreNormal 是否忽略无前缀的普通属性\n\t     */\n\t    function integrateAttr(aNode, name, value, ignoreNormal) {\n\t        if (name === 'id') {\n\t            aNode.id = value;\n\t            return;\n\t        }\n\t\n\t        var prefixIndex = name.indexOf('-');\n\t        var realName;\n\t        var prefix;\n\t\n\t        if (prefixIndex > 0) {\n\t            prefix = name.slice(0, prefixIndex);\n\t            realName = name.slice(prefixIndex + 1);\n\t        }\n\t\n\t        switch (prefix) {\n\t            case 'on':\n\t                aNode.events.push({\n\t                    name: realName,\n\t                    expr: parseCall(value)\n\t                });\n\t                break;\n\t\n\t            case 'san':\n\t                var directive = parseDirective(realName, value);\n\t                directive && aNode.directives.push(directive);\n\t                break;\n\t\n\t            case 'prop':\n\t                integrateProp(aNode, realName, value);\n\t                break;\n\t\n\t            default:\n\t                if (!ignoreNormal) {\n\t                    integrateProp(aNode, name, value);\n\t                }\n\t        }\n\t    }\n\t\n\t    /**\n\t     * 解析抽象节点绑定属性\n\t     *\n\t     * @inner\n\t     * @param {ANode} aNode 抽象节点\n\t     * @param {string} name 属性名称\n\t     * @param {string} value 属性值\n\t     */\n\t    function integrateProp(aNode, name, value) {\n\t        // parse two way binding, e.g. value=\"{=ident=}\"\n\t        var xMatch = value.match(/^\\{=\\s*(.*?)\\s*=\\}$/);\n\t\n\t        if (xMatch) {\n\t            aNode.props.push({\n\t                name: name,\n\t                expr: parseExpr(xMatch[1]),\n\t                x: true\n\t            });\n\t\n\t            return;\n\t        }\n\t\n\t        // parse normal prop\n\t        aNode.props.push(textPropExtra({\n\t            name: name,\n\t            expr: parseText(value),\n\t            raw: value\n\t        }));\n\t    }\n\t\n\t    /**\n\t     * 为text类型的属性绑定附加额外的行为，用于一些特殊需求，比如class中插值的自动展开\n\t     *\n\t     * @inner\n\t     * @param {Object} prop 绑定信息\n\t     * @return {Object}\n\t     */\n\t    function textPropExtra(prop) {\n\t        // 这里不能把只有一个插值的属性抽取\n\t        // 因为插值里的值可能是html片段，容易被注入\n\t        // 组件的数据绑定在组件init时做抽取\n\t        switch (prop.name) {\n\t            case 'class':\n\t                each(prop.expr.segs, function (seg) {\n\t                    if (seg.type === ExprType.INTERP) {\n\t                        seg.filters.push({\n\t                            type: ExprType.CALL,\n\t                            name: 'clazz',\n\t                            args: []\n\t                        });\n\t                    }\n\t                });\n\t                break;\n\t\n\t            case 'style':\n\t                each(prop.expr.segs, function (seg) {\n\t                    if (seg.type === ExprType.INTERP) {\n\t                        seg.filters.push({\n\t                            type: ExprType.CALL,\n\t                            name: 'style',\n\t                            args: []\n\t                        });\n\t                    }\n\t                });\n\t                break;\n\t        }\n\t\n\t        return prop;\n\t    }\n\t\n\t    /**\n\t     * 指令解析器\n\t     *\n\t     * @type {Object}\n\t     * @inner\n\t     */\n\t    var directiveParsers = {\n\t        'for': function (value) {\n\t            var walker = new Walker(value);\n\t            var match = walker.match(/^\\s*([\\$0-9a-z_]+)(\\s*,\\s*([\\$0-9a-z_]+))?\\s+in\\s+/ig);\n\t\n\t            if (match) {\n\t                return {\n\t                    item: match[1],\n\t                    index: match[3] || '$index',\n\t                    list: readPropertyAccessor(walker)\n\t                };\n\t            }\n\t\n\t            // #begin-ignore\n\t            throw new Error('[SAN FATAL] for syntax error: ' + value);\n\t            // #end-ignore\n\t        },\n\t\n\t        'ref': function (value) {\n\t            return {\n\t                value: parseText(value)\n\t            };\n\t        },\n\t\n\t        'if': function (value) {\n\t            return {\n\t                value: parseExpr(value)\n\t            };\n\t        },\n\t\n\t        'else': function () {\n\t            return {\n\t                value: true\n\t            };\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 解析指令\n\t     *\n\t     * @inner\n\t     * @param {string} name 指令名称\n\t     * @param {string} value 指令值\n\t     * @return {Object?}\n\t     */\n\t    function parseDirective(name, value) {\n\t        var parser = directiveParsers[name];\n\t        if (parser) {\n\t            var result = parser(value);\n\t            result.name = name;\n\t            return result;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * 解析文本\n\t     *\n\t     * @inner\n\t     * @param {string} source 源码\n\t     * @return {Object}\n\t     */\n\t    function parseText(source) {\n\t        var exprStartReg = /\\{\\{\\s*([\\s\\S]+?)\\s*\\}\\}/ig;\n\t        var exprMatch;\n\t\n\t        var walker = new Walker(source);\n\t        var beforeIndex = 0;\n\t\n\t        var segs = [];\n\t        function pushStringToSeg(text) {\n\t            text && segs.push({\n\t                type: ExprType.STRING,\n\t                value: text\n\t            });\n\t        }\n\t\n\t        while ((exprMatch = walker.match(exprStartReg)) != null) {\n\t            pushStringToSeg(walker.cut(\n\t                beforeIndex,\n\t                walker.index - exprMatch[0].length\n\t            ));\n\t            segs.push(parseInterp(exprMatch[1]));\n\t            beforeIndex = walker.index;\n\t        }\n\t\n\t        pushStringToSeg(walker.cut(beforeIndex));\n\t\n\t        return {\n\t            type: ExprType.TEXT,\n\t            segs: segs\n\t        };\n\t    }\n\t\n\t    /**\n\t     * 解析插值替换\n\t     *\n\t     * @inner\n\t     * @param {string} source 源码\n\t     * @return {Object}\n\t     */\n\t    function parseInterp(source) {\n\t        var walker = new Walker(source);\n\t        var expr = readTertiaryExpr(walker);\n\t\n\t        var filters = [];\n\t        while (walker.goUntil(124)) { // |\n\t            filters.push(readCall(walker));\n\t        }\n\t\n\t        return {\n\t            type: ExprType.INTERP,\n\t            expr: expr,\n\t            filters: filters\n\t        };\n\t    }\n\t\n\t    /**\n\t     * 解析表达式\n\t     *\n\t     * @inner\n\t     * @param {string} source 源码\n\t     * @return {Object}\n\t     */\n\t    function parseExpr(source) {\n\t        if (typeof source === 'object' && source.type) {\n\t            return source;\n\t        }\n\t\n\t        return readTertiaryExpr(new Walker(source));\n\t    }\n\t\n\t    /**\n\t     * 解析调用\n\t     *\n\t     * @inner\n\t     * @param {string} source 源码\n\t     * @return {Object}\n\t     */\n\t    function parseCall(source) {\n\t        return readCall(new Walker(source));\n\t    }\n\t\n\t    /**\n\t     * 读取字符串\n\t     *\n\t     * @inner\n\t     * @param {Walker} walker 源码读取对象\n\t     * @return {Object}\n\t     */\n\t    function readString(walker) {\n\t        var startCode = walker.currentCode();\n\t        var startIndex = walker.index;\n\t        var charCode;\n\t\n\t        walkLoop: while ((charCode = walker.nextCode())) {\n\t            switch (charCode) {\n\t                case 92: // \\\n\t                    walker.go(1);\n\t                    break;\n\t                case startCode:\n\t                    walker.go(1);\n\t                    break walkLoop;\n\t            }\n\t        }\n\t\n\t        var literal = walker.cut(startIndex, walker.index);\n\t        return {\n\t            type: ExprType.STRING,\n\t            value: (new Function('return ' + literal))()\n\t        };\n\t    }\n\t\n\t    /**\n\t     * 读取ident\n\t     *\n\t     * @inner\n\t     * @param {Walker} walker 源码读取对象\n\t     * @return {string}\n\t     */\n\t    function readIdentifier(walker) {\n\t        var match = walker.match(/\\s*([\\$0-9a-z_]+)/ig);\n\t        return match[1];\n\t    }\n\t\n\t    /**\n\t     * 读取数字\n\t     *\n\t     * @inner\n\t     * @param {Walker} walker 源码读取对象\n\t     * @return {Object}\n\t     */\n\t    function readNumber(walker) {\n\t        var match = walker.match(/\\s*(-?[0-9]+(.[0-9]+)?)/g);\n\t\n\t        return {\n\t            type: ExprType.NUMBER,\n\t            value: match[1] - 0\n\t        };\n\t    }\n\t\n\t    /**\n\t     * 读取属性访问表达式\n\t     *\n\t     * @inner\n\t     * @param {Walker} walker 源码读取对象\n\t     * @return {Object}\n\t     */\n\t    function readPropertyAccessor(walker) {\n\t        var result = {\n\t            type: ExprType.ACCESSOR,\n\t            paths: [\n\t                {\n\t                    type: ExprType.STRING,\n\t                    value: readIdentifier(walker)\n\t                }\n\t            ]\n\t        };\n\t\n\t        /* eslint-disable no-constant-condition */\n\t        accessorLoop: while (1) {\n\t        /* eslint-enable no-constant-condition */\n\t\n\t            switch (walker.currentCode()) {\n\t                case 46: // .\n\t                    walker.go(1);\n\t\n\t                    // ident as string\n\t                    result.paths.push({\n\t                        type: ExprType.STRING,\n\t                        value: readIdentifier(walker)\n\t                    });\n\t                    break;\n\t\n\t                case 91: // [\n\t                    walker.go(1);\n\t                    result.paths.push(readTertiaryExpr(walker));\n\t                    walker.goUntil(93);  // ]\n\t                    break;\n\t\n\t                default:\n\t                    break accessorLoop;\n\t            }\n\t        }\n\t\n\t        return result;\n\t    }\n\t\n\t    /**\n\t     * 读取三元表达式\n\t     *\n\t     * @inner\n\t     * @param {Walker} walker 源码读取对象\n\t     * @return {Object}\n\t     */\n\t    function readTertiaryExpr(walker) {\n\t        var conditional = readLogicalORExpr(walker);\n\t        walker.goUntil();\n\t\n\t        if (walker.currentCode() === 63) { // ?\n\t            walker.go(1);\n\t            var yesExpr = readTertiaryExpr(walker);\n\t            walker.goUntil();\n\t\n\t            if (walker.currentCode() === 58) { // :\n\t                walker.go(1);\n\t                return {\n\t                    type: ExprType.TERTIARY,\n\t                    segs: [\n\t                        conditional,\n\t                        yesExpr,\n\t                        readTertiaryExpr(walker)\n\t                    ]\n\t                };\n\t            }\n\t        }\n\t\n\t        return conditional;\n\t    }\n\t\n\t    /**\n\t     * 读取逻辑或表达式\n\t     *\n\t     * @inner\n\t     * @param {Walker} walker 源码读取对象\n\t     * @return {Object}\n\t     */\n\t    function readLogicalORExpr(walker) {\n\t        var expr = readLogicalANDExpr(walker);\n\t        walker.goUntil();\n\t\n\t        if (walker.currentCode() === 124) { // |\n\t            if (walker.nextCode() === 124) {\n\t                walker.go(1);\n\t                return {\n\t                    type: ExprType.BINARY,\n\t                    operator: 248,\n\t                    segs: [expr, readLogicalORExpr(walker)]\n\t                };\n\t            }\n\t\n\t            walker.go(-1);\n\t        }\n\t\n\t        return expr;\n\t    }\n\t\n\t    /**\n\t     * 读取逻辑与表达式\n\t     *\n\t     * @inner\n\t     * @param {Walker} walker 源码读取对象\n\t     * @return {Object}\n\t     */\n\t    function readLogicalANDExpr(walker) {\n\t        var expr = readEqualityExpr(walker);\n\t        walker.goUntil();\n\t\n\t        if (walker.currentCode() === 38) { // &\n\t            if (walker.nextCode() === 38) {\n\t                walker.go(1);\n\t                return {\n\t                    type: ExprType.BINARY,\n\t                    operator: 76,\n\t                    segs: [expr, readLogicalANDExpr(walker)]\n\t                };\n\t            }\n\t\n\t            walker.go(-1);\n\t        }\n\t\n\t        return expr;\n\t    }\n\t\n\t    /**\n\t     * 读取相等比对表达式\n\t     *\n\t     * @inner\n\t     * @param {Walker} walker 源码读取对象\n\t     * @return {Object}\n\t     */\n\t    function readEqualityExpr(walker) {\n\t        var expr = readRelationalExpr(walker);\n\t        walker.goUntil();\n\t\n\t        var code = walker.currentCode();\n\t        switch (code) {\n\t            case 61: // =\n\t            case 33: // !\n\t                if (walker.nextCode() === 61) {\n\t                    code += 61;\n\t                    if (walker.nextCode() === 61) {\n\t                        code += 61;\n\t                        walker.go(1);\n\t                    }\n\t\n\t                    return {\n\t                        type: ExprType.BINARY,\n\t                        operator: code,\n\t                        segs: [expr, readEqualityExpr(walker)]\n\t                    };\n\t                }\n\t\n\t                walker.go(-1);\n\t        }\n\t\n\t        return expr;\n\t    }\n\t\n\t    /**\n\t     * 读取关系判断表达式\n\t     *\n\t     * @inner\n\t     * @param {Walker} walker 源码读取对象\n\t     * @return {Object}\n\t     */\n\t    function readRelationalExpr(walker) {\n\t        var expr = readAdditiveExpr(walker);\n\t        walker.goUntil();\n\t\n\t        var code = walker.currentCode();\n\t        switch (code) {\n\t            case 60: // <\n\t            case 62: // >\n\t                if (walker.nextCode() === 61) {\n\t                    code += 61;\n\t                    walker.go(1);\n\t                }\n\t\n\t                return {\n\t                    type: ExprType.BINARY,\n\t                    operator: code,\n\t                    segs: [expr, readRelationalExpr(walker)]\n\t                };\n\t        }\n\t\n\t        return expr;\n\t    }\n\t\n\t    /**\n\t     * 读取加法表达式\n\t     *\n\t     * @inner\n\t     * @param {Walker} walker 源码读取对象\n\t     * @return {Object}\n\t     */\n\t    function readAdditiveExpr(walker) {\n\t        var expr = readMultiplicativeExpr(walker);\n\t        walker.goUntil();\n\t\n\t        var code = walker.currentCode();\n\t        switch (code) {\n\t            case 43: // +\n\t            case 45: // -\n\t                walker.go(1);\n\t                return {\n\t                    type: ExprType.BINARY,\n\t                    operator: code,\n\t                    segs: [expr, readAdditiveExpr(walker)]\n\t                };\n\t        }\n\t\n\t        return expr;\n\t    }\n\t\n\t    /**\n\t     * 读取乘法表达式\n\t     *\n\t     * @inner\n\t     * @param {Walker} walker 源码读取对象\n\t     * @return {Object}\n\t     */\n\t    function readMultiplicativeExpr(walker) {\n\t        var expr = readUnaryExpr(walker);\n\t        walker.goUntil();\n\t\n\t        var code = walker.currentCode();\n\t        switch (code) {\n\t            case 42: // *\n\t            case 47: // /\n\t                walker.go(1);\n\t                return {\n\t                    type: ExprType.BINARY,\n\t                    operator: code,\n\t                    segs: [expr, readMultiplicativeExpr(walker)]\n\t                };\n\t        }\n\t\n\t        return expr;\n\t    }\n\t\n\t    /**\n\t     * 读取一元表达式\n\t     *\n\t     * @inner\n\t     * @param {Walker} walker 源码读取对象\n\t     * @return {Object}\n\t     */\n\t    function readUnaryExpr(walker) {\n\t        walker.goUntil();\n\t\n\t        switch (walker.currentCode()) {\n\t            case 33: // !\n\t                walker.go(1);\n\t                return {\n\t                    type: ExprType.UNARY,\n\t                    expr: readUnaryExpr(walker)\n\t                };\n\t            case 34: // \"\n\t            case 39: // '\n\t                return readString(walker);\n\t            case 45: // number\n\t            case 48:\n\t            case 49:\n\t            case 50:\n\t            case 51:\n\t            case 52:\n\t            case 53:\n\t            case 54:\n\t            case 55:\n\t            case 56:\n\t            case 57:\n\t                return readNumber(walker);\n\t            case 40: // (\n\t                return readParenthesizedExpr(walker);\n\t        }\n\t\n\t        return readPropertyAccessor(walker);\n\t    }\n\t\n\t    function readParenthesizedExpr(walker) {\n\t        walker.go(1);\n\t        var expr = readTertiaryExpr(walker);\n\t        walker.goUntil(41);  // )\n\t\n\t        return expr;\n\t    }\n\t\n\t    /**\n\t     * 二元表达式操作函数\n\t     *\n\t     * @inner\n\t     * @type {Object}\n\t     */\n\t    var BinaryOp = {\n\t        /* eslint-disable */\n\t        43: function (a, b) {\n\t            return a + b;\n\t        },\n\t        45: function (a, b) {\n\t            return a - b;\n\t        },\n\t        42: function (a, b) {\n\t            return a * b;\n\t        },\n\t        47: function (a, b) {\n\t            return a / b;\n\t        },\n\t        60: function (a, b) {\n\t            return a < b;\n\t        },\n\t        62: function (a, b) {\n\t            return a > b;\n\t        },\n\t        76: function (a, b) {\n\t            return a && b;\n\t        },\n\t        94: function (a, b) {\n\t            return a != b;\n\t        },\n\t        121: function (a, b) {\n\t            return a <= b;\n\t        },\n\t        122: function (a, b) {\n\t            return a == b;\n\t        },\n\t        123: function (a, b) {\n\t            return a >= b;\n\t        },\n\t        155: function (a, b) {\n\t            return a !== b;\n\t        },\n\t        183: function (a, b) {\n\t            return a === b;\n\t        },\n\t        248: function (a, b) {\n\t            return a || b;\n\t        }\n\t        /* eslint-enable */\n\t    };\n\t\n\t    /**\n\t     * 读取调用\n\t     *\n\t     * @inner\n\t     * @param {Walker} walker 源码读取对象\n\t     * @return {Object}\n\t     */\n\t    function readCall(walker) {\n\t        walker.goUntil();\n\t        var ident = readIdentifier(walker);\n\t        var args = [];\n\t\n\t        if (walker.goUntil(40)) { // (\n\t            while (!walker.goUntil(41)) { // )\n\t                args.push(readTertiaryExpr(walker));\n\t                walker.goUntil(44); // ,\n\t            }\n\t        }\n\t\n\t        return {\n\t            type: ExprType.CALL,\n\t            name: ident,\n\t            args: args\n\t        };\n\t    }\n\t\n\t    /**\n\t     * 判断变更表达式与多个表达式之间的关系，-1为完全没关系，0为有关系\n\t     *\n\t     * @inner\n\t     * @param {Object} changeExpr 目标表达式\n\t     * @param {Array} exprs 多个源表达式\n\t     * @param {Model} model 表达式所属数据环境\n\t     * @return {number}\n\t     */\n\t    function changeExprCompareExprs(changeExpr, exprs, model) {\n\t        var result;\n\t        each(exprs, function (expr) {\n\t            result = changeExprCompare(changeExpr, expr, model);\n\t            return !result;\n\t        });\n\t\n\t        return result ? 1 : 0;\n\t    }\n\t\n\t    /**\n\t     * 比较变更表达式与目标表达式之间的关系，用于视图更新判断\n\t     * 视图更新需要根据其关系，做出相应的更新行为\n\t     *\n\t     * 0: 完全没关系\n\t     * 1: 变更表达式是目标表达式的母项(如a与a.b) 或 表示需要完全变化\n\t     * 2: 变更表达式是目标表达式相等\n\t     * >2: 变更表达式是目标表达式的子项，如a.b.c与a.b\n\t     *\n\t     * @param {Object} changeExpr 变更表达式\n\t     * @param {Object} expr 要比较的目标表达式\n\t     * @param {Model} model 表达式所属数据环境\n\t     * @return {number}\n\t     */\n\t    function changeExprCompare(changeExpr, expr, model) {\n\t        switch (expr.type) {\n\t            case ExprType.ACCESSOR:\n\t                var paths = expr.paths;\n\t                var len = paths.length;\n\t                var changePaths = changeExpr.paths;\n\t                var changeLen = changePaths.length;\n\t\n\t                var result = 1;\n\t                for (var i = 0; i < len; i++) {\n\t                    var pathExpr = paths[i];\n\t\n\t                    if (pathExpr.type === ExprType.ACCESSOR\n\t                        && changeExprCompare(changeExpr, pathExpr, model)\n\t                    ) {\n\t                        return 1;\n\t                    }\n\t\n\t                    if (result && i < changeLen\n\t                        /* eslint-disable eqeqeq */\n\t                        && evalExpr(pathExpr, model) != changePaths[i].value\n\t                        /* eslint-enable eqeqeq */\n\t                    ) {\n\t                        result = 0;\n\t                    }\n\t                }\n\t\n\t                if (result) {\n\t                    result = Math.max(1, changeLen - len + 2);\n\t                }\n\t                return result;\n\t\n\t            case ExprType.UNARY:\n\t                return changeExprCompare(changeExpr, expr.expr, model) ? 1 : 0;\n\t\n\t\n\t            case ExprType.TEXT:\n\t            case ExprType.BINARY:\n\t            case ExprType.TERTIARY:\n\t                return changeExprCompareExprs(changeExpr, expr.segs, model);\n\t\n\t            case ExprType.INTERP:\n\t                if (!changeExprCompare(changeExpr, expr.expr, model)) {\n\t                    var filterResult;\n\t                    each(expr.filters, function (filter) {\n\t                        filterResult = changeExprCompareExprs(changeExpr, filter.args, model);\n\t                        return !filterResult;\n\t                    });\n\t\n\t                    return filterResult ? 1 : 0;\n\t                }\n\t\n\t                return 1;\n\t        }\n\t\n\t        return 0;\n\t    }\n\t\n\t    // #region Model\n\t\n\t    /**\n\t     * 数据容器类\n\t     *\n\t     * @inner\n\t     * @class\n\t     * @param {Model} parent 父级数据容器\n\t     */\n\t    function Model(parent) {\n\t        this.parent = parent;\n\t        this.listeners = [];\n\t        this.data = {};\n\t    }\n\t\n\t    /**\n\t     * 数据变更类型枚举\n\t     *\n\t     * @inner\n\t     * @const\n\t     * @type {Object}\n\t     */\n\t    var ModelChangeType = {\n\t        SET: 1,\n\t        SPLICE: 2\n\t    };\n\t\n\t    /**\n\t     * 添加数据变更的事件监听器\n\t     *\n\t     * @param {Function} listener 监听函数\n\t     */\n\t    Model.prototype.onChange = function (listener) {\n\t        if (typeof listener === 'function') {\n\t            this.listeners.push(listener);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 移除数据变更的事件监听器\n\t     *\n\t     * @param {Function} listener 监听函数\n\t     */\n\t    Model.prototype.unChange = function (listener) {\n\t        var len = this.listeners.length;\n\t        while (len--) {\n\t            if (!listener || this.listeners[len] === listener) {\n\t                this.listeners.splice(len, 1);\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 触发数据变更\n\t     *\n\t     * @param {Object} change 变更信息对象\n\t     */\n\t    Model.prototype.fireChange = function (change) {\n\t        each(this.listeners, function (listener) {\n\t            listener.call(this, change);\n\t        }, this);\n\t    };\n\t\n\t    /**\n\t     * 获取数据项\n\t     *\n\t     * @param {string|Object?} expr 数据项路径\n\t     * @return {*}\n\t     */\n\t    Model.prototype.get = function (expr) {\n\t        var value = this.data;\n\t        if (!expr) {\n\t            return value;\n\t        }\n\t\n\t        expr = parseExpr(expr);\n\t\n\t        if (expr.type === ExprType.ACCESSOR) {\n\t            var paths = expr.paths;\n\t            var start = 0;\n\t            var l = paths.length;\n\t\n\t            for (; start < l; start++) {\n\t                if (paths[start].value == null) {\n\t                    break;\n\t                }\n\t            }\n\t\n\t            var i = 0;\n\t            for (; value != null && i < start; i++) {\n\t                value = value[paths[i].value];\n\t            }\n\t\n\t            if (value == null && this.parent) {\n\t                value = this.parent.get({\n\t                    type: ExprType.ACCESSOR,\n\t                    paths: paths.slice(0, start)\n\t                });\n\t            }\n\t\n\t            for (i = start; value != null && i < l; i++) {\n\t                value = value[paths[i].value || evalExpr(paths[i], this)];\n\t            }\n\t\n\t            return value;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 设置数据项\n\t     *\n\t     * @param {string|Object} expr 数据项路径\n\t     * @param {*} value 数据值\n\t     * @param {Object=} option 设置参数\n\t     * @param {boolean} option.silence 静默设置，不触发变更事件\n\t     */\n\t    Model.prototype.set = function (expr, value, option) {\n\t        option = option || {};\n\t        expr = parseExpr(expr);\n\t\n\t        if (expr.type === ExprType.ACCESSOR) {\n\t            var data = this.data;\n\t            var prop;\n\t\n\t            var paths = expr.paths;\n\t            for (var i = 0, l = paths.length; i < l - 1; i++) {\n\t                var pathValue = evalExpr(paths[i], this);\n\t\n\t                if (data[pathValue] == null) {\n\t                    data[pathValue] = {};\n\t                }\n\t                data = data[pathValue];\n\t            }\n\t\n\t            prop = evalExpr(paths[i], this);\n\t\n\t            if (prop != null) {\n\t                data[prop] = value;\n\t                !option.silence && this.fireChange({\n\t                    type: ModelChangeType.SET,\n\t                    expr: expr,\n\t                    value: value,\n\t                    option: option\n\t                });\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 数组数据项push操作\n\t     *\n\t     * @param {string|Object} expr 数据项路径\n\t     * @param {*} item 要push的值\n\t     * @param {Object=} option 设置参数\n\t     * @param {boolean} option.silence 静默设置，不触发变更事件\n\t     */\n\t    Model.prototype.push = function (expr, item, option) {\n\t        var target = this.get(expr);\n\t\n\t        if (target instanceof Array) {\n\t            this.splice(expr, [target.length, 0, item], option);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 数组数据项pop操作\n\t     *\n\t     * @param {string|Object} expr 数据项路径\n\t     * @param {Object=} option 设置参数\n\t     * @param {boolean} option.silence 静默设置，不触发变更事件\n\t     * @return {*}\n\t     */\n\t    Model.prototype.pop = function (expr, option) {\n\t        var target = this.get(expr);\n\t\n\t        if (target instanceof Array) {\n\t            var len = target.length;\n\t            if (len) {\n\t                return this.splice(expr, [len - 1, 1], option)[0];\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 数组数据项shift操作\n\t     *\n\t     * @param {string|Object} expr 数据项路径\n\t     * @param {Object=} option 设置参数\n\t     * @param {boolean} option.silence 静默设置，不触发变更事件\n\t     * @return {*}\n\t     */\n\t    Model.prototype.shift = function (expr, option) {\n\t        return this.splice(expr, [0, 1], option)[0];\n\t    };\n\t\n\t    /**\n\t     * 数组数据项unshift操作\n\t     *\n\t     * @param {string|Object} expr 数据项路径\n\t     * @param {*} item 要unshift的值\n\t     * @param {Object=} option 设置参数\n\t     * @param {boolean} option.silence 静默设置，不触发变更事件\n\t     */\n\t    Model.prototype.unshift = function (expr, item, option) {\n\t        this.splice(expr, [0, 0, item], option);\n\t    };\n\t\n\t    /**\n\t     * 数组数据项移除操作\n\t     *\n\t     * @param {string|Object} expr 数据项路径\n\t     * @param {number} index 要移除项的索引\n\t     * @param {Object=} option 设置参数\n\t     * @param {boolean} option.silence 静默设置，不触发变更事件\n\t     */\n\t    Model.prototype.removeAt = function (expr, index, option) {\n\t        this.splice(expr, [index, 1], option);\n\t    };\n\t\n\t    /**\n\t     * 数组数据项移除操作\n\t     *\n\t     * @param {string|Object} expr 数据项路径\n\t     * @param {*} value 要移除的项\n\t     * @param {Object=} option 设置参数\n\t     * @param {boolean} option.silence 静默设置，不触发变更事件\n\t     */\n\t    Model.prototype.remove = function (expr, value, option) {\n\t        var target = this.get(expr);\n\t\n\t        if (target instanceof Array) {\n\t            var len = target.length;\n\t            while (len--) {\n\t                if (target[len] === value) {\n\t                    this.splice(expr, [len, 1], option);\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t    };\n\t\n\t    Model.prototype.splice = function (expr, args, option) {\n\t        option = option || {};\n\t        expr = parseExpr(expr);\n\t\n\t        var target = this.get(expr);\n\t        var returnValue = [];\n\t\n\t        if (target instanceof Array) {\n\t            var index = args[0];\n\t            if (index < 0 || index > target.length) {\n\t                return;\n\t            }\n\t\n\t            returnValue = target.splice.apply(target, args);\n\t\n\t            !option.silence && this.fireChange({\n\t                expr: expr,\n\t                type: ModelChangeType.SPLICE,\n\t                index: index,\n\t                deleteCount: returnValue.length,\n\t                value: returnValue,\n\t                insertions: args.slice(2),\n\t                option: option\n\t            });\n\t        }\n\t\n\t        return returnValue;\n\t    };\n\t\n\t    /**\n\t     * HTML Filter替换的字符实体表\n\t     *\n\t     * @const\n\t     * @inner\n\t     * @type {Object}\n\t     */\n\t    var HTML_ENTITY = {\n\t        /* jshint ignore:start */\n\t        '&': '&amp;',\n\t        '<': '&lt;',\n\t        '>': '&gt;',\n\t        '\"': '&quot;',\n\t        /* eslint-disable quotes */\n\t        \"'\": '&#39;'\n\t        /* eslint-enable quotes */\n\t        /* jshint ignore:end */\n\t    };\n\t\n\t    /**\n\t     * HTML Filter的替换函数\n\t     *\n\t     * @inner\n\t     * @param {string} c 替换字符\n\t     * @return {string} 替换后的HTML字符实体\n\t     */\n\t    function htmlFilterReplacer(c) {\n\t        return HTML_ENTITY[c];\n\t    }\n\t\n\t    /**\n\t     * HTML转义\n\t     *\n\t     * @param {string} source 源串\n\t     * @return {string} 替换结果串\n\t     */\n\t    function escapeHTML(source) {\n\t        if (source == null) {\n\t            return '';\n\t        }\n\t\n\t        return String(source).replace(/[&<>\"']/g, htmlFilterReplacer);\n\t    }\n\t\n\t    /**\n\t     * 默认filter\n\t     *\n\t     * @inner\n\t     * @const\n\t     * @type {Object}\n\t     */\n\t    var DEFAULT_FILTERS = {\n\t\n\t        /**\n\t         * HTML转义filter\n\t         *\n\t         * @param {string} source 源串\n\t         * @return {string} 替换结果串\n\t         */\n\t        html: escapeHTML,\n\t\n\t        /**\n\t         * URL编码filter\n\t         *\n\t         * @param {string} source 源串\n\t         * @return {string} 替换结果串\n\t         */\n\t        url: encodeURIComponent,\n\t\n\t        /**\n\t         * 源串filter，用于在默认开启HTML转义时获取源串，不进行转义\n\t         *\n\t         * @param {string} source 源串\n\t         * @return {string} 替换结果串\n\t         */\n\t        raw: function (source) {\n\t            return source;\n\t        },\n\t\n\t        clazz: function (source) {\n\t            if (source instanceof Array) {\n\t                return source.join(' ');\n\t            }\n\t\n\t            return source;\n\t        },\n\t\n\t        style: function (source) {\n\t            if (typeof source === 'object') {\n\t                var result = '';\n\t                for (var key in source) {\n\t                    result += key + ':' + source[key] + ';';\n\t                }\n\t\n\t                return result;\n\t            }\n\t\n\t            return source;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 计算表达式的值\n\t     *\n\t     * @inner\n\t     * @param {Object} expr 表达式对象\n\t     * @param {Model} model 数据容器对象\n\t     * @param {Component=} owner 所属组件环境\n\t     * @param {boolean?} escapeInterpHtml 是否对插值进行html转义\n\t     * @return {*}\n\t     */\n\t    function evalExpr(expr, model, owner, escapeInterpHtml) {\n\t        switch (expr.type) {\n\t            case ExprType.UNARY:\n\t                return !evalExpr(expr.expr, model, owner);\n\t\n\t            case ExprType.BINARY:\n\t                var opHandler = BinaryOp[expr.operator];\n\t                if (typeof opHandler === 'function') {\n\t                    return opHandler(\n\t                        evalExpr(expr.segs[0], model, owner),\n\t                        evalExpr(expr.segs[1], model, owner)\n\t                    );\n\t                }\n\t                return;\n\t\n\t            case ExprType.TERTIARY:\n\t                var cond = evalExpr(expr.segs[0], model, owner);\n\t                return evalExpr(\n\t                    cond ? expr.segs[1] : expr.segs[2],\n\t                    model,\n\t                    owner\n\t                );\n\t\n\t            case ExprType.STRING:\n\t            case ExprType.NUMBER:\n\t                return expr.value;\n\t\n\t            case ExprType.ACCESSOR:\n\t                return model.get(expr);\n\t\n\t            case ExprType.INTERP:\n\t                var value = evalExpr(expr.expr, model, owner);\n\t\n\t                owner && each(expr.filters, function (filter) {\n\t                    var filterName = filter.name;\n\t                    /* eslint-disable no-use-before-define */\n\t                    var filterFn = owner.filters[filterName] || DEFAULT_FILTERS[filterName];\n\t                    /* eslint-enable no-use-before-define */\n\t\n\t                    if (typeof filterFn === 'function') {\n\t                        var args = [value];\n\t                        each(filter.args, function (arg) {\n\t                            args.push(evalExpr(arg, model, owner));\n\t                        });\n\t\n\t                        value = filterFn.apply(owner, args);\n\t                    }\n\t                });\n\t\n\t                if (value == null) {\n\t                    value = '';\n\t                }\n\t\n\t                return value;\n\t\n\t            case ExprType.TEXT:\n\t                var buf = new StringBuffer();\n\t                each(expr.segs, function (seg) {\n\t                    var segValue = evalExpr(seg, model, owner);\n\t\n\t                    // escape html\n\t                    if (escapeInterpHtml && seg.type === ExprType.INTERP && !seg.filters[0]) {\n\t                        segValue = escapeHTML(segValue);\n\t                    }\n\t\n\t                    buf.push(segValue);\n\t                });\n\t                return buf.toString();\n\t        }\n\t    }\n\t\n\t    // #region node\n\t\n\t\n\t\n\t    /* eslint-disable fecs-valid-var-jsdoc */\n\t    /**\n\t     * 节点生命周期信息\n\t     *\n\t     * @inner\n\t     * @type {Object}\n\t     */\n\t    var LifeCycles = {\n\t        compiled: {\n\t            value: 1\n\t        },\n\t\n\t        inited: {\n\t            value: 2\n\t        },\n\t\n\t        created: {\n\t            value: 3\n\t        },\n\t\n\t        attached: {\n\t            value: 4,\n\t            mutex: 'detached'\n\t        },\n\t\n\t        detached: {\n\t            value: 5,\n\t            mutex: 'attached'\n\t        },\n\t\n\t        disposed: {\n\t            value: 6,\n\t            mutex: '*'\n\t        }\n\t    };\n\t    /* eslint-enable fecs-valid-var-jsdoc */\n\t\n\t    /**\n\t     * 生命周期类\n\t     *\n\t     * @inner\n\t     * @class\n\t     */\n\t    function LifeCycle() {\n\t        this.raw = {};\n\t    }\n\t\n\t    /**\n\t     * 设置生命周期\n\t     *\n\t     * @param {string} name 生命周期名称\n\t     */\n\t    LifeCycle.prototype.set = function (name) {\n\t        var lifeCycle = LifeCycles[name];\n\t        if (!lifeCycle) {\n\t            return;\n\t        }\n\t\n\t        if (lifeCycle.mutex === '*') {\n\t            this.raw = {};\n\t        }\n\t        else if (lifeCycle.mutex) {\n\t            this.raw[LifeCycles[lifeCycle.mutex].value] = 0;\n\t        }\n\t\n\t        this.raw[lifeCycle.value] = 1;\n\t    };\n\t\n\t    /**\n\t     * 是否位于生命周期\n\t     *\n\t     * @param {string} name 生命周期名称\n\t     * @return {boolean}\n\t     */\n\t    LifeCycle.prototype.is = function (name) {\n\t        var lifeCycle = LifeCycles[name];\n\t        if (lifeCycle) {\n\t            return !!this.raw[lifeCycle.value];\n\t        }\n\t\n\t        return false;\n\t    };\n\t\n\t    /**\n\t     * 节点基类\n\t     *\n\t     * @inner\n\t     * @class\n\t     * @param {Object} options 初始化参数\n\t     * @param {ANode} options.aNode 抽象信息节点对象\n\t     * @param {Component=} options.owner 所属的组件对象\n\t     */\n\t    function Node(options) {\n\t        options = options || {};\n\t\n\t        this.lifeCycle = new LifeCycle();\n\t        this.init(options);\n\t    }\n\t\n\t    /**\n\t     * 使节点到达相应的生命周期，并调用钩子\n\t     *\n\t     * @protected\n\t     * @param {string} name 生命周期名称\n\t     */\n\t    Node.prototype._callHook = function (name) {\n\t        if (this.lifeCycle.is(name)) {\n\t            return;\n\t        }\n\t\n\t        this.lifeCycle.set(name);\n\t\n\t        if (typeof this['_' + name] === 'function') {\n\t            this['_' + name].call(this);\n\t        }\n\t\n\t        if (typeof this[name] === 'function') {\n\t            this[name].call(this);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 初始化\n\t     *\n\t     * @param {Object} options 初始化参数\n\t     */\n\t    Node.prototype.init = function (options) {\n\t        this._init(options);\n\t        this._callHook('inited');\n\t    };\n\t\n\t    /**\n\t     * 初始化行为\n\t     *\n\t     * @param {Object} options 初始化参数\n\t     */\n\t    Node.prototype._init = function (options) {\n\t        this.owner = options.owner;\n\t        this.parent = options.parent;\n\t        this.parentComponent = this.parent instanceof Component\n\t            ? this.parent\n\t            : this.parent && this.parent.parentComponent;\n\t\n\t        this.scope = options.scope;\n\t        this.aNode = this.aNode || options.aNode;\n\t        this.el = options.el;\n\t\n\t        this.id = (this.el && this.el.id)\n\t            || (this.aNode && this.aNode.id)\n\t            || guid();\n\t    };\n\t\n\t    /**\n\t     * 创建完成后的行为\n\t     */\n\t    Node.prototype._created = function () {\n\t        if (!this.el) {\n\t            this.el = document.getElementById(this.id);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 通知自己和childs完成attached状态\n\t     *\n\t     * @protected\n\t     */\n\t    Node.prototype._noticeAttached = function () {\n\t        each(this.childs, function (child) {\n\t            child._noticeAttached();\n\t        });\n\t\n\t        this._callHook('created');\n\t        this._callHook('attached');\n\t    };\n\t\n\t    /**\n\t     * 销毁释放元素\n\t     */\n\t    Node.prototype.dispose = function () {\n\t        this._dispose();\n\t        this._callHook('disposed');\n\t    };\n\t\n\t    /**\n\t     * 销毁释放元素行为\n\t     */\n\t    Node.prototype._dispose = function () {\n\t        this.el = null;\n\t        this.owner = null;\n\t        this.scope = null;\n\t        this.aNode = null;\n\t        this.parent = null;\n\t        this.parentComponent = null;\n\t    };\n\t\n\t    /**\n\t     * 计算表达式的结果\n\t     *\n\t     * @param {Object} expr 表达式对象\n\t     * @param {boolean} escapeInterpHtml 是否要对插值结果进行html转义\n\t     * @return {*}\n\t     */\n\t    Node.prototype.evalExpr = function (expr, escapeInterpHtml) {\n\t        return evalExpr(expr, this.scope, this.owner, escapeInterpHtml);\n\t    };\n\t\n\t    /**\n\t     * 创建桩的html\n\t     *\n\t     * @inner\n\t     * @param {Node} node 节点对象\n\t     * @return {string}\n\t     */\n\t    function genStumpHTML(node) {\n\t        return '<script type=\"text/san\" id=\"' + node.id + '\"></script>';\n\t    }\n\t\n\t    /**\n\t     * 文本节点类\n\t     *\n\t     * @inner\n\t     * @class\n\t     * @param {Object} options 初始化参数\n\t     * @param {ANode} options.aNode 抽象信息节点对象\n\t     * @param {Component} options.owner 所属的组件对象\n\t     */\n\t    function TextNode(options) {\n\t        Node.call(this, options);\n\t    }\n\t\n\t    inherits(TextNode, Node);\n\t\n\t    /**\n\t     * 初始化行为\n\t     *\n\t     * @param {Object} options 初始化参数\n\t     */\n\t    TextNode.prototype._init = function (options) {\n\t        Node.prototype._init.call(this, options);\n\t\n\t        // from el\n\t        if (this.el) {\n\t            this.aNode.isText = true;\n\t            this.aNode.textExpr = parseText(this.el.innerHTML);\n\t            this.parent._pushChildANode(this.aNode);\n\t        }\n\t\n\t        var segs = this.aNode.textExpr.segs;\n\t        this._static = segs.length === 1 && segs[0].type === ExprType.STRING;\n\t    };\n\t\n\t    /**\n\t     * 初始化完成后的行为\n\t     */\n\t    TextNode.prototype._inited = function () {\n\t        if (this.el) {\n\t            this._callHook('created');\n\t\n\t            if (this.el.parentNode) {\n\t                this._callHook('attached');\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 生成文本节点的HTML\n\t     *\n\t     * @return {string}\n\t     */\n\t    TextNode.prototype.genHTML = function () {\n\t        var defaultText = isFEFFBeforeStump ? '\\uFEFF' : '';\n\t        return (this.evalExpr(this.aNode.textExpr, 1) || defaultText)\n\t            + (this._static ? '' : genStumpHTML(this));\n\t    };\n\t\n\t    /**\n\t     * 刷新文本节点的内容\n\t     */\n\t    TextNode.prototype.update = function () {\n\t        var node = this.el.previousSibling;\n\t\n\t        if (node && node.nodeType === 3) {\n\t            var textProp = typeof node.textContent === 'string'\n\t                ? 'textContent'\n\t                : 'data';\n\t            node[textProp] = this.evalExpr(this.aNode.textExpr);\n\t        }\n\t        else {\n\t            this.el.insertAdjacentHTML(\n\t                'beforebegin',\n\t                this.evalExpr(this.aNode.textExpr, 1)\n\t            );\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 视图更新函数\n\t     *\n\t     * @param {Array} changes 数据变化信息\n\t     */\n\t    TextNode.prototype.updateView = function (changes) {\n\t        each(changes, function (change) {\n\t            if (changeExprCompare(change.expr, this.aNode.textExpr, this.scope)) {\n\t                this.update();\n\t                return false;\n\t            }\n\t        }, this);\n\t    };\n\t\n\t\n\t    // #region Element\n\t\n\t    /**\n\t     * 元素存储对象\n\t     *\n\t     * @inner\n\t     * @type {Object}\n\t     */\n\t    var elementContainer = {};\n\t\n\t    /**\n\t     * 元素类\n\t     *\n\t     * @inner\n\t     * @class\n\t     * @param {Object} options 初始化参数\n\t     * @param {ANode} options.aNode 抽象信息节点对象\n\t     * @param {Component} options.owner 所属的组件对象\n\t     */\n\t    function Element(options) {\n\t        this.childs = [];\n\t        this.listeners = {};\n\t\n\t        Node.call(this, options);\n\t    }\n\t\n\t    inherits(Element, Node);\n\t\n\t    /**\n\t     * 初始化行为\n\t     *\n\t     * @param {Object} options 初始化参数\n\t     */\n\t    Element.prototype._init = function (options) {\n\t        Node.prototype._init.call(this, options);\n\t\n\t        if (this.el) {\n\t            this._initFromEl(options);\n\t        }\n\t\n\t        elementContainer[this.id] = this;\n\t\n\t        this.tagName = this.tagName || this.aNode.tagName || 'div';\n\t        // ie8- 不支持innerHTML输出自定义标签\n\t        if (ie && ie < 9 && /^[a-z0-9]+-[a-z0-9]+$/i.test(this.tagName)) {\n\t            this.tagName = 'div';\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 从已有的el进行初始化\n\t     */\n\t    Element.prototype._initFromEl = function () {\n\t        this.aNode = parseANodeFromEl(this.el);\n\t        this.parent._pushChildANode(this.aNode);\n\t        this.tagName = this.aNode.tagName;\n\t    };\n\t\n\t    /**\n\t     * 初始化完成后的行为\n\t     */\n\t    Element.prototype._inited = function () {\n\t        // ie 下，如果 option 没有 value 属性，select.value = xx 操作不会选中 option\n\t        // 所以没有设置 value 时，默认把 option 的内容作为 value\n\t        if (this.tagName === 'option'\n\t            && !this.aNode.props.get('value')\n\t            && this.aNode.childs[0]\n\t        ) {\n\t            this.aNode.props.push({\n\t                name: 'value',\n\t                expr: this.aNode.childs[0].textExpr\n\t            });\n\t        }\n\t\n\t        this.props = this.binds = this.aNode.props;\n\t        this._initPropHandlers();\n\t\n\t        if (this.el) {\n\t            this.tagName = this.el.tagName.toLowerCase();\n\t\n\t            compileChildsFromEl(this);\n\t            this._callHook('created');\n\t\n\t            if (this.el.parentNode) {\n\t                this._callHook('attached');\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 创建元素DOM行为\n\t     */\n\t    Element.prototype._create = function () {\n\t        if (!this.el) {\n\t            this.el = createEl(this.tagName);\n\t            this.el.id = this.id;\n\t\n\t            this.props.each(function (prop) {\n\t                var value = this instanceof Component\n\t                    ? evalExpr(prop.expr, this.data, this)\n\t                    : this.evalExpr(prop.expr, 1);\n\t\n\t                var match = /^\\s+([a-z0-9_-]+)=(['\"])([^\\2]*)\\2$/.exec(\n\t                    getPropHandler(this, prop.name)\n\t                        .input\n\t                        .attr(this, prop.name, value)\n\t                );\n\t\n\t                if (match) {\n\t                    this.el.setAttribute(match[1], match[3]);\n\t                }\n\t            }, this);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 创建元素DOM\n\t     */\n\t    Element.prototype.create = function () {\n\t        if (!this.lifeCycle.is('created')) {\n\t            this._create();\n\t            this._callHook('created');\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 完成创建元素DOM后的行为\n\t     */\n\t    Element.prototype._created = function () {\n\t        Node.prototype._created.call(this);\n\t        this._initSelfChanger();\n\t        this.bindEvents();\n\t    };\n\t\n\t    /**\n\t     * 处理自身变化时双绑的逻辑\n\t     *\n\t     * @private\n\t     */\n\t    Element.prototype._initSelfChanger = function () {\n\t        this.binds && this.binds.each(function (bindInfo) {\n\t            if (!bindInfo.x) {\n\t                return;\n\t            }\n\t\n\t            var outputer = bind(bindOutputer, this, bindInfo);\n\t            switch (bindInfo.name) {\n\t                case 'value':\n\t                    switch (this.tagName) {\n\t                        case 'input':\n\t                        case 'textarea':\n\t                            if (root.CompositionEvent) {\n\t                                this.on('compositionstart', function () {\n\t                                    this.composing = 1;\n\t                                });\n\t                                this.on('compositionend', function () {\n\t                                    this.composing = 0;\n\t\n\t                                    var event = document.createEvent('HTMLEvents');\n\t                                    event.initEvent('input', true, true);\n\t                                    this.dispatchEvent(event);\n\t                                });\n\t                            }\n\t\n\t                            this.on(\n\t                                ('oninput' in this.el) ? 'input' : 'propertychange',\n\t                                function (e) {\n\t                                    if (!this.composing) {\n\t                                        outputer(e);\n\t                                    }\n\t                                }\n\t                            );\n\t\n\t                            break;\n\t\n\t                        case 'select':\n\t                            this.on('change', outputer);\n\t                            break;\n\t                    }\n\t                    break;\n\t\n\t                case 'checked':\n\t                    switch (this.tagName) {\n\t                        case 'input':\n\t                            switch (this.el.type) {\n\t                                case 'checkbox':\n\t                                case 'radio':\n\t                                    this.on('click', outputer);\n\t                            }\n\t                    }\n\t                    break;\n\t            }\n\t\n\t        }, this);\n\t    };\n\t\n\t\n\t    /**\n\t     * HTML 属性和 DOM 操作属性的对照表\n\t     *\n\t     * @inner\n\t     * @const\n\t     * @type {Object}\n\t     */\n\t    var HTML_ATTR_PROP_MAP = {\n\t        'readonly': 'readOnly',\n\t        'cellpadding': 'cellPadding',\n\t        'cellspacing': 'cellSpacing',\n\t        'colspan': 'colSpan',\n\t        'rowspan': 'rowSpan',\n\t        'valign': 'vAlign',\n\t        'usemap': 'useMap',\n\t        'frameborder': 'frameBorder',\n\t        'for': 'htmlFor',\n\t        'class': 'className'\n\t    };\n\t\n\t    /**\n\t     * 默认的元素的属性设置的变换方法\n\t     *\n\t     * @inner\n\t     * @type {Object}\n\t     */\n\t    var defaultElementPropHandler = {\n\t        input: {\n\t            attr: function (element, name, value) {\n\t                if (value != null) {\n\t                    return ' ' + name + '=\"' + value + '\"';\n\t                }\n\t            },\n\t\n\t            prop: function (element, name, value) {\n\t                name = HTML_ATTR_PROP_MAP[name] || name;\n\t                if (svgTags[element.tagName]) {\n\t                    element.el.setAttribute(name, value);\n\t                }\n\t                else {\n\t                    element.el[name] = value;\n\t                }\n\t            }\n\t        },\n\t\n\t        output: function (element, bindInfo) {\n\t            element.scope.set(bindInfo.expr, element.el[bindInfo.name], {\n\t                target: {\n\t                    id: element.id,\n\t                    prop: bindInfo.name\n\t                }\n\t            });\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 生成 bool 类型属性绑定操作的变换方法\n\t     *\n\t     * @inner\n\t     * @param {string} attrName 属性名\n\t     * @param {Array} tagNames 匹配的元素名\n\t     * @return {Object}\n\t     */\n\t    function genBoolPropHandler(attrName, tagNames) {\n\t        attrName = attrName.toLowerCase();\n\t\n\t        return {\n\t            input: {\n\t                attr: function (element, name, value) {\n\t                    // 因为元素的attr值必须经过html escape，否则可能有漏洞\n\t                    // 所以这里直接对假值字符串形式进行处理\n\t                    // NaN之类非主流的就先不考虑了\n\t                    if (value && value !== 'false' && value !== '0') {\n\t                        return ' ' + attrName + '=\"' + attrName + '\"';\n\t                    }\n\t                },\n\t\n\t                prop: function (element, name, value) {\n\t                    var propName = HTML_ATTR_PROP_MAP[attrName] || attrName;\n\t                    element.el[propName] = !!(value && value !== 'false' && value !== '0');\n\t                }\n\t            },\n\t\n\t            choose: function (element) {\n\t                if (contains(tagNames, element.tagName)) {\n\t                    return attrName;\n\t                }\n\t            }\n\t        };\n\t    }\n\t\n\t    /**\n\t     * 元素的属性设置的变换方法集合\n\t     *\n\t     * @inner\n\t     * @type {Array}\n\t     */\n\t    var elementPropHandlers = [\n\t        // 表单元素(input / button / textarea / select) 的 disabled\n\t        genBoolPropHandler('disabled', ['input', 'textarea', 'button', 'select']),\n\t\n\t        // 表单元素(input / textarea) 的 readonly\n\t        genBoolPropHandler('readonly', ['input', 'textarea']),\n\t\n\t        // 表单元素(input) 的 mutiple\n\t        genBoolPropHandler('mutiple', ['input']),\n\t\n\t        // input[type=checkbox] 的 checked bind handler\n\t        {\n\t            input: {\n\t                attr: function (element, name, value) {\n\t                    var bindValue = element.props.get('value');\n\t                    if (bindValue) {\n\t                        if (contains(value, element.evalExpr(bindValue.expr))) {\n\t                            return ' checked=\"checked\"';\n\t                        }\n\t                    }\n\t                },\n\t\n\t                prop: function (element, name, value) {\n\t                    var bindValue = element.props.get('value');\n\t                    if (bindValue) {\n\t                        if (contains(value, element.evalExpr(bindValue.expr))) {\n\t                            element.el.checked = true;\n\t                            return;\n\t                        }\n\t                    }\n\t\n\t                    element.el.checked = false;\n\t                }\n\t            },\n\t\n\t            output: function (element, bindInfo) {\n\t                var el = element.el;\n\t                element.scope[el.checked ? 'push' : 'remove'](bindInfo.expr, el.value);\n\t            },\n\t\n\t            choose: function (element) {\n\t                if (element.aNode) {\n\t                    var bindType = element.props.get('type');\n\t                    return element.tagName === 'input'\n\t                        && bindType && bindType.raw === 'checkbox'\n\t                        && 'checked';\n\t                }\n\t            }\n\t        },\n\t\n\t        // input[type=radio] 的 checked bind handler\n\t        {\n\t            input: {\n\t                attr: function (element, name, value) {\n\t                    var bindValue = element.props.get('value');\n\t                    if (bindValue) {\n\t                        if (value === element.evalExpr(bindValue.expr)) {\n\t                            return ' checked=\"checked\"';\n\t                        }\n\t                    }\n\t                },\n\t\n\t                prop: function (element, name, value) {\n\t                    var bindValue = element.props.get('value');\n\t                    if (bindValue) {\n\t                        if (value === element.evalExpr(bindValue.expr)) {\n\t                            element.el.checked = true;\n\t                            return;\n\t                        }\n\t                    }\n\t\n\t                    element.el.checked = false;\n\t                }\n\t            },\n\t\n\t            output: function (element, bindInfo) {\n\t                var el = element.el;\n\t                element.scope.set(bindInfo.expr, el.checked ? el.value : '', {\n\t                    target: {\n\t                        id: element.id,\n\t                        prop: bindInfo.name\n\t                    }\n\t                });\n\t            },\n\t\n\t            choose: function (element) {\n\t                if (element.aNode) {\n\t                    var bindType = element.props.get('type');\n\t                    return element.tagName === 'input'\n\t                        && bindType && bindType.raw === 'radio'\n\t                        && 'checked';\n\t                }\n\t            }\n\t        },\n\t\n\t        // option value bind handler，附加 selected\n\t        {\n\t            input: {\n\t                attr: function (element, name, value) {\n\t                    var attrStr = defaultElementPropHandler.input.attr(element, name, value);\n\t                    var parent = element.parent;\n\t                    var parentValueProp;\n\t\n\t                    if (parent.tagName === 'select'\n\t                        && (parentValueProp = parent.props.get('value'))\n\t                        && parent.evalExpr(parentValueProp.expr) === value\n\t                    ) {\n\t                        attrStr += ' selected';\n\t                    }\n\t\n\t                    return attrStr;\n\t                },\n\t\n\t                prop: defaultElementPropHandler.input.prop\n\t            },\n\t\n\t            choose: function (element) {\n\t                return 'option' === element.tagName && 'value';\n\t            }\n\t        },\n\t\n\t        // textarea 的 value bind handler\n\t        {\n\t            input: {\n\t                attr: function () {},\n\t\n\t                prop: function (element, name, value) {\n\t                    element.el[name] = value;\n\t                }\n\t            },\n\t\n\t            output: defaultElementPropHandler.output,\n\t\n\t            choose: function (element) {\n\t                return 'textarea' === element.tagName && 'value';\n\t            }\n\t        },\n\t\n\t        // style 的 bind handler\n\t        {\n\t            input: {\n\t                attr: function (element, name, value) {\n\t                    if (value) {\n\t                        return ' style=\"' + value + '\"';\n\t                    }\n\t                },\n\t\n\t                prop: function (element, name, value) {\n\t                    element.el.style.cssText = value;\n\t                }\n\t            },\n\t\n\t            choose: function () {\n\t                return 'style';\n\t            }\n\t        }\n\t    ];\n\t\n\t    /**\n\t     * 初始化元素属性操作的处理器\n\t     * 元素属性操作和具体名称可能不同，比如style操作的是style.cssText等等\n\t     * 所以需要一些 handler 做输入输出的属性名与值变换。这里就是初始化这些 handler\n\t     */\n\t    Element.prototype._initPropHandlers = function () {\n\t        this.propHandlers = {};\n\t        each(\n\t            elementPropHandlers,\n\t            function (propHandler) {\n\t                var name = propHandler.choose(this);\n\t                if (name) {\n\t                    this.propHandlers[name] = propHandler;\n\t                }\n\t            },\n\t            this\n\t        );\n\t    };\n\t\n\t    function getPropHandler(element, name) {\n\t        return element.propHandlers[name] || defaultElementPropHandler;\n\t    }\n\t\n\t    function bindOutputer(bindInfo) {\n\t        getPropHandler(this, bindInfo.name).output(this, bindInfo);\n\t    }\n\t\n\t    /**\n\t     * 将元素attach到页面\n\t     *\n\t     * @param {HTMLElement} parentEl 要添加到的父元素\n\t     * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n\t     */\n\t    Element.prototype.attach = function (parentEl, beforeEl) {\n\t        if (!this.lifeCycle.is('attached')) {\n\t            this._attach(parentEl, beforeEl);\n\t            this._noticeAttached();\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 将元素attach到页面的行为\n\t     *\n\t     * @param {HTMLElement} parentEl 要添加到的父元素\n\t     * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n\t     */\n\t    Element.prototype._attach = function (parentEl, beforeEl) {\n\t        this.create();\n\t\n\t        this.el.innerHTML = elementGenChildsHTML(this);\n\t\n\t        if (parentEl) {\n\t            if (beforeEl) {\n\t                parentEl.insertBefore(this.el, beforeEl);\n\t            }\n\t            else {\n\t                parentEl.appendChild(this.el);\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 普适事件监听函数\n\t     *\n\t     * @inner\n\t     * @param {Object} eventBind 绑定信息对象\n\t     * @param {Event} e 事件对象\n\t     */\n\t    function elementEventListener(eventBind, e) {\n\t        var args = [];\n\t        var expr = eventBind.expr;\n\t\n\t        each(expr.args, function (argExpr) {\n\t            args.push(argExpr.type === ExprType.ACCESSOR\n\t                    && argExpr.paths.length === 1\n\t                    && argExpr.paths[0].value === '$event'\n\t                ? (this instanceof Component ? e : e || window.event)\n\t                : this.evalExpr(argExpr)\n\t            );\n\t        }, this);\n\t\n\t        var owner = this.owner;\n\t        if (this instanceof Component && eventBind.isOwn) {\n\t            owner = this;\n\t        }\n\t\n\t        var method = owner[expr.name];\n\t        if (typeof method === 'function') {\n\t            method.apply(owner, args);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * 绑定事件\n\t     */\n\t    Element.prototype.bindEvents = function () {\n\t        each(this.aNode.events, function (eventBind) {\n\t            this.on(eventBind.name, bind(elementEventListener, this, eventBind));\n\t        }, this);\n\t    };\n\t\n\t    /**\n\t     * 解除绑定事件\n\t     */\n\t    Element.prototype.unbindEvents = function () {\n\t        var listeners = this.listeners;\n\t\n\t        for (var key in listeners) {\n\t            if (listeners.hasOwnProperty(key)) {\n\t                this.un(key);\n\t            }\n\t        }\n\t\n\t        this.listeners = null;\n\t    };\n\t\n\t    /**\n\t     * 派发事件\n\t     *\n\t     * @param {string} name 事件名\n\t     * @param {Object} event 事件对象\n\t     */\n\t    Element.prototype.fire = function (name, event) {\n\t        each(this.listeners[name], function (listener) {\n\t            listener.call(this, event);\n\t        }, this);\n\t    };\n\t\n\t    /**\n\t     * 添加事件监听器\n\t     *\n\t     * @param {string} name 事件名\n\t     * @param {Function} listener 监听器\n\t     */\n\t    Element.prototype.on = function (name, listener) {\n\t        if (typeof listener === 'function') {\n\t            if (!this.listeners[name]) {\n\t                this.listeners[name] = [];\n\t            }\n\t            this.listeners[name].push(listener);\n\t\n\t            on(this.el, name, listener);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 移除事件监听器\n\t     *\n\t     * @param {string} name 事件名\n\t     * @param {Function=} listener 监听器\n\t     */\n\t    Element.prototype.un = function (name, listener) {\n\t        var nameListeners = this.listeners[name];\n\t        var len = nameListeners && nameListeners.length;\n\t\n\t        while (len--) {\n\t            var fn = nameListeners[len];\n\t            if (!listener || listener === fn) {\n\t                nameListeners.splice(len, 1);\n\t                un(this.el, name, fn);\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 生成元素的html\n\t     *\n\t     * @return {string}\n\t     */\n\t    Element.prototype.genHTML = function () {\n\t        var buf = new StringBuffer();\n\t\n\t        elementGenStartHTML(this, buf);\n\t        buf.push(elementGenChildsHTML(this));\n\t        elementGenCloseHTML(this, buf);\n\t\n\t        return buf.toString();\n\t    };\n\t\n\t    /**\n\t     * 生成元素标签起始的html\n\t     *\n\t     * @inner\n\t     * @param {Element} element 元素\n\t     * @param {StringBuffer} stringBuffer html串存储对象\n\t     */\n\t    function elementGenStartHTML(element, stringBuffer) {\n\t        if (!element.tagName) {\n\t            return;\n\t        }\n\t\n\t        stringBuffer.push('<');\n\t        stringBuffer.push(element.tagName);\n\t        stringBuffer.push(' id=\"');\n\t        stringBuffer.push(element.id);\n\t        stringBuffer.push('\"');\n\t\n\t        element.props.each(function (prop) {\n\t            var value = this instanceof Component\n\t                ? evalExpr(prop.expr, this.data, this)\n\t                : this.evalExpr(prop.expr, 1);\n\t\n\t            stringBuffer.push(\n\t                getPropHandler(this, prop.name)\n\t                    .input\n\t                    .attr(this, prop.name, value)\n\t                || ''\n\t            );\n\t        }, element);\n\t\n\t        stringBuffer.push('>');\n\t    }\n\t\n\t    /**\n\t     * 生成元素标签结束的html\n\t     *\n\t     * @inner\n\t     * @param {Element} element 元素\n\t     * @param {StringBuffer} stringBuffer html串存储对象\n\t     */\n\t    function elementGenCloseHTML(element, stringBuffer) {\n\t        var tagName = element.tagName;\n\t\n\t        if (!tagIsAutoClose(tagName)) {\n\t            stringBuffer.push('</');\n\t            stringBuffer.push(tagName);\n\t            stringBuffer.push('>');\n\t        }\n\t    }\n\t\n\t    /**\n\t     * 生成元素的子元素html\n\t     *\n\t     * @inner\n\t     * @param {Element} element 元素\n\t     * @return {string}\n\t     */\n\t    function elementGenChildsHTML(element) {\n\t        if (element.tagName === 'textarea') {\n\t            var valueProp = element.props.get('value');\n\t            return valueProp ? escapeHTML(element.evalExpr(valueProp.expr)) : '';\n\t        }\n\t\n\t        var buf = new StringBuffer();\n\t\n\t        each(element.aNode.childs, function (aNodeChild) {\n\t            var child = createNode(aNodeChild, element);\n\t            if (!this._static) {\n\t                element.childs.push(child);\n\t            }\n\t            buf.push(child.genHTML());\n\t        });\n\t\n\t        return buf.toString();\n\t    }\n\t\n\t    /**\n\t     * 设置元素属性\n\t     *\n\t     * @param {string} name 属性名称\n\t     * @param {*} value 属性值\n\t     */\n\t    Element.prototype.setProp = function (name, value) {\n\t        if (this.lifeCycle.is('created')) {\n\t            getPropHandler(this, name).input.prop(this, name, value);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 判断变更是否来源于元素，来源于元素时，视图更新需要阻断\n\t     *\n\t     * @inner\n\t     * @param {Object} change 变更对象\n\t     * @param {Element} element 元素\n\t     * @param {string?} propName 属性名，可选。需要精确判断是否来源于此属性时传入\n\t     * @return {boolean}\n\t     */\n\t    function isDataChangeByElement(change, element, propName) {\n\t        var changeTarget = change.option.target;\n\t        return changeTarget && changeTarget.id === element.id\n\t            && (!propName || changeTarget.prop === propName);\n\t    }\n\t\n\t    /**\n\t     * 视图更新函数\n\t     *\n\t     * @param {Array} changes 数据变化信息\n\t     */\n\t    Element.prototype.updateView = function (changes) {\n\t        this.props.each(function (prop) {\n\t            each(changes, function (change) {\n\t                if (!isDataChangeByElement(change, this, prop.name)\n\t                    && changeExprCompare(change.expr, prop.expr, this.scope)\n\t                ) {\n\t                    this.setProp(prop.name, this.evalExpr(prop.expr));\n\t                    return false;\n\t                }\n\t            }, this);\n\t        }, this);\n\t\n\t        each(this.childs, function (child) {\n\t            child.updateView(changes);\n\t        });\n\t    };\n\t\n\t\n\t    /**\n\t     * 将元素从页面上移除\n\t     */\n\t    Element.prototype.detach = function () {\n\t        if (this.lifeCycle.is('attached')) {\n\t            this._detach();\n\t            this._callHook('detached');\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 将元素从页面上移除的行为\n\t     */\n\t    Element.prototype._detach = function () {\n\t        removeEl(this.el);\n\t    };\n\t\n\t    /**\n\t     * 销毁释放元素的行为\n\t     */\n\t    Element.prototype._dispose = function () {\n\t        this._disposeChilds();\n\t        this.detach();\n\t        this.unbindEvents();\n\t\n\t        this.el = null;\n\t        this.childs = null;\n\t\n\t        this.propHandlers = null;\n\t        this.props = null;\n\t        this.binds = null;\n\t        elementContainer[this.id] = null;\n\t        Node.prototype._dispose.call(this);\n\t    };\n\t\n\t    /**\n\t     * 销毁释放子元素的行为\n\t     */\n\t    Element.prototype._disposeChilds = function () {\n\t        each(this.childs, function (child) {\n\t            child.dispose();\n\t        });\n\t        this.childs.length = 0;\n\t    };\n\t\n\t    /**\n\t     * 添加子节点的 ANode\n\t     * 用于从 el 初始化时，需要将解析的元素抽象成 ANode，并向父级注册\n\t     *\n\t     * @param {ANode} aNode 抽象节点对象\n\t     */\n\t    Element.prototype._pushChildANode = function (aNode) {\n\t        this.aNode.childs.push(aNode);\n\t    };\n\t\n\t    /**\n\t     * slot 元素类\n\t     *\n\t     * @class\n\t     * @param {Object} options 初始化参数\n\t     */\n\t    function SlotElement(options) {\n\t        this.childs = [];\n\t        Node.call(this, options);\n\t    }\n\t\n\t    inherits(SlotElement, Node);\n\t\n\t    /**\n\t     * 初始化行为\n\t     *\n\t     * @param {Object} options 初始化参数\n\t     */\n\t    SlotElement.prototype._init = function (options) {\n\t        var nameBind = options.aNode.props.get('name');\n\t        this.name = nameBind ? nameBind.raw : '____';\n\t\n\t        var literalOwner = options.owner;\n\t        var givenSlots = literalOwner.aNode.givenSlots;\n\t        var givenChilds = givenSlots && givenSlots[this.name];\n\t\n\t\n\t        var aNode = new ANode();\n\t        if (givenChilds) {\n\t            aNode.childs = givenChilds;\n\t            options.owner = literalOwner.owner;\n\t            options.scope = literalOwner.scope;\n\t        }\n\t        else {\n\t            aNode.childs = options.aNode.childs.slice(0);\n\t        }\n\t\n\t        options.aNode = aNode;\n\t        Node.prototype._init.call(this, options);\n\t    };\n\t\n\t    /**\n\t     * 初始化完成后的行为\n\t     */\n\t    SlotElement.prototype._inited = function () {\n\t        this.owner.slotChilds.push(this);\n\t    };\n\t\n\t    /**\n\t     * 生成元素的html\n\t     *\n\t     * @return {string}\n\t     */\n\t    SlotElement.prototype.genHTML = function () {\n\t        return elementGenChildsHTML(this);\n\t    };\n\t\n\t    /**\n\t     * 隔离实际所属组件对其的视图更新调用。更新应由outer组件调用\n\t     */\n\t    SlotElement.prototype.updateView = function () {\n\t    };\n\t\n\t    /**\n\t     * 视图更新函数\n\t     *\n\t     * @param {Array} changes 数据变化信息\n\t     */\n\t    SlotElement.prototype.slotUpdateView = function (changes) {\n\t        each(this.childs, function (child) {\n\t            child.updateView(changes);\n\t        });\n\t    };\n\t\n\t    /**\n\t     * 销毁释放元素行为\n\t     */\n\t    SlotElement.prototype._dispose = function () {\n\t        Element.prototype._disposeChilds.call(this);\n\t        Node.prototype._dispose.call(this);\n\t    };\n\t\n\t\n\t    // #region Component\n\t\n\t    /**\n\t     * 组件类\n\t     *\n\t     * @class\n\t     * @param {Object} options 初始化参数\n\t     */\n\t    function Component(options) {\n\t        this.slotChilds = [];\n\t        this.data = new Model();\n\t        this.dataChanges = [];\n\t\n\t        Element.call(this, options);\n\t    }\n\t\n\t    inherits(Component, Element);\n\t\n\t    /**\n\t     * 初始化\n\t     *\n\t     * @param {Object} options 初始化参数\n\t     */\n\t    Component.prototype.init = function (options) {\n\t        this.filters = this.filters || this.constructor.filters || {};\n\t        this.computed = this.computed || this.constructor.computed || {};\n\t        this.messages = options.messages || this.messages || {};\n\t\n\t        // compile\n\t        this._compile();\n\t\n\t        if (!options.el) {\n\t            var protoANode = this.constructor.prototype.aNode;\n\t\n\t            if (options.aNode) {\n\t                var givenANode = options.aNode;\n\t\n\t                // 组件运行时传入的结构，做slot解析\n\t                var givenSlots = {};\n\t                each(givenANode.childs, function (child) {\n\t                    var slotName = '____';\n\t                    var slotBind = !child.isText && child.props.get('slot');\n\t                    if (slotBind) {\n\t                        slotName = slotBind.raw;\n\t                    }\n\t\n\t                    if (!givenSlots[slotName]) {\n\t                        givenSlots[slotName] = [];\n\t                    }\n\t\n\t                    givenSlots[slotName].push(child);\n\t                }, this);\n\t\n\t                this.aNode = new ANode({\n\t                    tagName: protoANode.tagName || givenANode.tagName,\n\t                    givenSlots: givenSlots,\n\t\n\t                    // 组件的实际结构应为template编译的结构\n\t                    childs: protoANode.childs,\n\t\n\t                    // 合并运行时的一些绑定和事件声明\n\t                    props: protoANode.props,\n\t                    binds: givenANode.props,\n\t                    events: givenANode.events.concat(protoANode.events),\n\t                    directives: givenANode.directives.concat(protoANode.directives)\n\t                });\n\t            }\n\t        }\n\t\n\t        this._callHook('compiled');\n\t\n\t\n\t        Element.prototype._init.call(this, options);\n\t        this.binds = this.aNode.binds || new IndexedList();\n\t        this.binds.each(function (bind) {\n\t            var expr = bind.expr;\n\t\n\t            // 当 text 解析只有一项时，要么就是 string，要么就是 interp\n\t            // interp 有可能是绑定到组件属性的表达式，不希望被 eval text 成 string\n\t            // 所以这里做个处理，只有一项时直接抽出来\n\t            if (expr.type === ExprType.TEXT && expr.segs.length === 1) {\n\t                expr = bind.expr = expr.segs[0];\n\t                if (expr.type === ExprType.INTERP && expr.filters.length === 0) {\n\t                    bind.expr = expr.expr;\n\t                }\n\t            }\n\t        });\n\t        this.props = this.aNode.props;\n\t\n\t        // init data\n\t        var initData = options.data\n\t            || (typeof this.initData === 'function' && this.initData());\n\t        for (var key in initData) {\n\t            if (initData.hasOwnProperty(key)) {\n\t                this.data.set(key, initData[key]);\n\t            }\n\t        }\n\t\n\t        this.scope && this.binds.each(function (bind) {\n\t            this.data.set(bind.name, this.evalExpr(bind.expr));\n\t        }, this);\n\t\n\t        this.computedDeps = {};\n\t        for (var expr in this.computed) {\n\t            if (!this.computedDeps[expr]) {\n\t                this._calcComputed(expr);\n\t            }\n\t        }\n\t\n\t        this._callHook('inited');\n\t    };\n\t\n\t    /**\n\t     * 计算 computed 属性的值\n\t     *\n\t     * @private\n\t     * @param {string} computedExpr computed表达式串\n\t     */\n\t    Component.prototype._calcComputed = function (computedExpr) {\n\t        var computedDeps = this.computedDeps[computedExpr];\n\t        if (!computedDeps) {\n\t            computedDeps = this.computedDeps[computedExpr] = {};\n\t        }\n\t\n\t        this.data.set(computedExpr, this.computed[computedExpr].call({\n\t            data: {\n\t                get: bind(function (expr) {\n\t                    if (expr) {\n\t                        if (!computedDeps[expr]) {\n\t                            computedDeps[expr] = 1;\n\t\n\t                            if (this.computed[expr]) {\n\t                                this._calcComputed(expr);\n\t                            }\n\t\n\t                            this.watch(expr, function () {\n\t                                this._calcComputed(computedExpr);\n\t                            });\n\t                        }\n\t\n\t                        return this.data.get(expr);\n\t                    }\n\t\n\t                    // #begin-ignore\n\t                    throw new Error('[SAN ERROR] call get method in computed need argument');\n\t                    // #end-ignore\n\t                }, this)\n\t            }\n\t        }));\n\t    };\n\t\n\t    /**\n\t     * 初始化完成后的行为\n\t     * 清空Element.prototype._inited的行为\n\t     */\n\t    Component.prototype._inited = function () {\n\t        this._initPropHandlers();\n\t\n\t        // 如果从el编译的，认为已经attach了，触发钩子\n\t        if (this._isInitFromEl) {\n\t            this._callHook('created');\n\t            this._callHook('attached');\n\t        }\n\t    };\n\t\n\t    // #begin-ignore\n\t    /**\n\t     * attach 完成后的行为\n\t     * 通知devtool\n\t     */\n\t    Component.prototype._attached = function () {\n\t        emitDevTool('comp-attached', this);\n\t    };\n\t\n\t    /**\n\t     * detach 完成后的行为\n\t     * 通知devtool\n\t     */\n\t    Component.prototype._detached = function () {\n\t        emitDevTool('comp-detached', this);\n\t    };\n\t\n\t    /**\n\t     * update 完成后的行为\n\t     * 通知devtool\n\t     */\n\t    Component.prototype._updated = function () {\n\t        emitDevTool('comp-updated', this);\n\t    };\n\t    // #end-ignore\n\t\n\t    /**\n\t     * 派发消息\n\t     * 组件可以派发消息，消息将沿着组件树向上传递，直到遇上第一个处理消息的组件\n\t     *\n\t     * @param {string} name 消息名称\n\t     * @param {*?} value 消息值\n\t     */\n\t    Component.prototype.dispatch = function (name, value) {\n\t        var parentComponent = this.parentComponent;\n\t\n\t        while (parentComponent) {\n\t            if (typeof parentComponent.messages[name] === 'function') {\n\t                parentComponent.messages[name].call(\n\t                    parentComponent,\n\t                    {target: this, value: value}\n\t                );\n\t                break;\n\t            }\n\t\n\t            parentComponent = parentComponent.parentComponent;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 获取带有 san-ref 指令的子组件引用\n\t     *\n\t     * @param {string} name 子组件的引用名\n\t     * @return {Component}\n\t     */\n\t    Component.prototype.ref = function (name) {\n\t        var refComponent;\n\t        var owner = this;\n\t\n\t        function childsTraversal(element) {\n\t            each(element.childs, function (child) {\n\t                if (child instanceof Component) {\n\t                    var refDirective = child.aNode.directives.get('ref');\n\t                    if (refDirective\n\t                        && evalExpr(refDirective.value, child.scope || owner.data, owner) === name\n\t                    ) {\n\t                        refComponent = child;\n\t                    }\n\t                }\n\t                else if (child instanceof Element) {\n\t                    childsTraversal(child);\n\t                }\n\t\n\t                return !refComponent;\n\t            });\n\t        }\n\t\n\t\n\t        childsTraversal(this);\n\t        each(this.slotChilds, function (slotChild) {\n\t            childsTraversal(slotChild);\n\t            return !refComponent;\n\t        });\n\t        return refComponent;\n\t    };\n\t\n\t    /**\n\t     * 从存在的 el 中编译抽象节点\n\t     */\n\t    Component.prototype._initFromEl = function () {\n\t        this._isInitFromEl = true;\n\t        this.aNode = parseANodeFromEl(this.el);\n\t        this.aNode.binds = this.aNode.props;\n\t        this.aNode.props = new IndexedList();\n\t\n\t        this.parent && this.parent._pushChildANode(this.aNode);\n\t        compileChildsFromEl(this);\n\t    };\n\t\n\t    /**\n\t     * 遍历和编译已有元素的孩子\n\t     *\n\t     * @inner\n\t     * @param {HTMLElement} element 已有元素\n\t     */\n\t    function compileChildsFromEl(element) {\n\t        var walker = new DOMChildsWalker(element.el);\n\t        var current;\n\t        while ((current = walker.current)) {\n\t            var child = createNodeByEl(current, element, walker);\n\t            if (child) {\n\t                element.childs.push(child);\n\t            }\n\t\n\t            walker.goNext();\n\t        }\n\t    }\n\t\n\t    /**\n\t     * 创建节点的工厂方法\n\t     *\n\t     * @inner\n\t     * @param {ANode} aNode 抽象节点\n\t     * @param {Node} parent 父亲节点\n\t     * @param {Model=} scope 所属数据环境\n\t     * @return {Node}\n\t     */\n\t    function createNode(aNode, parent, scope) {\n\t        var owner = parent instanceof Component ? parent : parent.owner;\n\t        // scope = scope || owner.data;\n\t        scope = scope || (parent instanceof Component ? parent.data : parent.scope);\n\t        var options = {\n\t            aNode: aNode,\n\t            owner: owner,\n\t            scope: scope,\n\t            parent: parent\n\t        };\n\t\n\t        if (aNode.isText) {\n\t            return new TextNode(options);\n\t        }\n\t\n\t        if (aNode.directives.get('if')) {\n\t            return new IfDirective(options);\n\t        }\n\t\n\t        if (aNode.directives.get('else')) {\n\t            return new ElseDirective(options);\n\t        }\n\t\n\t        if (aNode.directives.get('for')) {\n\t            return new ForDirective(options);\n\t        }\n\t\n\t        var ComponentType = owner.components[aNode.tagName];\n\t        if (ComponentType) {\n\t            return new ComponentType(options);\n\t        }\n\t\n\t        if (aNode.tagName === 'slot') {\n\t            return new SlotElement(options);\n\t        }\n\t\n\t        return new Element(options);\n\t    }\n\t\n\t    /**\n\t     * 通过存在的 el 创建节点的工厂方法\n\t     *\n\t     * @inner\n\t     * @param {HTMLElement} el 页面中存在的元素\n\t     * @param {Node} parent 父亲节点\n\t     * @param {DOMChildsWalker} elWalker 遍历元素的功能对象\n\t     * @return {Node}\n\t     */\n\t    function createNodeByEl(el, parent, elWalker) {\n\t        var owner = parent instanceof Component ? parent : parent.owner;\n\t\n\t        // find component class\n\t        var tagName = el.tagName.toLowerCase();\n\t        var ComponentClass = null;\n\t\n\t        if (tagName.indexOf('-') > 0) {\n\t            ComponentClass = owner.components[tagName];\n\t        }\n\t\n\t        var componentName = el.getAttribute('san-component');\n\t        if (componentName) {\n\t            ComponentClass = owner.components[componentName];\n\t        }\n\t\n\t        var option = {\n\t            owner: owner,\n\t            scope: owner.data,\n\t            parent: parent,\n\t            el: el,\n\t            elWalker: elWalker\n\t        };\n\t\n\t        // as Component\n\t        if (ComponentClass) {\n\t            return new ComponentClass(option);\n\t        }\n\t\n\t        // as normal Element\n\t        var childANode = parseANodeFromEl(el);\n\t        var stumpName = el.getAttribute('san-stump');\n\t        option.aNode = childANode;\n\t\n\t        if (childANode.directives.get('if') || stumpName === 'if') {\n\t            return new IfDirective(option);\n\t        }\n\t\n\t        if (childANode.directives.get('else') || stumpName === 'else') {\n\t            return new ElseDirective(option);\n\t        }\n\t\n\t        if (childANode.directives.get('for') || stumpName === 'for') {\n\t            return new ForDirective(option);\n\t        }\n\t\n\t        if (isStump(el)) {\n\t            // as TextNode\n\t            return new TextNode(option);\n\t        }\n\t\n\t        // as Element\n\t        return new Element(option);\n\t    }\n\t\n\t    /**\n\t     * 解析元素自身的 ANode\n\t     *\n\t     * @inner\n\t     * @param {HTMLElement} el 页面元素\n\t     * @return {ANode}\n\t     */\n\t    function parseANodeFromEl(el) {\n\t        var aNode = new ANode();\n\t        aNode.tagName = el.tagName.toLowerCase();\n\t\n\t        each(\n\t            el.attributes,\n\t            function (attr) {\n\t                integrateAttr(aNode, attr.name, attr.value, true);\n\t            }\n\t        );\n\t\n\t        return aNode;\n\t    }\n\t\n\t    /**\n\t     * 判断一个元素是不是桩\n\t     *\n\t     * @inner\n\t     * @param {HTMLElement} element 要判断的元素\n\t     * @return {boolean}\n\t     */\n\t    function isStump(element) {\n\t        return element.tagName === 'SCRIPT' && element.type === 'text/san';\n\t    }\n\t\n\t    /**\n\t     * 元素子节点遍历操作对象\n\t     *\n\t     * @inner\n\t     * @class\n\t     * @param {HTMLElement} el 要遍历的元素\n\t     */\n\t    function DOMChildsWalker(el) {\n\t        this.raw = [];\n\t        this.index = 0;\n\t\n\t        var child = el.firstChild;\n\t        while (child) {\n\t            if (child.nodeType === 1) {\n\t                this.raw.push(child);\n\t            }\n\t\n\t            child = child.nextSibling;\n\t        }\n\t\n\t        this.current = this.raw[this.index];\n\t        this.next = this.raw[this.index + 1];\n\t    }\n\t\n\t    /**\n\t     * 往下走一个元素\n\t     */\n\t    DOMChildsWalker.prototype.goNext = function () {\n\t        this.current = this.raw[++this.index];\n\t        this.next = this.raw[this.index + 1];\n\t    };\n\t\n\t    var componentPropExtra = [\n\t        {name: 'class', expr: parseText(\"{{class ? ' ' + class : ''}}\")},\n\t        {name: 'style', expr: parseText(\"{{style ? ';' + style : ''}}\")}\n\t    ];\n\t\n\t\n\t    /**\n\t     * 模板编译行为\n\t     *\n\t     * @private\n\t     */\n\t    Component.prototype._compile = function () {\n\t        var ComponentClass = this.constructor;\n\t        var proto = ComponentClass.prototype;\n\t\n\t        // pre define components class\n\t        if (!proto._isComponentsReady) {\n\t            proto.components = proto.components || ComponentClass.components || {};\n\t            var components = proto.components;\n\t\n\t            for (var key in components) {\n\t                var componentClass = components[key];\n\t\n\t                if (typeof componentClass === 'object') {\n\t                    components[key] = defineComponent(componentClass);\n\t                }\n\t                else if (componentClass === 'self') {\n\t                    components[key] = ComponentClass;\n\t                }\n\t            }\n\t\n\t            proto._isComponentsReady = 1;\n\t        }\n\t\n\t\n\t        // pre compile template\n\t        if (!proto.aNode) {\n\t            proto.aNode = new ANode();\n\t            var tpl = proto.template || ComponentClass.template;\n\t\n\t            if (tpl) {\n\t                var aNode = parseTemplate(tpl);\n\t                var firstChild = aNode.childs[0];\n\t\n\t                // #begin-ignore\n\t                if (aNode.childs.length !== 1 || firstChild.isText) {\n\t                    throw new Error('[SAN FATAL] template must have a root element.');\n\t                }\n\t                // #end-ignore\n\t\n\t                proto.aNode = firstChild;\n\t                if (firstChild.tagName === 'template') {\n\t                    firstChild.tagName = null;\n\t                }\n\t\n\t                each(firstChild.events, function (item) {\n\t                    item.isOwn = 1;\n\t                });\n\t\n\t                each(componentPropExtra, function (extra) {\n\t                    var prop = firstChild.props.get(extra.name);\n\t                    if (prop) {\n\t                        prop.expr.segs.push(extra.expr.segs[0]);\n\t                    }\n\t                    else {\n\t                        firstChild.props.push({\n\t                            name: extra.name,\n\t                            expr: extra.expr\n\t                        });\n\t                    }\n\t                });\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 初始化自身变化时，监听数据变化的行为\n\t     *\n\t     * @private\n\t     */\n\t    Component.prototype._initSelfChanger = function () {\n\t        if (!this.dataChanger) {\n\t            this.dataChanger = bind(this._dataChanger, this);\n\t            this.data.onChange(this.dataChanger);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 视图更新函数\n\t     */\n\t    Component.prototype.updateView = function (changes) {\n\t        if (this.lifeCycle.is('disposed')) {\n\t            return;\n\t        }\n\t\n\t        each(changes, function (change) {\n\t            var changeExpr = change.expr;\n\t\n\t            this.binds.each(function (bindItem) {\n\t                var relation;\n\t                var setExpr = bindItem.name;\n\t                var updateExpr = bindItem.expr;\n\t\n\t                if (!isDataChangeByElement(change, this, setExpr)\n\t                    && (relation = changeExprCompare(changeExpr, updateExpr, this.scope))\n\t                ) {\n\t                    if (relation > 2) {\n\t                        setExpr = {\n\t                            type: ExprType.ACCESSOR,\n\t                            paths: [{\n\t                                type: ExprType.STRING,\n\t                                value: setExpr\n\t                            }].concat(changeExpr.paths.slice(updateExpr.paths.length))\n\t                        };\n\t                        updateExpr = changeExpr;\n\t                    }\n\t\n\t                    this.data.set(setExpr, this.evalExpr(updateExpr), {\n\t                        target: {\n\t                            id: this.owner.id\n\t                        }\n\t                    });\n\t                }\n\t            }, this);\n\t        }, this);\n\t\n\t\n\t        var dataChanges = this.dataChanges;\n\t        if (dataChanges.length) {\n\t            this.dataChanges = [];\n\t            this.props.each(function (prop) {\n\t                each(dataChanges, function (change) {\n\t                    if (changeExprCompare(change.expr, prop.expr, this.data)) {\n\t                        this.setProp(\n\t                            prop.name,\n\t                            evalExpr(prop.expr, this.data, this)\n\t                        );\n\t\n\t                        return false;\n\t                    }\n\t                }, this);\n\t            }, this);\n\t\n\t\n\t            each(this.childs, function (child) {\n\t                child.updateView(dataChanges);\n\t            });\n\t\n\t            each(this.slotChilds, function (child) {\n\t                child.slotUpdateView(dataChanges);\n\t            });\n\t\n\t            this._callHook('updated');\n\t\n\t            if (this.owner) {\n\t                each(dataChanges, function (change) {\n\t                    this.binds.each(function (bindItem) {\n\t                        var changeExpr = change.expr;\n\t                        if (bindItem.x\n\t                            && !isDataChangeByElement(change, this.owner)\n\t                            && changeExprCompare(changeExpr, parseExpr(bindItem.name), this.data)\n\t                        ) {\n\t                            var updateScopeExpr = bindItem.expr;\n\t                            if (changeExpr.paths.length > 1) {\n\t                                updateScopeExpr = {\n\t                                    type: ExprType.ACCESSOR,\n\t                                    paths: bindItem.expr.paths.concat(changeExpr.paths.slice(1))\n\t                                };\n\t                            }\n\t\n\t                            this.scope.set(\n\t                                updateScopeExpr,\n\t                                evalExpr(changeExpr, this.data, this),\n\t                                {\n\t                                    target: {\n\t                                        id: this.id,\n\t                                        prop: bindItem.name\n\t                                    }\n\t                                }\n\t                            );\n\t                        }\n\t                    }, this);\n\t                }, this);\n\t                this.owner.updateView();\n\t            }\n\t\n\t        }\n\t    };\n\t\n\t\n\t    /**\n\t     * 组件内部监听数据变化的函数\n\t     *\n\t     * @private\n\t     * @param {Object} change 数据变化信息\n\t     */\n\t    Component.prototype._dataChanger = function (change) {\n\t        var len = this.dataChanges.length;\n\t\n\t        if (!len) {\n\t            nextTick(this.updateView, this);\n\t        }\n\t\n\t        while (len--) {\n\t            switch (changeExprCompare(change.expr, this.dataChanges[len].expr)) {\n\t                case 1:\n\t                case 2:\n\t                    if (change.type === ModelChangeType.SET) {\n\t                        this.dataChanges.splice(len, 1);\n\t                    }\n\t            }\n\t        }\n\t\n\t        this.dataChanges.push(change);\n\t    };\n\t\n\t\n\t    /**\n\t     * 监听组件的数据变化\n\t     *\n\t     * @param {string} dataName 变化的数据项\n\t     * @param {Function} listener 监听函数\n\t     */\n\t    Component.prototype.watch = function (dataName, listener) {\n\t        var dataExpr = parseExpr(dataName);\n\t\n\t        this.data.onChange(bind(function (change) {\n\t            if (changeExprCompare(change.expr, dataExpr, this.data)) {\n\t                listener.call(this, evalExpr(dataExpr, this.data, this), change);\n\t            }\n\t        }, this));\n\t    };\n\t\n\t    /**\n\t     * 组件销毁的行为\n\t     */\n\t    Component.prototype._dispose = function () {\n\t        // 这里不用挨个调用 dispose 了，因为 childs 释放链会调用的\n\t        this.slotChilds = null;\n\t\n\t        this.data.unChange();\n\t        this.dataChanger = null;\n\t        this.dataChanges.length = 0;\n\t\n\t        this.data = null;\n\t        Element.prototype._dispose.call(this);\n\t    };\n\t\n\t\n\t    /**\n\t     * if 指令处理类\n\t     *\n\t     * @class\n\t     * @param {Object} options 初始化参数\n\t     */\n\t    function IfDirective(options) {\n\t        Element.call(this, options);\n\t    }\n\t\n\t    inherits(IfDirective, Element);\n\t\n\t    /**\n\t     * 创建 if 指令对应条件为 true 时对应的元素\n\t     *\n\t     * @param {IfDirective} ifElement if指令元素\n\t     * @return {Element}\n\t     */\n\t    function createIfDirectiveChild(ifElement) {\n\t        var aNode = ifElement.aNode;\n\t        var childANode = new ANode({\n\t            childs: aNode.childs,\n\t            props: aNode.props,\n\t            events: aNode.events,\n\t            tagName: aNode.tagName,\n\t            directives: (new IndexedList()).concat(aNode.directives)\n\t        });\n\t\n\t        childANode.directives.remove('if');\n\t        childANode.directives.remove('else');\n\t\n\t        return createNode(childANode, ifElement);\n\t    }\n\t\n\t    /**\n\t     * 从已有的el进行初始化的\n\t     *\n\t     * @param {Object} options 初始化参数\n\t     */\n\t    IfDirective.prototype._initFromEl = function (options) {\n\t        if (options.el) {\n\t            if (options.el.getAttribute('san-stump') === 'if') {\n\t                var aNode = parseTemplate(options.el.innerHTML);\n\t                aNode = aNode.childs[0];\n\t                this.aNode = aNode;\n\t            }\n\t            else {\n\t                this.el = null;\n\t                this._create();\n\t                options.el.parentNode.insertBefore(this.el, options.el.nextSibling);\n\t\n\t                options.el.removeAttribute('san-if');\n\t                var child = createNodeByEl(options.el, this, options.elWalker);\n\t\n\t                this.childs.push(child);\n\t                this.aNode.childs = child.aNode.childs.slice(0);\n\t            }\n\t\n\t            if (options.ifDirective) {\n\t                this.aNode.directives.push(options.ifDirective);\n\t            }\n\t\n\t            this.parent._pushChildANode(this.aNode);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 创建元素DOM行为\n\t     */\n\t    IfDirective.prototype._create = function () {\n\t        if (!this.el) {\n\t            this.el = document.createElement('script');\n\t            this.el.type = 'text/san';\n\t            this.el.id = this.id;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 初始化完成后的行为\n\t     */\n\t    IfDirective.prototype._inited = function () {\n\t        if (this.el) {\n\t            this._callHook('created');\n\t            if (this.el.parentNode) {\n\t                this._callHook('attached');\n\t            }\n\t        }\n\t    };\n\t\n\t    IfDirective.prototype._created = Node.prototype._created;\n\t\n\t    /**\n\t     * 生成html\n\t     *\n\t     * @return {string}\n\t     */\n\t    IfDirective.prototype.genHTML = function () {\n\t        var buf = new StringBuffer();\n\t\n\t        if (this.evalExpr(this.aNode.directives.get('if').value)) {\n\t            var child = createIfDirectiveChild(this);\n\t            this.childs[0] = child;\n\t            buf.push(child.genHTML());\n\t        }\n\t\n\t        if (isFEFFBeforeStump && !buf.length) {\n\t            buf.push('\\uFEFF');\n\t        }\n\t        buf.push(genStumpHTML(this));\n\t\n\t        return buf.toString();\n\t    };\n\t\n\t    /**\n\t     * 视图更新函数\n\t     *\n\t     * @param {Array} changes 数据变化信息\n\t     */\n\t    IfDirective.prototype.updateView = function (changes) {\n\t        var ifExpr = this.aNode.directives.get('if').value;\n\t        var child = this.childs[0];\n\t\n\t        if (this.evalExpr(ifExpr)) {\n\t            if (child) {\n\t                child.updateView(changes);\n\t            }\n\t            else {\n\t                child = createIfDirectiveChild(this);\n\t                child.attach(this.el.parentNode, this.el);\n\t                this.childs[0] = child;\n\t            }\n\t        }\n\t        else {\n\t            this._disposeChilds();\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 清空添加子节点的 ANode 的行为\n\t     * 从 el 初始化时，不接受子节点的 ANode信息\n\t     */\n\t    IfDirective.prototype._pushChildANode = function () {};\n\t\n\t    /**\n\t     * else 指令处理类\n\t     * 不做具体事情，直接归约成 if\n\t     *\n\t     * @class\n\t     * @param {Object} options 初始化参数\n\t     */\n\t    function ElseDirective(options) {\n\t        var parentChilds = options.parent.childs;\n\t\n\t        var len = parentChilds.length;\n\t        while (len--) {\n\t            var child = parentChilds[len];\n\t\n\t            if (child instanceof IfDirective) {\n\t                var directiveValue = {\n\t                    name: 'if',\n\t                    value: {\n\t                        type: ExprType.UNARY,\n\t                        expr: child.aNode.directives.get('if').value\n\t                    }\n\t                };\n\t                options.aNode.directives.push(directiveValue);\n\t\n\t                if (options.el) {\n\t                    if (isStump(options.el)) {\n\t                        options.el.setAttribute('san-stump', 'if');\n\t                    }\n\t                    else {\n\t                        options.el.removeAttribute('san-else');\n\t                    }\n\t                }\n\t\n\t                options.ifDirective = directiveValue;\n\t                return new IfDirective(options);\n\t            }\n\t\n\t            // #begin-ignore\n\t            if (!(child instanceof TextNode)) {\n\t                throw new Error('[SAN FATEL] else not match if.');\n\t            }\n\t            // #end-ignore\n\t        }\n\t    }\n\t\n\t    /**\n\t     * for 指令处理类\n\t     *\n\t     * @class\n\t     * @param {Object} options 初始化参数\n\t     */\n\t    function ForDirective(options) {\n\t        Element.call(this, options);\n\t    }\n\t\n\t    inherits(ForDirective, Element);\n\t\n\t    /**\n\t     * 清空添加子节点的 ANode 的行为\n\t     * 从 el 初始化时，不接受子节点的 ANode信息\n\t     */\n\t    ForDirective.prototype._pushChildANode = function () {};\n\t\n\t    ForDirective.prototype._created = Node.prototype._created;\n\t\n\t    /**\n\t     * 生成html\n\t     *\n\t     * @param {boolean} onlyChilds 是否只生成列表本身html，不生成stump部分\n\t     * @return {string}\n\t     */\n\t    ForDirective.prototype.genHTML = function (onlyChilds) {\n\t        var buf = new StringBuffer();\n\t\n\t        each(\n\t            this.evalExpr(this.aNode.directives.get('for').list),\n\t            function (item, i) {\n\t                var child = createForDirectiveChild(this, item, i);\n\t                this.childs.push(child);\n\t                buf.push(child.genHTML());\n\t            },\n\t            this\n\t        );\n\t\n\t        if (!onlyChilds) {\n\t            if (isFEFFBeforeStump && !buf.length) {\n\t                buf.push('\\uFEFF');\n\t            }\n\t            buf.push(genStumpHTML(this));\n\t        }\n\t\n\t        return buf.toString();\n\t    };\n\t\n\t    /**\n\t     * 从已有的el进行初始化\n\t     *\n\t     * @param {Object} options 初始化参数\n\t     */\n\t    ForDirective.prototype._initFromEl = function (options) {\n\t        if (options.el) {\n\t            while (1) {\n\t                var current = options.elWalker.current;\n\t                if (current.getAttribute('san-stump') === 'for') {\n\t                    var aNode = parseTemplate(current.innerHTML);\n\t                    aNode = aNode.childs[0];\n\t                    this.aNode = aNode;\n\t                    break;\n\t                }\n\t                else {\n\t                    current.removeAttribute('san-for');\n\t                    var child = createNodeByEl(current, this, options.elWalker);\n\t                    this.childs.push(child);\n\t                }\n\t\n\t                var next = options.elWalker.next;\n\t                if (next && (next.getAttribute('san-for') || next.getAttribute('san-stump') === 'for')) {\n\t                    options.elWalker.goNext();\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t\n\t            this.parent._pushChildANode(this.aNode);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 初始化完成后的行为\n\t     */\n\t    ForDirective.prototype._inited = function () {\n\t        if (this.el) {\n\t            this._callHook('created');\n\t            if (this.el.parentNode) {\n\t                this._callHook('attached');\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 将元素attach到页面的行为\n\t     *\n\t     * @param {HTMLElement} parentEl 要添加到的父元素\n\t     * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n\t     */\n\t    ForDirective.prototype._attach = function (parentEl, beforeEl) {\n\t        this.create();\n\t        if (parentEl) {\n\t            if (beforeEl) {\n\t                parentEl.insertBefore(this.el, beforeEl);\n\t            }\n\t            else {\n\t                parentEl.appendChild(this.el);\n\t            }\n\t        }\n\t\n\t        this.el.insertAdjacentHTML('beforebegin', this.genHTML(1));\n\t    };\n\t\n\t    /**\n\t     * 将元素从页面上移除的行为\n\t     */\n\t    ForDirective.prototype._detach = function () {\n\t        this._disposeChilds();\n\t        removeEl(this.el);\n\t    };\n\t\n\t    /**\n\t     * 创建元素DOM行为\n\t     */\n\t    ForDirective.prototype._create = function () {\n\t        if (!this.el) {\n\t            this.el = document.createElement('script');\n\t            this.el.type = 'text/san';\n\t            this.el.id = this.id;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * 创建 for 指令元素的子元素\n\t     *\n\t     * @inner\n\t     * @param {ForDirective} forElement for 指令元素对象\n\t     * @param {*} item 子元素对应数据\n\t     * @param {number} index 子元素对应序号\n\t     * @return {Element}\n\t     */\n\t    function createForDirectiveChild(forElement, item, index) {\n\t        var forDirective = forElement.aNode.directives.get('for');\n\t        var itemScope = new Model(forElement.scope);\n\t        itemScope.set(forDirective.item, item);\n\t        itemScope.set(forDirective.index, index);\n\t\n\t        function exprResolve(expr) {\n\t            // 这里是各种操作方法用的，只能是ExprType.ACCESSOR\n\t            if (expr.paths[0].value === forDirective.item) {\n\t                return {\n\t                    type: ExprType.ACCESSOR,\n\t                    paths: forDirective.list.paths.concat(\n\t                        {\n\t                            type: ExprType.NUMBER,\n\t                            value: itemScope.get(forDirective.index)\n\t                        },\n\t                        expr.paths.slice(1)\n\t                    )\n\t                };\n\t            }\n\t\n\t            var resolvedExpr = {\n\t                type: ExprType.ACCESSOR,\n\t                paths: []\n\t            };\n\t            each(expr.paths, function (item) {\n\t                resolvedExpr.paths.push(\n\t                    item.type === ExprType.ACCESSOR\n\t                        && item.paths[0].value === forDirective.index\n\t                    ? {\n\t                        type: ExprType.NUMBER,\n\t                        value: itemScope.get(forDirective.index)\n\t                    }\n\t                    : item\n\t                );\n\t            });\n\t            return resolvedExpr;\n\t        }\n\t\n\t        each(\n\t            ['set', 'remove', 'unshift', 'shift', 'push', 'pop', 'splice'],\n\t            function (method) {\n\t                var rawFn = forElement.scope[method];\n\t                itemScope[method] = function (expr) {\n\t                    expr = exprResolve(parseExpr(expr));\n\t\n\t                    rawFn.apply(\n\t                        forElement.scope,\n\t                        [expr].concat(Array.prototype.slice.call(arguments, 1))\n\t                    );\n\t                };\n\t            }\n\t        );\n\t\n\t        var aNode = forElement.aNode;\n\t        var directiveANode = new ANode({\n\t            childs: aNode.childs,\n\t            props: aNode.props,\n\t            events: aNode.events,\n\t            tagName: aNode.tagName,\n\t            directives: (new IndexedList()).concat(aNode.directives)\n\t        });\n\t\n\t        directiveANode.directives.remove('for');\n\t\n\t        return createNode(directiveANode, forElement, itemScope);\n\t    }\n\t\n\t\n\t    /**\n\t     * 视图更新函数\n\t     */\n\t    ForDirective.prototype.updateView = function (changes) {\n\t        var childsChanges = [];\n\t        each(this.childs, function () {\n\t            childsChanges.push([]);\n\t        });\n\t\n\t        var repaintAll = 0;\n\t        var forDirective = this.aNode.directives.get('for');\n\t        each(changes, function (change) {\n\t            var relation = changeExprCompare(change.expr, forDirective.list, this.scope);\n\t\n\t            if (!relation) {\n\t                // 无关时，直接传递给子元素更新，列表本身不需要动\n\t                each(childsChanges, function (childChanges) {\n\t                    childChanges.push(change);\n\t                });\n\t            }\n\t            else if (relation > 2) {\n\t                // 变更表达式是list绑定表达式的子项\n\t                // 只需要对相应的子项进行更新\n\t                var changePaths = change.expr.paths;\n\t                var forLen = forDirective.list.paths.length;\n\t\n\t                change = extend({}, change);\n\t                change.expr = {\n\t                    type: ExprType.ACCESSOR,\n\t                    paths: [\n\t                        {value: forDirective.item, type: ExprType.STRING}\n\t                    ].concat(changePaths.slice(forLen + 1))\n\t                };\n\t\n\t                var changeIndex = +this.evalExpr(changePaths[forLen]);\n\t                Model.prototype.set.call(\n\t                    this.childs[changeIndex].scope,\n\t                    change.expr,\n\t                    change.value,\n\t                    {silence: true}\n\t                );\n\t                childsChanges[changeIndex].push(change);\n\t            }\n\t            else if (change.type === ModelChangeType.SET) {\n\t                // 变更表达式是list绑定表达式本身或母项的重新设值\n\t                // 此时需要更新整个列表\n\t                this._disposeChilds();\n\t                repaintAll = 1;\n\t            }\n\t            else if (relation === 2 && change.type === ModelChangeType.SPLICE) {\n\t                // 变更表达式是list绑定表达式本身数组的SPLICE操作\n\t                // 此时需要删除部分项，创建部分项\n\t                var changeStart = change.index;\n\t                var deleteCount = change.deleteCount;\n\t\n\t                var lengthChange = {\n\t                    type: ModelChangeType.SET,\n\t                    option: change.option,\n\t                    expr: {\n\t                        type: ExprType.ACCESSOR,\n\t                        paths: change.expr.paths.concat({\n\t                            type: ExprType.STRING,\n\t                            value: 'length'\n\t                        })\n\t                    }\n\t                };\n\t                var indexChange = {\n\t                    type: ModelChangeType.SET,\n\t                    option: change.option,\n\t                    expr: {\n\t                        type: ExprType.ACCESSOR,\n\t                        paths: [{\n\t                            type: ExprType.STRING,\n\t                            value: forDirective.index\n\t                        }]\n\t                    }\n\t                };\n\t\n\t                var insertionsLen = change.insertions.length;\n\t                each(this.childs, function (child, index) {\n\t                    childsChanges[index].push(lengthChange);\n\t\n\t                    // update child index\n\t                    if (index >= changeStart + deleteCount) {\n\t                        childsChanges[index].push(indexChange);\n\t                        Model.prototype.set.call(\n\t                            child.scope,\n\t                            indexChange.expr,\n\t                            index - deleteCount + insertionsLen,\n\t                            {silence: true}\n\t                        );\n\t                    }\n\t                }, this);\n\t\n\t                var spliceArgs = [changeStart, deleteCount];\n\t                var childsChangesSpliceArgs = [changeStart, deleteCount];\n\t                each(change.insertions, function (insertion, index) {\n\t                    spliceArgs.push(createForDirectiveChild(this, insertion, changeStart + index));\n\t                    childsChangesSpliceArgs.push([]);\n\t                }, this);\n\t\n\t                each(this.childs.splice.apply(this.childs, spliceArgs), function (child) {\n\t                    child.dispose();\n\t                });\n\t                childsChanges.splice.apply(childsChanges, childsChangesSpliceArgs);\n\t            }\n\t\n\t            return !repaintAll;\n\t        }, this);\n\t\n\t\n\t        if (repaintAll) {\n\t            // 整个列表都需要重新刷新\n\t            this.el.insertAdjacentHTML('beforebegin', this.genHTML(1));\n\t            this._noticeAttached();\n\t        }\n\t        else {\n\t            // 对相应的项进行更新\n\t            // 如果不存在则直接创建，如果存在则调用更新函数\n\t            var len = this.childs.length;\n\t            var attachStump = this;\n\t\n\t            while (len--) {\n\t                var child = this.childs[len];\n\t                if (child.lifeCycle.is('attached')) {\n\t                    child.updateView(childsChanges[len]);\n\t                }\n\t                else {\n\t                    child.attach(attachStump.el.parentNode, attachStump.el);\n\t                }\n\t\n\t                attachStump = child;\n\t            }\n\t        }\n\t    };\n\t\n\t\n\t    /* eslint-disable */\n\t    if (isFEFFBeforeStump) {\n\t        IfDirective.prototype.attached =\n\t        TextNode.prototype.attached =\n\t        ForDirective.prototype.attached = function () {\n\t            // 移除节点桩元素前面的空白 FEFF 字符\n\t            if (this.el) {\n\t                var headingBlank = this.el.previousSibling;\n\t\n\t                if (headingBlank && headingBlank.nodeType === 3) {\n\t                    var textProp = typeof headingBlank.textContent === 'string'\n\t                        ? 'textContent'\n\t                        : 'data';\n\t                    var text = headingBlank[textProp];\n\t\n\t                    if (!text || text === '\\uFEFF') {\n\t                        removeEl(headingBlank);\n\t                    }\n\t                }\n\t            }\n\t        };\n\t    }\n\t    /* eslint-enable */\n\t\n\t    /**\n\t     * 创建组件类\n\t     *\n\t     * @param {Object} proto 组件类的方法表\n\t     * @return {Function}\n\t     */\n\t    function defineComponent(proto) {\n\t        function ComponentClass(option) {\n\t            Component.call(this, option);\n\t        }\n\t\n\t        ComponentClass.prototype = proto;\n\t        inherits(ComponentClass, Component);\n\t\n\t        return ComponentClass;\n\t    }\n\t\n\t    // #region exports\n\t    var san = {\n\t        /**\n\t         * san版本号\n\t         *\n\t         * @type {string}\n\t         */\n\t        version: '3.0.3-rc.20',\n\t\n\t        /**\n\t         * 组件基类\n\t         *\n\t         * @type {Function}\n\t         */\n\t        Component: Component,\n\t\n\t        /**\n\t         * 创建组件类\n\t         *\n\t         * @param {Object} proto 组件类的方法表\n\t         * @return {Function}\n\t         */\n\t        defineComponent: defineComponent,\n\t\n\t        /**\n\t         * 解析 template\n\t         *\n\t         * @inner\n\t         * @param {string} source template 源码\n\t         * @return {ANode}\n\t         */\n\t        parseTemplate: parseTemplate,\n\t\n\t        /**\n\t         * 解析表达式\n\t         *\n\t         * @param {string} source 源码\n\t         * @return {Object}\n\t         */\n\t        parseExpr: parseExpr,\n\t\n\t        /**\n\t         * 表达式类型枚举\n\t         *\n\t         * @const\n\t         * @type {Object}\n\t         */\n\t        ExprType: ExprType,\n\t\n\t        /**\n\t         * 生命周期类\n\t         *\n\t         * @class\n\t         */\n\t        LifeCycle: LifeCycle,\n\t\n\t        /**\n\t         * 在下一个更新周期运行函数\n\t         *\n\t         * @param {Function} fn 要运行的函数\n\t         */\n\t        nextTick: nextTick,\n\t\n\t        /**\n\t         * 构建类之间的继承关系\n\t         *\n\t         * @param {Function} subClass 子类函数\n\t         * @param {Function} superClass 父类函数\n\t         */\n\t        inherits: inherits,\n\t\n\t        /**\n\t         * 是否开启调试。开启调试时 devtool 会工作\n\t         *\n\t         * @type {boolean}\n\t         */\n\t        debug: true\n\t    };\n\t\n\t\n\t    // export\n\t    if (true) {\n\t        // For CommonJS\n\t        exports = module.exports = san;\n\t    }\n\t    else if (typeof define === 'function' && define.amd) {\n\t        // For AMD\n\t        define('san', [], san);\n\t    }\n\t    else {\n\t        // For <script src=\"...\"\n\t        root.san = san;\n\t    }\n\t\n\t    // #begin-ignore\n\t    /**\n\t     * 给 devtool 发通知消息\n\t     *\n\t     * @inner\n\t     * @param {string} name 消息名称\n\t     * @param {*} arg 消息参数\n\t     */\n\t    function emitDevTool(name, arg) {\n\t        if (san.debug && root.__san_devtool__) {\n\t            root.__san_devtool__.emit(name, arg);\n\t        }\n\t    }\n\t\n\t    emitDevTool('san', san);\n\t    // #end-ignore\n\t})(this);\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(63).setImmediate))\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function webpackUniversalModuleDefinition(root, factory) {\n\t\tif(true)\n\t\t\tmodule.exports = factory();\n\t\telse if(typeof define === 'function' && define.amd)\n\t\t\tdefine(\"san-router\", [], factory);\n\t\telse if(typeof exports === 'object')\n\t\t\texports[\"san-router\"] = factory();\n\t\telse\n\t\t\troot[\"san-router\"] = factory();\n\t})(this, function() {\n\treturn /******/ (function(modules) { // webpackBootstrap\n\t/******/ \t// The module cache\n\t/******/ \tvar installedModules = {};\n\t\n\t/******/ \t// The require function\n\t/******/ \tfunction __webpack_require__(moduleId) {\n\t\n\t/******/ \t\t// Check if module is in cache\n\t/******/ \t\tif(installedModules[moduleId])\n\t/******/ \t\t\treturn installedModules[moduleId].exports;\n\t\n\t/******/ \t\t// Create a new module (and put it into the cache)\n\t/******/ \t\tvar module = installedModules[moduleId] = {\n\t/******/ \t\t\ti: moduleId,\n\t/******/ \t\t\tl: false,\n\t/******/ \t\t\texports: {}\n\t/******/ \t\t};\n\t\n\t/******/ \t\t// Execute the module function\n\t/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\n\t/******/ \t\t// Flag the module as loaded\n\t/******/ \t\tmodule.l = true;\n\t\n\t/******/ \t\t// Return the exports of the module\n\t/******/ \t\treturn module.exports;\n\t/******/ \t}\n\t\n\t\n\t/******/ \t// expose the modules object (__webpack_modules__)\n\t/******/ \t__webpack_require__.m = modules;\n\t\n\t/******/ \t// expose the module cache\n\t/******/ \t__webpack_require__.c = installedModules;\n\t\n\t/******/ \t// identity function for calling harmony imports with the correct context\n\t/******/ \t__webpack_require__.i = function(value) { return value; };\n\t\n\t/******/ \t// define getter function for harmony exports\n\t/******/ \t__webpack_require__.d = function(exports, name, getter) {\n\t/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n\t/******/ \t\t\tObject.defineProperty(exports, name, {\n\t/******/ \t\t\t\tconfigurable: false,\n\t/******/ \t\t\t\tenumerable: true,\n\t/******/ \t\t\t\tget: getter\n\t/******/ \t\t\t});\n\t/******/ \t\t}\n\t/******/ \t};\n\t\n\t/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n\t/******/ \t__webpack_require__.n = function(module) {\n\t/******/ \t\tvar getter = module && module.__esModule ?\n\t/******/ \t\t\tfunction getDefault() { return module['default']; } :\n\t/******/ \t\t\tfunction getModuleExports() { return module; };\n\t/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n\t/******/ \t\treturn getter;\n\t/******/ \t};\n\t\n\t/******/ \t// Object.prototype.hasOwnProperty.call\n\t/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\t\n\t/******/ \t// __webpack_public_path__\n\t/******/ \t__webpack_require__.p = \"/dist\";\n\t\n\t/******/ \t// Load entry module and return exports\n\t/******/ \treturn __webpack_require__(__webpack_require__.s = 6);\n\t/******/ })\n\t/************************************************************************/\n\t/******/ ([\n\t/* 0 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\"use strict\";\n\t\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = resolveURL;\n\t\n\tvar _parseUrl = __webpack_require__(1);\n\t\n\tvar _parseUrl2 = _interopRequireDefault(_parseUrl);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\n\t * 将 URL 中相对路径部分展开\n\t *\n\t * @param {string} source 要展开的url\n\t * @param {string} base 当前所属环境的url\n\t * @return {string}\n\t */\n\tfunction resolveURL(source, base) {\n\t    var sourceLoc = (0, _parseUrl2.default)(source);\n\t    var baseLoc = (0, _parseUrl2.default)(base);\n\t\n\t    var sourcePath = sourceLoc.path;\n\t    if (sourcePath.indexOf('/') === 0) {\n\t        return source;\n\t    }\n\t\n\t    var sourceSegs = sourcePath.split('/');\n\t    var baseSegs = baseLoc.path.split('/');\n\t    baseSegs.pop();\n\t\n\t    for (var i = 0; i < sourceSegs.length; i++) {\n\t        var seg = sourceSegs[i];\n\t        switch (seg) {\n\t            case '..':\n\t                baseSegs.pop();\n\t                break;\n\t            case '.':\n\t                break;\n\t            default:\n\t                baseSegs.push(seg);\n\t        }\n\t    }\n\t\n\t    if (baseSegs[0] !== '') {\n\t        baseSegs.unshift('');\n\t    }\n\t\n\t    return baseSegs.join('/') + (sourceLoc.queryString ? '?' + sourceLoc.queryString : '');\n\t} /**\n\t   * san-router\n\t   * Copyright 2017 Baidu Inc. All rights reserved.\n\t   *\n\t   * @file 将 URL 中相对路径部分展开\n\t   * @author errorrik\n\t   */\n\t\n\t/***/ },\n\t/* 1 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\"use strict\";\n\t\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = parseURL;\n\t/**\n\t * san-router\n\t * Copyright 2017 Baidu Inc. All rights reserved.\n\t *\n\t * @file 解析URL\n\t * @author errorrik\n\t */\n\t\n\t/**\n\t * 解析URL，返回包含path、query、queryString的对象\n\t *\n\t * @param {string} url 要解析的url\n\t * @return {Object}\n\t */\n\tfunction parseURL(url) {\n\t    var result = {};\n\t\n\t    // parse hash\n\t    result.hash = '';\n\t    var hashStart = url.indexOf('#');\n\t    if (hashStart >= 0) {\n\t        result.hash = url.slice(hashStart + 1);\n\t        url = url.slice(0, hashStart);\n\t    }\n\t\n\t    // parse query\n\t    result.queryString = '';\n\t    var query = {};\n\t    result.query = query;\n\t    var queryStart = url.indexOf('?');\n\t    if (queryStart >= 0) {\n\t        result.queryString = url.slice(queryStart + 1);\n\t        url = url.slice(0, queryStart);\n\t\n\t        result.queryString.split('&').forEach(function (querySeg) {\n\t            // 考虑到有可能因为未处理转义问题，\n\t            // 导致value中存在**=**字符，因此不使用`split`函数\n\t            var equalIndex = querySeg.indexOf('=');\n\t            var value = '';\n\t            if (equalIndex > 0) {\n\t                value = querySeg.slice(equalIndex + 1);\n\t                querySeg = querySeg.slice(0, equalIndex);\n\t            }\n\t\n\t            var key = decodeURIComponent(querySeg);\n\t            value = decodeURIComponent(value);\n\t\n\t            // 已经存在这个参数，且新的值不为空时，把原来的值变成数组\n\t            if (query.hasOwnProperty(key)) {\n\t                query[key] = [].concat(query[key], value);\n\t            } else {\n\t                query[key] = value;\n\t            }\n\t        });\n\t    }\n\t\n\t    // left path\n\t    result.path = url;\n\t\n\t    return result;\n\t}\n\t\n\t/***/ },\n\t/* 2 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\"use strict\";\n\t\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\n\tnterprise RIA)\n\topyright 2013 Baidu Inc. All rights reserved.\n\tn\tignore\n\tfile 提供事件相关操作的基类\n\tauthor otakustay\n\tn\t\n\tvar _Event = __webpack_require__(7);\n\t\n\tvar _Event2 = _interopRequireDefault(_Event);\n\t\n\tvar _EventQueue = __webpack_require__(8);\n\t\n\tvar _EventQueue2 = _interopRequireDefault(_EventQueue);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar EVENT_POOL = Symbol('eventPool');\n\t\n\t/**\n\t * 提供事件相关操作的基类\n\t *\n\t * 可以让某个类继承此类，获得事件的相关功能：\n\t *\n\t * ```js\n\t * function MyClass() {\n\t *     // 此处可以不调用EventTarget构造函数\n\t * }\n\t *\n\t * inherits(MyClass, EventTarget);\n\t *\n\t * let instance = new MyClass();\n\t * instance.on('foo', executeFoo);\n\t * instance.fire('foo', { bar: 'Hello World' });\n\t * ```\n\t *\n\t * 当然也可以使用`Object.create`方法：\n\t *\n\t * ```js\n\t * let instance = Object.create(EventTarget.prototype);\n\t * instance.on('foo', executeFoo);\n\t * instance.fire('foo', { bar: 'Hello World' });\n\t * ```\n\t *\n\t * 还可以使用`enable`方法让一个静态的对象拥有事件功能：\n\t *\n\t * ```js\n\t * let instance = {}\n\t * EventTarget.enable(instance);\n\t *\n\t * // 同样可以使用事件\n\t * instance.on('foo', executeFoo);\n\t * instance.fire('foo', { bar: 'Hello World' });\n\t * ```\n\t */\n\t\n\tvar EventTarget = function () {\n\t    function EventTarget() {\n\t        _classCallCheck(this, EventTarget);\n\t    }\n\t\n\t    _createClass(EventTarget, [{\n\t        key: 'on',\n\t\n\t\n\t        /**\n\t         * 注册一个事件处理函数\n\t         *\n\t         * @param {string} type 事件的类型\n\t         * @param {Function | boolean} fn 事件的处理函数，\n\t         * 特殊地，如果此参数为`false`，将被视为特殊的事件处理函数，\n\t         * 其效果等于`preventDefault()`及`stopPropagation()`\n\t         * @param {*} [thisObject] 事件执行时`this`对象\n\t         * @param {Object} [options] 事件相关配置项\n\t         * @param {boolean} [options.once=false] 控制事件仅执行一次\n\t         */\n\t        value: function on(type, fn, thisObject, options) {\n\t            if (!this[EVENT_POOL]) {\n\t                this[EVENT_POOL] = Object.create(null);\n\t            }\n\t\n\t            if (!this[EVENT_POOL][type]) {\n\t                this[EVENT_POOL][type] = new _EventQueue2.default();\n\t            }\n\t\n\t            var queue = this[EVENT_POOL][type];\n\t\n\t            options = Object.assign({}, options);\n\t            if (thisObject) {\n\t                options.thisObject = thisObject;\n\t            }\n\t\n\t            queue.add(fn, options);\n\t        }\n\t\n\t        /**\n\t         * 注册一个仅执行一次的处理函数\n\t         *\n\t         * @param {string} type 事件的类型\n\t         * @param {Function} fn 事件的处理函数\n\t         * @param {*} [thisObject] 事件执行时`this`对象\n\t         * @param {Object} [options] 事件相关配置项\n\t         */\n\t\n\t    }, {\n\t        key: 'once',\n\t        value: function once(type, fn, thisObject, options) {\n\t            options = Object.assign({}, options);\n\t            options.once = true;\n\t            this.on(type, fn, thisObject, options);\n\t        }\n\t\n\t        /**\n\t         * 注销一个事件处理函数\n\t         *\n\t         * @param {string} type 事件的类型，如果值为`*`仅会注销通过`*`为类型注册的事件，并不会将所有事件注销\n\t         * @param {Function} [handler] 事件的处理函数，无此参数则注销`type`指定类型的所有事件处理函数\n\t         * @param {*} [thisObject] 处理函数对应的`this`对象，无此参数则注销`type`与`handler`符合要求，且无`this`对象的处理函数\n\t         */\n\t\n\t    }, {\n\t        key: 'un',\n\t        value: function un(type, handler, thisObject) {\n\t            if (!this[EVENT_POOL] || !this[EVENT_POOL][type]) {\n\t                return;\n\t            }\n\t\n\t            var queue = this[EVENT_POOL][type];\n\t            queue.remove(handler, thisObject);\n\t        }\n\t\n\t        /**\n\t         * 触发指定类型的事件\n\t         *\n\t         * 3个重载：\n\t         *\n\t         * - `.fire(type)`\n\t         * - `.fire(args)`\n\t         * - `.fire(type, args)`\n\t         *\n\t         * @param {string | Object} type 事件类型\n\t         * @param {*} [args] 事件对象\n\t         * @return {Event} 事件传递过程中的`Event`对象\n\t         */\n\t\n\t    }, {\n\t        key: 'fire',\n\t        value: function fire(type, args) {\n\t            // 只提供一个对象作为参数，则是`.fire(args)`的形式，需要加上type\n\t            /* eslint-disable prefer-rest-params */\n\t            if (arguments.length === 1 && (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object') {\n\t                args = type;\n\t                type = args.type;\n\t            }\n\t            /* eslint-enable prefer-rest-params */\n\t\n\t            if (!type) {\n\t                throw new Error('No event type specified');\n\t            }\n\t\n\t            if (type === '*') {\n\t                throw new Error('Cannot fire global event');\n\t            }\n\t\n\t            var event = args instanceof _Event2.default ? args : new _Event2.default(type, args);\n\t            event.target = this;\n\t\n\t            // 在此处可能没有[EVENT_POOL]`，这是指对象整个就没初始化，\n\t            // 即一个事件也没注册过就`fire`了，这是正常现象\n\t            if (this[EVENT_POOL] && this[EVENT_POOL][type]) {\n\t                var queue = this[EVENT_POOL][type];\n\t                queue.execute(event, this);\n\t            }\n\t\n\t            // 同时也有可能在上面执行标准事件队列的时候，把这个`EventTarget`给销毁了，\n\t            // 此时[EVENT_POOL]`就没了，这种情况是正常的不能抛异常，要特别处理\n\t            if (this[EVENT_POOL] && this[EVENT_POOL]['*']) {\n\t                var globalQueue = this[EVENT_POOL]['*'];\n\t                globalQueue.execute(event, this);\n\t            }\n\t\n\t            return event;\n\t        }\n\t\n\t        /**\n\t         * 销毁所有事件\n\t         */\n\t\n\t    }, {\n\t        key: 'destroyEvents',\n\t        value: function destroyEvents() {\n\t            if (!this[EVENT_POOL]) {\n\t                return;\n\t            }\n\t\n\t            for (var name in this[EVENT_POOL]) {\n\t                if (this[EVENT_POOL][name]) {\n\t                    this[EVENT_POOL][name].dispose();\n\t                }\n\t            }\n\t\n\t            this[EVENT_POOL] = null;\n\t        }\n\t    }]);\n\t\n\t    return EventTarget;\n\t}();\n\t\n\texports.default = EventTarget;\n\t\n\t/***/ },\n\t/* 3 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\"use strict\";\n\t\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _main = __webpack_require__(6);\n\t\n\tvar _resolveUrl = __webpack_require__(0);\n\t\n\tvar _resolveUrl2 = _interopRequireDefault(_resolveUrl);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\n\t * san-router\n\t * Copyright 2017 Baidu Inc. All rights reserved.\n\t *\n\t * @file 路由链接的 San 组件\n\t * @author errorrik\n\t */\n\t\n\texports.default = {\n\t    template: '<a href=\"{{href}}\" onclick=\"return false;\" on-click=\"clicker($event)\" target=\"{{target}}\" class=\"{{class}}\" style=\"{{style}}\"><slot></slot></a>',\n\t\n\t    clicker: function clicker(e) {\n\t        var href = this.data.get('href');\n\t\n\t        if (typeof href === 'string') {\n\t            _main.router.locator.redirect(href.replace(/^#/, ''));\n\t        }\n\t\n\t        e.preventDefault();\n\t    },\n\t\n\t\n\t    computed: {\n\t        href: function href() {\n\t            var url = this.data.get('to');\n\t            if (typeof url !== 'string') {\n\t                return;\n\t            }\n\t\n\t            var href = (0, _resolveUrl2.default)(url, _main.router.locator.current);\n\t            if (_main.router.mode === 'hash') {\n\t                href = '#' + href;\n\t            }\n\t\n\t            return href;\n\t        }\n\t    }\n\t};\n\t\n\t/***/ },\n\t/* 4 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\"use strict\";\n\t\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _EventTarget2 = __webpack_require__(2);\n\t\n\tvar _EventTarget3 = _interopRequireDefault(_EventTarget2);\n\t\n\tvar _resolveUrl = __webpack_require__(0);\n\t\n\tvar _resolveUrl2 = _interopRequireDefault(_resolveUrl);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * san-router\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2017 Baidu Inc. All rights reserved.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file hash 模式地址监听器\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author errorrik\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * 获取当前URL\n\t *\n\t * @return {string}\n\t */\n\tfunction getLocation() {\n\t    // Firefox下`location.hash`存在自动解码的情况，\n\t    // 比如hash的值是**abc%3def**，\n\t    // 在Firefox下获取会成为**abc=def**\n\t    // 为了避免这一情况，需要从`location.href`中分解\n\t    var index = location.href.indexOf('#');\n\t    var url = index < 0 ? '/' : location.href.slice(index + 1);\n\t\n\t    return url;\n\t}\n\t\n\tvar HASHCHANGE_HANDLER_KEY = Symbol('hashchange_handler_key');\n\t\n\t/**\n\t * hash 模式地址监听器\n\t *\n\t * @class\n\t */\n\t\n\tvar Locator = function (_EventTarget) {\n\t    _inherits(Locator, _EventTarget);\n\t\n\t    /**\n\t     * 构造函数\n\t     */\n\t    function Locator() {\n\t        _classCallCheck(this, Locator);\n\t\n\t        var _this = _possibleConstructorReturn(this, (Locator.__proto__ || Object.getPrototypeOf(Locator)).call(this));\n\t\n\t        _this.current = getLocation();\n\t        _this.referrer = '';\n\t\n\t        _this[HASHCHANGE_HANDLER_KEY] = function () {\n\t            _this.redirect(getLocation());\n\t        };\n\t        return _this;\n\t    }\n\t\n\t    /**\n\t     * 开始监听 url 变化\n\t     */\n\t\n\t\n\t    _createClass(Locator, [{\n\t        key: 'start',\n\t        value: function start() {\n\t            window.addEventListener('hashchange', this[HASHCHANGE_HANDLER_KEY], false);\n\t        }\n\t\n\t        /**\n\t         * 停止监听\n\t         */\n\t\n\t    }, {\n\t        key: 'stop',\n\t        value: function stop() {\n\t            window.removeEventListener('hashchange', this[HASHCHANGE_HANDLER_KEY], false);\n\t        }\n\t\n\t        /**\n\t         * 重定向\n\t         *\n\t         * @param {string} url 重定向的地址\n\t         * @param {Object?} options 重定向的行为配置\n\t         * @param {boolean?} options.force 是否强制刷新\n\t         */\n\t\n\t    }, {\n\t        key: 'redirect',\n\t        value: function redirect(url) {\n\t            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { force: false };\n\t\n\t            url = (0, _resolveUrl2.default)(url, this.current);\n\t            var referrer = this.current;\n\t\n\t            var isChanged = url !== referrer;\n\t            if (isChanged) {\n\t                this.referrer = referrer;\n\t                this.current = url;\n\t                location.hash = url;\n\t            } else {\n\t                referrer = this.referrer;\n\t            }\n\t\n\t            if ((isChanged || options.force) && !options.silent) {\n\t                this.fire('redirect', { url: url, referrer: referrer });\n\t            }\n\t        }\n\t\n\t        /**\n\t         * 刷新当前 url\n\t         */\n\t\n\t    }, {\n\t        key: 'reload',\n\t        value: function reload() {\n\t            this.redirect(this.current, { force: true });\n\t        }\n\t    }]);\n\t\n\t    return Locator;\n\t}(_EventTarget3.default);\n\t\n\texports.default = Locator;\n\t\n\t/***/ },\n\t/* 5 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\"use strict\";\n\t\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _EventTarget2 = __webpack_require__(2);\n\t\n\tvar _EventTarget3 = _interopRequireDefault(_EventTarget2);\n\t\n\tvar _resolveUrl = __webpack_require__(0);\n\t\n\tvar _resolveUrl2 = _interopRequireDefault(_resolveUrl);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * san-router\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2017 Baidu Inc. All rights reserved.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file html5 模式地址监听器\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author errorrik\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * 获取当前URL\n\t *\n\t * @return {string}\n\t */\n\tfunction getLocation() {\n\t    return location.pathname + location.search;\n\t}\n\t\n\tvar POPSTATE_HANDLER_KEY = Symbol('popstate_handler_key');\n\t\n\t/**\n\t * html5 模式地址监听器\n\t *\n\t * @class\n\t */\n\t\n\tvar Locator = function (_EventTarget) {\n\t    _inherits(Locator, _EventTarget);\n\t\n\t    /**\n\t     * 构造函数\n\t     */\n\t    function Locator() {\n\t        _classCallCheck(this, Locator);\n\t\n\t        var _this = _possibleConstructorReturn(this, (Locator.__proto__ || Object.getPrototypeOf(Locator)).call(this));\n\t\n\t        _this.current = getLocation();\n\t        _this.referrer = '';\n\t\n\t        _this[POPSTATE_HANDLER_KEY] = function () {\n\t            _this.referrer = _this.current;\n\t            _this.current = getLocation();\n\t\n\t            _this.fire('redirect', {\n\t                url: _this.current,\n\t                referrer: _this.referrer\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t\n\t    /**\n\t     * 开始监听 url 变化\n\t     */\n\t\n\t\n\t    _createClass(Locator, [{\n\t        key: 'start',\n\t        value: function start() {\n\t            window.addEventListener('popstate', this[POPSTATE_HANDLER_KEY]);\n\t        }\n\t\n\t        /**\n\t         * 停止监听\n\t         */\n\t\n\t    }, {\n\t        key: 'stop',\n\t        value: function stop() {\n\t            window.removeEventListener('popstate', this[POPSTATE_HANDLER_KEY]);\n\t        }\n\t\n\t        /**\n\t         * 重定向\n\t         *\n\t         * @param {string} url 重定向的地址\n\t         * @param {Object?} options 重定向的行为配置\n\t         * @param {boolean?} options.force 是否强制刷新\n\t         */\n\t\n\t    }, {\n\t        key: 'redirect',\n\t        value: function redirect(url) {\n\t            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { force: false };\n\t\n\t            url = (0, _resolveUrl2.default)(url, this.current);\n\t            var referrer = this.current;\n\t\n\t            var isChanged = url !== referrer;\n\t\n\t            if (isChanged) {\n\t                this.referrer = referrer;\n\t                this.current = url;\n\t\n\t                history.pushState({}, '', url);\n\t            }\n\t\n\t            if ((isChanged || options.force) && !options.silent) {\n\t                this.fire('redirect', { url: url, referrer: referrer });\n\t            }\n\t        }\n\t\n\t        /**\n\t         * 刷新当前 url\n\t         */\n\t\n\t    }, {\n\t        key: 'reload',\n\t        value: function reload() {\n\t            this.fire('redirect', {\n\t                url: this.current,\n\t                referrer: this.referrer\n\t            });\n\t        }\n\t    }]);\n\t\n\t    return Locator;\n\t}(_EventTarget3.default);\n\t\n\texports.default = Locator;\n\t\n\t\n\tLocator.isSupport = 'pushState' in window.history;\n\t\n\t/***/ },\n\t/* 6 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\"use strict\";\n\t\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.Link = exports.router = exports.Router = exports.version = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\n\tsan-router\n\topyright 2017 Baidu Inc. All rights reserved.\n\tn\tfile 主模块\n\tauthor errorrik\n\tn\t\n\tvar _hash = __webpack_require__(4);\n\t\n\tvar _hash2 = _interopRequireDefault(_hash);\n\t\n\tvar _html = __webpack_require__(5);\n\t\n\tvar _html2 = _interopRequireDefault(_html);\n\t\n\tvar _parseUrl = __webpack_require__(1);\n\t\n\tvar _parseUrl2 = _interopRequireDefault(_parseUrl);\n\t\n\tvar _link = __webpack_require__(3);\n\t\n\tvar _link2 = _interopRequireDefault(_link);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar routeID = 0x5942b;\n\tvar guid = function guid() {\n\t    return (++routeID).toString();\n\t};\n\t\n\t/**\n\t * 版本号\n\t *\n\t * @type {string}\n\t */\n\tvar version = exports.version = '1.0.1';\n\t\n\t/**\n\t * 路由器类\n\t *\n\t * @class\n\t */\n\t\n\tvar Router = exports.Router = function () {\n\t    /**\n\t     * 构造函数\n\t     *\n\t     * @param {Object?} options 初始化参数\n\t     * @param {string?} options.mode 路由模式，hash | html5\n\t     */\n\t    function Router() {\n\t        var _this = this;\n\t\n\t        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t            _ref$mode = _ref.mode,\n\t            mode = _ref$mode === undefined ? 'hash' : _ref$mode;\n\t\n\t        _classCallCheck(this, Router);\n\t\n\t        this.routes = [];\n\t        this.routeAlives = [];\n\t\n\t        this.locatorRedirectHandler = function (e) {\n\t            var url = (0, _parseUrl2.default)(e.url);\n\t\n\t            for (var i = 0; i < _this.routes.length; i++) {\n\t                var routeItem = _this.routes[i];\n\t                var match = routeItem.rule.exec(url.path);\n\t\n\t                if (match) {\n\t                    // fill query\n\t                    var keys = routeItem.keys || [];\n\t                    for (var j = 1; j < match.length; j++) {\n\t                        url.query[keys[j] || j] = match[j];\n\t                    }\n\t\n\t                    // fill referrer\n\t                    url.referrer = e.referrer;\n\t\n\t                    _this.doRoute(routeItem, url);\n\t                    return;\n\t                }\n\t            }\n\t\n\t            var len = _this.routeAlives.length;\n\t            while (len--) {\n\t                _this.routeAlives[len].component.dispose();\n\t                _this.routeAlives.splice(len, 1);\n\t            }\n\t        };\n\t\n\t        this.setMode(mode);\n\t    }\n\t\n\t    /**\n\t     * 执行路由\n\t     *\n\t     * @private\n\t     * @param {Object} routeItem 路由项\n\t     * @param {Object} e 路由信息\n\t     */\n\t\n\t\n\t    _createClass(Router, [{\n\t        key: 'doRoute',\n\t        value: function doRoute(routeItem, e) {\n\t            var isUpdateAlive = false;\n\t            var len = this.routeAlives.length;\n\t\n\t            while (len--) {\n\t                var routeAlive = this.routeAlives[len];\n\t\n\t                if (routeAlive.id === routeItem.id) {\n\t                    routeAlive.component.data.set('route', e);\n\t                    routeAlive.component._callHook('route');\n\t                    isUpdateAlive = true;\n\t                } else {\n\t                    routeAlive.component.dispose();\n\t                    this.routeAlives.splice(len, 1);\n\t                }\n\t            }\n\t\n\t            if (!isUpdateAlive) {\n\t                if (routeItem.Component) {\n\t                    var component = new routeItem.Component();\n\t                    component.data.set('route', e);\n\t                    component._callHook('route');\n\t\n\t                    var targetEl = document.querySelector(routeItem.target);\n\t                    targetEl && component.attach(targetEl);\n\t\n\t                    this.routeAlives.push({\n\t                        component: component,\n\t                        id: routeItem.id\n\t                    });\n\t                } else {\n\t                    routeItem.handler.call(this, e);\n\t                }\n\t            }\n\t        }\n\t\n\t        /**\n\t         * 添加路由项\n\t         * 当规则匹配时，路由将优先将Component渲染到target中。如果没有包含Component，则执行handler函数\n\t         *\n\t         * @private\n\t         * @param {Object} routeItem 路由项\n\t         * @param {string|RegExp} routeItem.rule 路由规则\n\t         * @param {Function?} routeItem.handler 路由函数\n\t         * @param {Function?} routeItem.Component 路由组件\n\t         * @param {string} routeItem.target 路由组件要渲染到的目标位置\n\t         */\n\t\n\t    }, {\n\t        key: 'add',\n\t        value: function add(_ref2) {\n\t            var rule = _ref2.rule,\n\t                handler = _ref2.handler,\n\t                _ref2$target = _ref2.target,\n\t                target = _ref2$target === undefined ? '#main' : _ref2$target,\n\t                Component = _ref2.Component;\n\t\n\t            var keys = [''];\n\t\n\t            if (typeof rule === 'string') {\n\t                // 没用path-to-regexp，暂时不提供这么多功能支持\n\t                var regText = rule.replace(/\\/:([a-z0-9_-]+)(?=\\/|$)/g, function (match, key) {\n\t                    keys.push(key);\n\t                    return '/([a-z0-9_-]+)';\n\t                });\n\t\n\t                rule = new RegExp('^' + regText + '$', 'i');\n\t            }\n\t\n\t            if (!(rule instanceof RegExp)) {\n\t                throw new Error('Rule must be string or RegExp!');\n\t            }\n\t\n\t            var id = guid();\n\t            this.routes.push({ id: id, rule: rule, handler: handler, keys: keys, target: target, Component: Component });\n\t\n\t            return this;\n\t        }\n\t\n\t        /**\n\t         * 启动路由功能\n\t         */\n\t\n\t    }, {\n\t        key: 'start',\n\t        value: function start() {\n\t            if (!this.isStarted) {\n\t                this.isStarted = true;\n\t                this.locator.on('redirect', this.locatorRedirectHandler);\n\t                this.locator.start();\n\t                this.locator.reload();\n\t            }\n\t\n\t            return this;\n\t        }\n\t\n\t        /**\n\t         * 停止路由功能\n\t         */\n\t\n\t    }, {\n\t        key: 'stop',\n\t        value: function stop() {\n\t            this.locator.un('redirect', this.locatorRedirectHandler);\n\t            this.locator.stop();\n\t            this.isStarted = false;\n\t\n\t            return this;\n\t        }\n\t\n\t        /**\n\t         * 设置路由模式\n\t         *\n\t         * @param {string} mode 路由模式，hash | html5\n\t         */\n\t\n\t    }, {\n\t        key: 'setMode',\n\t        value: function setMode(mode) {\n\t            mode = mode.toLowerCase();\n\t            if (this.mode === mode) {\n\t                return;\n\t            }\n\t\n\t            this.mode = mode;\n\t\n\t            var restart = false;\n\t            if (this.isStarted) {\n\t                this.stop();\n\t                restart = true;\n\t            }\n\t\n\t            switch (mode) {\n\t                case 'hash':\n\t                    this.locator = new _hash2.default();\n\t                    break;\n\t                case 'html5':\n\t                    this.locator = new _html2.default();\n\t            }\n\t\n\t            if (restart) {\n\t                this.start();\n\t            }\n\t\n\t            return this;\n\t        }\n\t    }]);\n\t\n\t    return Router;\n\t}();\n\t\n\t/**\n\t * 默认的路由器实例\n\t *\n\t * @type {Router}\n\t */\n\t\n\t\n\tvar router = exports.router = new Router();\n\t\n\t/**\n\t * 路由链接的 San 组件\n\t *\n\t * @class\n\t */\n\texports.Link = _link2.default;\n\t\n\t/***/ },\n\t/* 7 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\"use strict\";\n\t\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * mini-event\n\t * Copyright 2013 Baidu Inc. All rights reserved.\n\t *\n\t * @ignore\n\t * @file 事件对象类\n\t * @author otakustay\n\t */\n\t\n\tvar isObject = function isObject(target) {\n\t    return Object.prototype.toString.call(target) === '[object Object]';\n\t};\n\t\n\t// 复制事件属性的时候不复制这几个\n\tvar EVENT_PROPERTY_BLACK_LIST = new Set(['type', 'target', 'preventDefault', 'isDefaultPrevented', 'stopPropagation', 'isPropagationStopped', 'stopImmediatePropagation', 'isImmediatePropagationStopped']);\n\t\n\t/**\n\t * 事件对象类\n\t */\n\t\n\tvar Event = function () {\n\t\n\t    /**\n\t     * 构造函数\n\t     *\n\t     * 3个重载：\n\t     *      - `new Event(type)`\n\t     *      - `new Event(args)`\n\t     *      - `new Event(type, args)`\n\t     * 只提供一个对象作为参数，则是`new Event(args)`的形式，需要加上type\n\t     *\n\t     * @param {string | *} [type] 事件类型\n\t     * @param {*} [args] 事件中的数据，如果为对象则将参数扩展到`Event`实例上。如果参数是非对象类型，则作为实例的`data`属性使用\n\t     */\n\t    function Event(type, args) {\n\t        _classCallCheck(this, Event);\n\t\n\t        // 如果第1个参数是对象，则就当是`new Event(args)`形式\n\t        if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object') {\n\t            args = type;\n\t            type = args.type;\n\t        }\n\t\n\t        if (isObject(args)) {\n\t            Object.assign(this, args);\n\t        } else if (args) {\n\t            this.data = args;\n\t        }\n\t\n\t        if (type) {\n\t            this.type = type;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * 判断默认行为是否已被阻止\n\t     *\n\t     * @return {boolean}\n\t     */\n\t\n\t\n\t    _createClass(Event, [{\n\t        key: 'isDefaultPrevented',\n\t        value: function isDefaultPrevented() {\n\t            return false;\n\t        }\n\t\n\t        /**\n\t         * 阻止默认行为\n\t         */\n\t\n\t    }, {\n\t        key: 'preventDefault',\n\t        value: function preventDefault() {\n\t            this.isDefaultPrevented = function () {\n\t                return true;\n\t            };\n\t        }\n\t\n\t        /**\n\t         * 判断事件传播是否已被阻止\n\t         *\n\t         * @return {boolean}\n\t         */\n\t\n\t    }, {\n\t        key: 'isPropagationStopped',\n\t        value: function isPropagationStopped() {\n\t            return false;\n\t        }\n\t\n\t        /**\n\t         * 阻止事件传播\n\t         */\n\t\n\t    }, {\n\t        key: 'stopPropagation',\n\t        value: function stopPropagation() {\n\t            this.isPropagationStopped = function () {\n\t                return true;\n\t            };\n\t        }\n\t\n\t        /**\n\t         * 判断事件的立即传播是否已被阻止\n\t         *\n\t         * @return {boolean}\n\t         */\n\t\n\t    }, {\n\t        key: 'isImmediatePropagationStopped',\n\t        value: function isImmediatePropagationStopped() {\n\t            return false;\n\t        }\n\t\n\t        /**\n\t         * 立即阻止事件传播\n\t         */\n\t\n\t    }, {\n\t        key: 'stopImmediatePropagation',\n\t        value: function stopImmediatePropagation() {\n\t            this.isImmediatePropagationStopped = function () {\n\t                return true;\n\t            };\n\t\n\t            this.stopPropagation();\n\t        }\n\t\n\t        /**\n\t         * 从一个已有事件对象生成一个新的事件对象\n\t         *\n\t         * @static\n\t         * @param {Event} originalEvent 作为源的已有事件对象\n\t         * @param {Object} [options] 配置项\n\t         * @param {string} [options.type] 新事件对象的类型，不提供则保留原类型\n\t         * @param {boolean} [options.preserveData=false] 是否保留事件的信息\n\t         * @param {boolean} [options.syncState=false] 是否让2个事件状态同步，状态包括阻止传播、立即阻止传播和阻止默认行为\n\t         * @param {Object} [options.extend] 提供事件对象的更多属性\n\t         * @return {Event}\n\t         */\n\t\n\t    }], [{\n\t        key: 'fromEvent',\n\t        value: function fromEvent(originalEvent, options) {\n\t            var defaults = {\n\t                type: originalEvent.type,\n\t                preserveData: false,\n\t                syncState: false\n\t            };\n\t            options = Object.assign(defaults, options);\n\t\n\t            var newEvent = new Event(options.type);\n\t            // 如果保留数据，则把数据复制过去\n\t            if (options.preserveData) {\n\t                // 要去掉一些可能出现的杂质，因此不用`lib.extend`\n\t                for (var key in originalEvent) {\n\t                    if (originalEvent.hasOwnProperty(key) && !EVENT_PROPERTY_BLACK_LIST.has(key)) {\n\t                        newEvent[key] = originalEvent[key];\n\t                    }\n\t                }\n\t            }\n\t\n\t            // 如果有扩展属性，加上去\n\t            if (options.extend) {\n\t                Object.assign(newEvent, options.extend);\n\t            }\n\t\n\t            // 如果要同步状态，把和状态相关的方法挂接上\n\t            if (options.syncState) {\n\t                (function () {\n\t                    var preventDefault = newEvent.preventDefault;\n\t                    newEvent.preventDefault = function () {\n\t                        originalEvent.preventDefault();\n\t\n\t                        preventDefault.call(this);\n\t                    };\n\t\n\t                    var stopPropagation = originalEvent.stopPropagation;\n\t                    newEvent.stopPropagation = function () {\n\t                        originalEvent.stopPropagation();\n\t\n\t                        stopPropagation.call(this);\n\t                    };\n\t\n\t                    var stopImmediatePropagation = originalEvent.stopImmediatePropagation;\n\t                    newEvent.stopImmediatePropagation = function () {\n\t                        originalEvent.stopImmediatePropagation();\n\t\n\t                        stopImmediatePropagation.call(this);\n\t                    };\n\t                })();\n\t            }\n\t\n\t            return newEvent;\n\t        }\n\t\n\t        /**\n\t         * 将一个对象的事件代理到另一个对象\n\t         *\n\t         * @static\n\t         * @param {EventTarget} from 事件提供方\n\t         * @param {EventTarget | string} fromType 为字符串表示提供方事件类型；\n\t         * 为可监听对象则表示接收方，此时事件类型由第3个参数提供\n\t         * @param {EventTarget | string} to 为字符串则表示提供方和接收方事件类型一致，\n\t         * 由此参数作为事件类型；为可监听对象则表示接收方，此时第2个参数必须为字符串\n\t         * @param {string} [toType] 接收方的事件类型\n\t         * @param {Object} [options] 配置项\n\t         * @param {boolean} [options.preserveData=false] 是否保留事件的信息\n\t         * @param {boolean} [options.syncState=false] 是否让2个事件状态同步，状态包括阻止传播、立即阻止传播和阻止默认行为\n\t         * @param {Object} [options.extend] 提供事件对象的更多属性\n\t         *\n\t         * ```\n\t         * // 当`label`触发`click`事件时，自身也触发`click`事件\n\t         * Event.delegate(label, this, 'click');\n\t         *\n\t         * // 当`label`触发`click`事件时，自身触发`labelclick`事件\n\t         * Event.delegate(label, 'click', this, 'labelclick');\n\t         * ```\n\t         */\n\t\n\t    }, {\n\t        key: 'delegate',\n\t        value: function delegate(from, fromType, to, toType, options) {\n\t            // 重载：\n\t            //\n\t            // 1. `.delegate(from, fromType, to, toType)`\n\t            // 2. `.delegate(from, fromType, to, toType, options)`\n\t            // 3. `.delegate(from, to, type)`\n\t            // 4. `.delegate(from, to, type, options)\n\t\n\t            // 重点在于第2个参数的类型，如果为字符串则肯定是1或2，否则为3或4\n\t            var useDifferentType = typeof fromType === 'string';\n\t            var source = {\n\t                object: from,\n\t                type: useDifferentType ? fromType : to\n\t            };\n\t            var target = {\n\t                object: useDifferentType ? to : fromType,\n\t                type: useDifferentType ? toType : to\n\t            };\n\t            var config = useDifferentType ? options : toType;\n\t            config = Object.assign({ preserveData: false }, config);\n\t\n\t            // 如果提供方不能注册事件，或接收方不能触发事件，那就不用玩了\n\t            if (typeof source.object.on !== 'function' || typeof target.object.on !== 'function' || typeof target.object.fire !== 'function') {\n\t                return;\n\t            }\n\t\n\t            var delegator = function delegator(originalEvent) {\n\t                var event = Event.fromEvent(originalEvent, config);\n\t                // 修正`type`和`target`属性\n\t                event.type = target.type;\n\t                event.target = target.object;\n\t\n\t                target.object.fire(target.type, event);\n\t            };\n\t\n\t            source.object.on(source.type, delegator);\n\t        }\n\t    }]);\n\t\n\t    return Event;\n\t}();\n\t\n\texports.default = Event;\n\t\n\t/***/ },\n\t/* 8 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\"use strict\";\n\t\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * mini-event\n\t * Copyright 2013 Baidu Inc. All rights reserved.\n\t *\n\t * @ignore\n\t * @file 事件队列\n\t * @author otakustay\n\t */\n\t\n\tvar QUEUE = Symbol('queue');\n\t\n\t/**\n\t * 判断已有的一个事件上下文对象是否和提供的参数等同\n\t *\n\t * @param {Object} context 在队列中已有的事件上下文对象\n\t * @param {Function | boolean} handler 处理函数，可以是`false`\n\t * @param {Mixed} [thisObject] 处理函数的`this`对象\n\t * @return {boolean}\n\t * @ignore\n\t */\n\t/* eslint-disable fecs-arrow-body-style */\n\tvar isContextIdentical = function isContextIdentical(context, handler, thisObject) {\n\t    // `thisObject`为`null`和`undefined`时认为等同，所以用`==`\n\t    /* eslint-disable eqeqeq */\n\t    return context && context.handler === handler && context.thisObject == thisObject;\n\t    /* eslint-enable eqeqeq */\n\t};\n\t/* eslint-enable fecs-arrow-body-style */\n\t\n\t/**\n\t * 事件队列\n\t *\n\t * @constructor\n\t */\n\t\n\tvar EventQueue = function () {\n\t    function EventQueue() {\n\t        _classCallCheck(this, EventQueue);\n\t\n\t        this[QUEUE] = [];\n\t    }\n\t\n\t    /**\n\t     * 添加一个事件处理函数\n\t     *\n\t     * @param {Function | boolean} handler 处理函数，\n\t     * 可以传递`false`作为特殊的处理函数，参考{@link EventTarget#on}\n\t     * @param {Object} [options] 相关配置\n\t     * @param {Mixed} [options.thisObject] 执行处理函数时的`this`对象\n\t     * @param {boolean} [options.once=false] 设定函数仅执行一次\n\t     */\n\t\n\t\n\t    _createClass(EventQueue, [{\n\t        key: 'add',\n\t        value: function add(handler, options) {\n\t            if (handler !== false && typeof handler !== 'function') {\n\t                throw new Error('event handler must be a function or const false');\n\t            }\n\t\n\t            var wrapper = Object.assign({ handler: handler }, options);\n\t\n\t            for (var i = 0; i < this[QUEUE].length; i++) {\n\t                var context = this[QUEUE][i];\n\t                // 同样的处理函数，不同的`this`对象，相当于外面`bind`了一把再添加，\n\t                // 此时认为这是完全不同的2个处理函数，但`null`和`undefined`认为是一样的\n\t                if (isContextIdentical(context, handler, wrapper.thisObject)) {\n\t                    return;\n\t                }\n\t            }\n\t\n\t            this[QUEUE].push(wrapper);\n\t        }\n\t\n\t        /**\n\t         * 移除一个或全部处理函数\n\t         *\n\t         * @param {Function | boolean} [handler] 指定移除的处理函数，\n\t         * 如不提供则移除全部处理函数，可以传递`false`作为特殊的处理函数\n\t         * @param {Mixed} [thisObject] 指定函数对应的`this`对象，\n\t         * 不提供则仅移除没有挂载`this`对象的那些处理函数\n\t         */\n\t\n\t    }, {\n\t        key: 'remove',\n\t        value: function remove(handler, thisObject) {\n\t            // 如果没提供`handler`，则直接清空\n\t            if (!handler) {\n\t                this.clear();\n\t                return;\n\t            }\n\t\n\t            for (var i = 0; i < this[QUEUE].length; i++) {\n\t                var context = this[QUEUE][i];\n\t\n\t                if (isContextIdentical(context, handler, thisObject)) {\n\t                    // 为了让`execute`过程中调用的`remove`工作正常，\n\t                    // 这里不能用`splice`直接删除，仅设为`null`留下这个空间\n\t                    this[QUEUE][i] = null;\n\t\n\t                    // 完全符合条件的处理函数在`add`时会去重，因此这里肯定只有一个\n\t                    return;\n\t                }\n\t            }\n\t        }\n\t\n\t        /**\n\t         * 移除全部处理函数，如果队列执行时调用这个函数，会导致剩余的处理函数不再执行\n\t         */\n\t\n\t    }, {\n\t        key: 'clear',\n\t        value: function clear() {\n\t            this[QUEUE].length = 0;\n\t        }\n\t\n\t        /**\n\t         * 执行所有处理函数\n\t         *\n\t         * @param {Event} event 事件对象\n\t         * @param {Mixed} thisObject 函数执行时的`this`对象\n\t         */\n\t\n\t    }, {\n\t        key: 'execute',\n\t        value: function execute(event, thisObject) {\n\t            // 如果执行过程中销毁，`dispose`会把`this[QUEUE]`弄掉，所以这里留一个引用，\n\t            // 在`dispose`中会额外把数组清空，因此不用担心后续的函数会执行\n\t            var queue = this[QUEUE];\n\t            for (var i = 0; i < queue.length; i++) {\n\t                if (typeof event.isImmediatePropagationStopped === 'function' && event.isImmediatePropagationStopped()) {\n\t                    return;\n\t                }\n\t\n\t                var context = queue[i];\n\t\n\t                // 移除事件时设置为`null`，因此可能无值\n\t                if (!context) {\n\t                    continue;\n\t                }\n\t\n\t                var handler = context.handler;\n\t\n\t                // `false`等同于两个方法的调用\n\t                if (handler === false) {\n\t                    if (typeof event.preventDefault === 'function') {\n\t                        event.preventDefault();\n\t                    }\n\t                    if (typeof event.stopPropagation === 'function') {\n\t                        event.stopPropagation();\n\t                    }\n\t                } else {\n\t                    // 这里不需要做去重处理了，在`on`的时候会去重，因此这里不可能重复\n\t                    handler.call(context.thisObject || thisObject, event);\n\t                }\n\t\n\t                if (context.once) {\n\t                    this.remove(context.handler, context.thisObject);\n\t                }\n\t            }\n\t        }\n\t\n\t        /**\n\t         * 获取队列的长度\n\t         *\n\t         * @return {number}\n\t         */\n\t\n\t    }, {\n\t        key: 'length',\n\t        value: function length() {\n\t            return this[QUEUE].filter(function (item) {\n\t                return !!item;\n\t            }).length;\n\t        }\n\t\n\t        /**\n\t         * 销毁\n\t         *\n\t         * 如果在队列执行的过程中销毁了对象，则在对象销毁后，剩余的处理函数不会再执行了\n\t         */\n\t\n\t    }, {\n\t        key: 'dispose',\n\t        value: function dispose() {\n\t            // 在执行过程中被销毁的情况下，这里`length`置为0，循环就走不下去了\n\t            this.clear();\n\t            this[QUEUE] = null;\n\t        }\n\t    }]);\n\t\n\t    return EventQueue;\n\t}();\n\t\n\texports.default = EventQueue;\n\t\n\t/***/ }\n\t/******/ ]);\n\t});\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Thank's IE8 for his funny defineProperty\n\tmodule.exports = !__webpack_require__(8)(function(){\n\t  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n\t});\n\n/***/ },\n/* 4 */,\n/* 5 */,\n/* 6 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(it){\n\t  return typeof it === 'object' ? it !== null : typeof it === 'function';\n\t};\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tvar core = module.exports = {version: '2.4.0'};\n\tif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(exec){\n\t  try {\n\t    return !!exec();\n\t  } catch(e){\n\t    return true;\n\t  }\n\t};\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n\tvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n\t  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\tif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar anObject       = __webpack_require__(27)\n\t  , IE8_DOM_DEFINE = __webpack_require__(32)\n\t  , toPrimitive    = __webpack_require__(34)\n\t  , dP             = Object.defineProperty;\n\t\n\texports.f = __webpack_require__(3) ? Object.defineProperty : function defineProperty(O, P, Attributes){\n\t  anObject(O);\n\t  P = toPrimitive(P, true);\n\t  anObject(Attributes);\n\t  if(IE8_DOM_DEFINE)try {\n\t    return dP(O, P, Attributes);\n\t  } catch(e){ /* empty */ }\n\t  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n\t  if('value' in Attributes)O[P] = Attributes.value;\n\t  return O;\n\t};\n\n/***/ },\n/* 11 */,\n/* 12 */,\n/* 13 */,\n/* 14 */,\n/* 15 */,\n/* 16 */,\n/* 17 */,\n/* 18 */,\n/* 19 */,\n/* 20 */,\n/* 21 */,\n/* 22 */,\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(25), __esModule: true };\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\texports.__esModule = true;\n\t\n\tvar _defineProperty = __webpack_require__(23);\n\t\n\tvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = function (obj, key, value) {\n\t  if (key in obj) {\n\t    (0, _defineProperty2.default)(obj, key, {\n\t      value: value,\n\t      enumerable: true,\n\t      configurable: true,\n\t      writable: true\n\t    });\n\t  } else {\n\t    obj[key] = value;\n\t  }\n\t\n\t  return obj;\n\t};\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(35);\n\tvar $Object = __webpack_require__(7).Object;\n\tmodule.exports = function defineProperty(it, key, desc){\n\t  return $Object.defineProperty(it, key, desc);\n\t};\n\n/***/ },\n/* 26 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(it){\n\t  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n\t  return it;\n\t};\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar isObject = __webpack_require__(6);\n\tmodule.exports = function(it){\n\t  if(!isObject(it))throw TypeError(it + ' is not an object!');\n\t  return it;\n\t};\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// optional / simple context binding\n\tvar aFunction = __webpack_require__(26);\n\tmodule.exports = function(fn, that, length){\n\t  aFunction(fn);\n\t  if(that === undefined)return fn;\n\t  switch(length){\n\t    case 1: return function(a){\n\t      return fn.call(that, a);\n\t    };\n\t    case 2: return function(a, b){\n\t      return fn.call(that, a, b);\n\t    };\n\t    case 3: return function(a, b, c){\n\t      return fn.call(that, a, b, c);\n\t    };\n\t  }\n\t  return function(/* ...args */){\n\t    return fn.apply(that, arguments);\n\t  };\n\t};\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar isObject = __webpack_require__(6)\n\t  , document = __webpack_require__(9).document\n\t  // in old IE typeof document.createElement is 'object'\n\t  , is = isObject(document) && isObject(document.createElement);\n\tmodule.exports = function(it){\n\t  return is ? document.createElement(it) : {};\n\t};\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar global    = __webpack_require__(9)\n\t  , core      = __webpack_require__(7)\n\t  , ctx       = __webpack_require__(28)\n\t  , hide      = __webpack_require__(31)\n\t  , PROTOTYPE = 'prototype';\n\t\n\tvar $export = function(type, name, source){\n\t  var IS_FORCED = type & $export.F\n\t    , IS_GLOBAL = type & $export.G\n\t    , IS_STATIC = type & $export.S\n\t    , IS_PROTO  = type & $export.P\n\t    , IS_BIND   = type & $export.B\n\t    , IS_WRAP   = type & $export.W\n\t    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n\t    , expProto  = exports[PROTOTYPE]\n\t    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n\t    , key, own, out;\n\t  if(IS_GLOBAL)source = name;\n\t  for(key in source){\n\t    // contains in native\n\t    own = !IS_FORCED && target && target[key] !== undefined;\n\t    if(own && key in exports)continue;\n\t    // export native or passed\n\t    out = own ? target[key] : source[key];\n\t    // prevent global pollution for namespaces\n\t    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n\t    // bind timers to global for call from export context\n\t    : IS_BIND && own ? ctx(out, global)\n\t    // wrap global constructors for prevent change them in library\n\t    : IS_WRAP && target[key] == out ? (function(C){\n\t      var F = function(a, b, c){\n\t        if(this instanceof C){\n\t          switch(arguments.length){\n\t            case 0: return new C;\n\t            case 1: return new C(a);\n\t            case 2: return new C(a, b);\n\t          } return new C(a, b, c);\n\t        } return C.apply(this, arguments);\n\t      };\n\t      F[PROTOTYPE] = C[PROTOTYPE];\n\t      return F;\n\t    // make static versions for prototype methods\n\t    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n\t    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n\t    if(IS_PROTO){\n\t      (exports.virtual || (exports.virtual = {}))[key] = out;\n\t      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n\t      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);\n\t    }\n\t  }\n\t};\n\t// type bitmap\n\t$export.F = 1;   // forced\n\t$export.G = 2;   // global\n\t$export.S = 4;   // static\n\t$export.P = 8;   // proto\n\t$export.B = 16;  // bind\n\t$export.W = 32;  // wrap\n\t$export.U = 64;  // safe\n\t$export.R = 128; // real proto method for `library` \n\tmodule.exports = $export;\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar dP         = __webpack_require__(10)\n\t  , createDesc = __webpack_require__(33);\n\tmodule.exports = __webpack_require__(3) ? function(object, key, value){\n\t  return dP.f(object, key, createDesc(1, value));\n\t} : function(object, key, value){\n\t  object[key] = value;\n\t  return object;\n\t};\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = !__webpack_require__(3) && !__webpack_require__(8)(function(){\n\t  return Object.defineProperty(__webpack_require__(29)('div'), 'a', {get: function(){ return 7; }}).a != 7;\n\t});\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(bitmap, value){\n\t  return {\n\t    enumerable  : !(bitmap & 1),\n\t    configurable: !(bitmap & 2),\n\t    writable    : !(bitmap & 4),\n\t    value       : value\n\t  };\n\t};\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 7.1.1 ToPrimitive(input [, PreferredType])\n\tvar isObject = __webpack_require__(6);\n\t// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n\t// and the second argument - flag - preferred type is a string\n\tmodule.exports = function(it, S){\n\t  if(!isObject(it))return it;\n\t  var fn, val;\n\t  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n\t  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n\t  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n\t  throw TypeError(\"Can't convert object to primitive value\");\n\t};\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar $export = __webpack_require__(30);\n\t// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n\t$export($export.S + $export.F * !__webpack_require__(3), 'Object', {defineProperty: __webpack_require__(10).f});\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t  Copyright (c) 2016 Jed Watson.\n\t  Licensed under the MIT License (MIT), see\n\t  http://jedwatson.github.io/classnames\n\t*/\n\t/* global define */\n\t\n\t(function () {\n\t\t'use strict';\n\t\n\t\tvar hasOwn = {}.hasOwnProperty;\n\t\n\t\tfunction classNames () {\n\t\t\tvar classes = [];\n\t\n\t\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t\tvar arg = arguments[i];\n\t\t\t\tif (!arg) continue;\n\t\n\t\t\t\tvar argType = typeof arg;\n\t\n\t\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\t\tclasses.push(arg);\n\t\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\t\tclasses.push(classNames.apply(null, arg));\n\t\t\t\t} else if (argType === 'object') {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn classes.join(' ');\n\t\t}\n\t\n\t\tif (typeof module !== 'undefined' && module.exports) {\n\t\t\tmodule.exports = classNames;\n\t\t} else if (true) {\n\t\t\t// register as 'classnames', consistent with npm package name\n\t\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t\t\t\treturn classNames;\n\t\t\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\t} else {\n\t\t\twindow.classNames = classNames;\n\t\t}\n\t}());\n\n\n/***/ },\n/* 37 */,\n/* 38 */,\n/* 39 */,\n/* 40 */,\n/* 41 */,\n/* 42 */,\n/* 43 */,\n/* 44 */,\n/* 45 */,\n/* 46 */,\n/* 47 */,\n/* 48 */,\n/* 49 */,\n/* 50 */,\n/* 51 */,\n/* 52 */,\n/* 53 */,\n/* 54 */,\n/* 55 */,\n/* 56 */,\n/* 57 */,\n/* 58 */,\n/* 59 */,\n/* 60 */,\n/* 61 */,\n/* 62 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\tvar process = module.exports = {};\n\t\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\t\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\t\n\tfunction defaultSetTimout() {\n\t    throw new Error('setTimeout has not been defined');\n\t}\n\tfunction defaultClearTimeout () {\n\t    throw new Error('clearTimeout has not been defined');\n\t}\n\t(function () {\n\t    try {\n\t        if (typeof setTimeout === 'function') {\n\t            cachedSetTimeout = setTimeout;\n\t        } else {\n\t            cachedSetTimeout = defaultSetTimout;\n\t        }\n\t    } catch (e) {\n\t        cachedSetTimeout = defaultSetTimout;\n\t    }\n\t    try {\n\t        if (typeof clearTimeout === 'function') {\n\t            cachedClearTimeout = clearTimeout;\n\t        } else {\n\t            cachedClearTimeout = defaultClearTimeout;\n\t        }\n\t    } catch (e) {\n\t        cachedClearTimeout = defaultClearTimeout;\n\t    }\n\t} ())\n\tfunction runTimeout(fun) {\n\t    if (cachedSetTimeout === setTimeout) {\n\t        //normal enviroments in sane situations\n\t        return setTimeout(fun, 0);\n\t    }\n\t    // if setTimeout wasn't available but was latter defined\n\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n\t        cachedSetTimeout = setTimeout;\n\t        return setTimeout(fun, 0);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedSetTimeout(fun, 0);\n\t    } catch(e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n\t            return cachedSetTimeout.call(null, fun, 0);\n\t        } catch(e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n\t            return cachedSetTimeout.call(this, fun, 0);\n\t        }\n\t    }\n\t\n\t\n\t}\n\tfunction runClearTimeout(marker) {\n\t    if (cachedClearTimeout === clearTimeout) {\n\t        //normal enviroments in sane situations\n\t        return clearTimeout(marker);\n\t    }\n\t    // if clearTimeout wasn't available but was latter defined\n\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n\t        cachedClearTimeout = clearTimeout;\n\t        return clearTimeout(marker);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedClearTimeout(marker);\n\t    } catch (e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n\t            return cachedClearTimeout.call(null, marker);\n\t        } catch (e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n\t            return cachedClearTimeout.call(this, marker);\n\t        }\n\t    }\n\t\n\t\n\t\n\t}\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = runTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    runClearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        runTimeout(drainQueue);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 63 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar apply = Function.prototype.apply;\n\t\n\t// DOM APIs, for completeness\n\t\n\texports.setTimeout = function() {\n\t  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n\t};\n\texports.setInterval = function() {\n\t  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n\t};\n\texports.clearTimeout =\n\texports.clearInterval = function(timeout) {\n\t  if (timeout) {\n\t    timeout.close();\n\t  }\n\t};\n\t\n\tfunction Timeout(id, clearFn) {\n\t  this._id = id;\n\t  this._clearFn = clearFn;\n\t}\n\tTimeout.prototype.unref = Timeout.prototype.ref = function() {};\n\tTimeout.prototype.close = function() {\n\t  this._clearFn.call(window, this._id);\n\t};\n\t\n\t// Does not start the time, just sets up the members needed.\n\texports.enroll = function(item, msecs) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = msecs;\n\t};\n\t\n\texports.unenroll = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = -1;\n\t};\n\t\n\texports._unrefActive = exports.active = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t\n\t  var msecs = item._idleTimeout;\n\t  if (msecs >= 0) {\n\t    item._idleTimeoutId = setTimeout(function onTimeout() {\n\t      if (item._onTimeout)\n\t        item._onTimeout();\n\t    }, msecs);\n\t  }\n\t};\n\t\n\t// setimmediate attaches itself to the global object\n\t__webpack_require__(64);\n\texports.setImmediate = setImmediate;\n\texports.clearImmediate = clearImmediate;\n\n\n/***/ },\n/* 64 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n\t    \"use strict\";\n\t\n\t    if (global.setImmediate) {\n\t        return;\n\t    }\n\t\n\t    var nextHandle = 1; // Spec says greater than zero\n\t    var tasksByHandle = {};\n\t    var currentlyRunningATask = false;\n\t    var doc = global.document;\n\t    var registerImmediate;\n\t\n\t    function setImmediate(callback) {\n\t      // Callback can either be a function or a string\n\t      if (typeof callback !== \"function\") {\n\t        callback = new Function(\"\" + callback);\n\t      }\n\t      // Copy function arguments\n\t      var args = new Array(arguments.length - 1);\n\t      for (var i = 0; i < args.length; i++) {\n\t          args[i] = arguments[i + 1];\n\t      }\n\t      // Store and register the task\n\t      var task = { callback: callback, args: args };\n\t      tasksByHandle[nextHandle] = task;\n\t      registerImmediate(nextHandle);\n\t      return nextHandle++;\n\t    }\n\t\n\t    function clearImmediate(handle) {\n\t        delete tasksByHandle[handle];\n\t    }\n\t\n\t    function run(task) {\n\t        var callback = task.callback;\n\t        var args = task.args;\n\t        switch (args.length) {\n\t        case 0:\n\t            callback();\n\t            break;\n\t        case 1:\n\t            callback(args[0]);\n\t            break;\n\t        case 2:\n\t            callback(args[0], args[1]);\n\t            break;\n\t        case 3:\n\t            callback(args[0], args[1], args[2]);\n\t            break;\n\t        default:\n\t            callback.apply(undefined, args);\n\t            break;\n\t        }\n\t    }\n\t\n\t    function runIfPresent(handle) {\n\t        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n\t        // So if we're currently running a task, we'll need to delay this invocation.\n\t        if (currentlyRunningATask) {\n\t            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n\t            // \"too much recursion\" error.\n\t            setTimeout(runIfPresent, 0, handle);\n\t        } else {\n\t            var task = tasksByHandle[handle];\n\t            if (task) {\n\t                currentlyRunningATask = true;\n\t                try {\n\t                    run(task);\n\t                } finally {\n\t                    clearImmediate(handle);\n\t                    currentlyRunningATask = false;\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    function installNextTickImplementation() {\n\t        registerImmediate = function(handle) {\n\t            process.nextTick(function () { runIfPresent(handle); });\n\t        };\n\t    }\n\t\n\t    function canUsePostMessage() {\n\t        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n\t        // where `global.postMessage` means something completely different and can't be used for this purpose.\n\t        if (global.postMessage && !global.importScripts) {\n\t            var postMessageIsAsynchronous = true;\n\t            var oldOnMessage = global.onmessage;\n\t            global.onmessage = function() {\n\t                postMessageIsAsynchronous = false;\n\t            };\n\t            global.postMessage(\"\", \"*\");\n\t            global.onmessage = oldOnMessage;\n\t            return postMessageIsAsynchronous;\n\t        }\n\t    }\n\t\n\t    function installPostMessageImplementation() {\n\t        // Installs an event handler on `global` for the `message` event: see\n\t        // * https://developer.mozilla.org/en/DOM/window.postMessage\n\t        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\t\n\t        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n\t        var onGlobalMessage = function(event) {\n\t            if (event.source === global &&\n\t                typeof event.data === \"string\" &&\n\t                event.data.indexOf(messagePrefix) === 0) {\n\t                runIfPresent(+event.data.slice(messagePrefix.length));\n\t            }\n\t        };\n\t\n\t        if (global.addEventListener) {\n\t            global.addEventListener(\"message\", onGlobalMessage, false);\n\t        } else {\n\t            global.attachEvent(\"onmessage\", onGlobalMessage);\n\t        }\n\t\n\t        registerImmediate = function(handle) {\n\t            global.postMessage(messagePrefix + handle, \"*\");\n\t        };\n\t    }\n\t\n\t    function installMessageChannelImplementation() {\n\t        var channel = new MessageChannel();\n\t        channel.port1.onmessage = function(event) {\n\t            var handle = event.data;\n\t            runIfPresent(handle);\n\t        };\n\t\n\t        registerImmediate = function(handle) {\n\t            channel.port2.postMessage(handle);\n\t        };\n\t    }\n\t\n\t    function installReadyStateChangeImplementation() {\n\t        var html = doc.documentElement;\n\t        registerImmediate = function(handle) {\n\t            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n\t            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n\t            var script = doc.createElement(\"script\");\n\t            script.onreadystatechange = function () {\n\t                runIfPresent(handle);\n\t                script.onreadystatechange = null;\n\t                html.removeChild(script);\n\t                script = null;\n\t            };\n\t            html.appendChild(script);\n\t        };\n\t    }\n\t\n\t    function installSetTimeoutImplementation() {\n\t        registerImmediate = function(handle) {\n\t            setTimeout(runIfPresent, 0, handle);\n\t        };\n\t    }\n\t\n\t    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n\t    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n\t    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\t\n\t    // Don't get fooled by e.g. browserify environments.\n\t    if ({}.toString.call(global.process) === \"[object process]\") {\n\t        // For Node.js before 0.9\n\t        installNextTickImplementation();\n\t\n\t    } else if (canUsePostMessage()) {\n\t        // For non-IE10 modern browsers\n\t        installPostMessageImplementation();\n\t\n\t    } else if (global.MessageChannel) {\n\t        // For web workers, where supported\n\t        installMessageChannelImplementation();\n\t\n\t    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n\t        // For IE 6–8\n\t        installReadyStateChangeImplementation();\n\t\n\t    } else {\n\t        // For older browsers\n\t        installSetTimeoutImplementation();\n\t    }\n\t\n\t    attachTo.setImmediate = setImmediate;\n\t    attachTo.clearImmediate = clearImmediate;\n\t}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(62)))\n\n/***/ },\n/* 65 */\n/***/ function(module, exports) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\t// css base code, injected by the css-loader\r\n\tmodule.exports = function() {\r\n\t\tvar list = [];\r\n\t\r\n\t\t// return the list of modules as css string\r\n\t\tlist.toString = function toString() {\r\n\t\t\tvar result = [];\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar item = this[i];\r\n\t\t\t\tif(item[2]) {\r\n\t\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult.push(item[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result.join(\"\");\r\n\t\t};\r\n\t\r\n\t\t// import a list of modules into the list\r\n\t\tlist.i = function(modules, mediaQuery) {\r\n\t\t\tif(typeof modules === \"string\")\r\n\t\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\t\tvar alreadyImportedModules = {};\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar id = this[i][0];\r\n\t\t\t\tif(typeof id === \"number\")\r\n\t\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t\t}\r\n\t\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\t\tvar item = modules[i];\r\n\t\t\t\t// skip already imported module\r\n\t\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlist.push(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn list;\r\n\t};\r\n\n\n/***/ },\n/* 66 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\n\t\tAuthor Tobias Koppers @sokra\n\t*/\n\tvar stylesInDom = {},\n\t\tmemoize = function(fn) {\n\t\t\tvar memo;\n\t\t\treturn function () {\n\t\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\t\t\treturn memo;\n\t\t\t};\n\t\t},\n\t\tisOldIE = memoize(function() {\n\t\t\treturn /msie [6-9]\\b/.test(self.navigator.userAgent.toLowerCase());\n\t\t}),\n\t\tgetHeadElement = memoize(function () {\n\t\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\n\t\t}),\n\t\tsingletonElement = null,\n\t\tsingletonCounter = 0,\n\t\tstyleElementsInsertedAtTop = [];\n\t\n\tmodule.exports = function(list, options) {\n\t\tif(false) {\n\t\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t\t}\n\t\n\t\toptions = options || {};\n\t\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t\t// tags it will allow on a page\n\t\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\n\t\n\t\t// By default, add <style> tags to the bottom of <head>.\n\t\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\n\t\n\t\tvar styles = listToStyles(list);\n\t\taddStylesToDom(styles, options);\n\t\n\t\treturn function update(newList) {\n\t\t\tvar mayRemove = [];\n\t\t\tfor(var i = 0; i < styles.length; i++) {\n\t\t\t\tvar item = styles[i];\n\t\t\t\tvar domStyle = stylesInDom[item.id];\n\t\t\t\tdomStyle.refs--;\n\t\t\t\tmayRemove.push(domStyle);\n\t\t\t}\n\t\t\tif(newList) {\n\t\t\t\tvar newStyles = listToStyles(newList);\n\t\t\t\taddStylesToDom(newStyles, options);\n\t\t\t}\n\t\t\tfor(var i = 0; i < mayRemove.length; i++) {\n\t\t\t\tvar domStyle = mayRemove[i];\n\t\t\t\tif(domStyle.refs === 0) {\n\t\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\n\t\t\t\t\t\tdomStyle.parts[j]();\n\t\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\t\n\tfunction addStylesToDom(styles, options) {\n\t\tfor(var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\t\t\tif(domStyle) {\n\t\t\t\tdomStyle.refs++;\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t\t}\n\t\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar parts = [];\n\t\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t\t}\n\t\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction listToStyles(list) {\n\t\tvar styles = [];\n\t\tvar newStyles = {};\n\t\tfor(var i = 0; i < list.length; i++) {\n\t\t\tvar item = list[i];\n\t\t\tvar id = item[0];\n\t\t\tvar css = item[1];\n\t\t\tvar media = item[2];\n\t\t\tvar sourceMap = item[3];\n\t\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\t\t\tif(!newStyles[id])\n\t\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\n\t\t\telse\n\t\t\t\tnewStyles[id].parts.push(part);\n\t\t}\n\t\treturn styles;\n\t}\n\t\n\tfunction insertStyleElement(options, styleElement) {\n\t\tvar head = getHeadElement();\n\t\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\n\t\tif (options.insertAt === \"top\") {\n\t\t\tif(!lastStyleElementInsertedAtTop) {\n\t\t\t\thead.insertBefore(styleElement, head.firstChild);\n\t\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\n\t\t\t} else {\n\t\t\t\thead.appendChild(styleElement);\n\t\t\t}\n\t\t\tstyleElementsInsertedAtTop.push(styleElement);\n\t\t} else if (options.insertAt === \"bottom\") {\n\t\t\thead.appendChild(styleElement);\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\n\t\t}\n\t}\n\t\n\tfunction removeStyleElement(styleElement) {\n\t\tstyleElement.parentNode.removeChild(styleElement);\n\t\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\n\t\tif(idx >= 0) {\n\t\t\tstyleElementsInsertedAtTop.splice(idx, 1);\n\t\t}\n\t}\n\t\n\tfunction createStyleElement(options) {\n\t\tvar styleElement = document.createElement(\"style\");\n\t\tstyleElement.type = \"text/css\";\n\t\tinsertStyleElement(options, styleElement);\n\t\treturn styleElement;\n\t}\n\t\n\tfunction createLinkElement(options) {\n\t\tvar linkElement = document.createElement(\"link\");\n\t\tlinkElement.rel = \"stylesheet\";\n\t\tinsertStyleElement(options, linkElement);\n\t\treturn linkElement;\n\t}\n\t\n\tfunction addStyle(obj, options) {\n\t\tvar styleElement, update, remove;\n\t\n\t\tif (options.singleton) {\n\t\t\tvar styleIndex = singletonCounter++;\n\t\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\n\t\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\n\t\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\n\t\t} else if(obj.sourceMap &&\n\t\t\ttypeof URL === \"function\" &&\n\t\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\t\ttypeof Blob === \"function\" &&\n\t\t\ttypeof btoa === \"function\") {\n\t\t\tstyleElement = createLinkElement(options);\n\t\t\tupdate = updateLink.bind(null, styleElement);\n\t\t\tremove = function() {\n\t\t\t\tremoveStyleElement(styleElement);\n\t\t\t\tif(styleElement.href)\n\t\t\t\t\tURL.revokeObjectURL(styleElement.href);\n\t\t\t};\n\t\t} else {\n\t\t\tstyleElement = createStyleElement(options);\n\t\t\tupdate = applyToTag.bind(null, styleElement);\n\t\t\tremove = function() {\n\t\t\t\tremoveStyleElement(styleElement);\n\t\t\t};\n\t\t}\n\t\n\t\tupdate(obj);\n\t\n\t\treturn function updateStyle(newObj) {\n\t\t\tif(newObj) {\n\t\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\n\t\t\t\t\treturn;\n\t\t\t\tupdate(obj = newObj);\n\t\t\t} else {\n\t\t\t\tremove();\n\t\t\t}\n\t\t};\n\t}\n\t\n\tvar replaceText = (function () {\n\t\tvar textStore = [];\n\t\n\t\treturn function (index, replacement) {\n\t\t\ttextStore[index] = replacement;\n\t\t\treturn textStore.filter(Boolean).join('\\n');\n\t\t};\n\t})();\n\t\n\tfunction applyToSingletonTag(styleElement, index, remove, obj) {\n\t\tvar css = remove ? \"\" : obj.css;\n\t\n\t\tif (styleElement.styleSheet) {\n\t\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\n\t\t} else {\n\t\t\tvar cssNode = document.createTextNode(css);\n\t\t\tvar childNodes = styleElement.childNodes;\n\t\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\n\t\t\tif (childNodes.length) {\n\t\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\n\t\t\t} else {\n\t\t\t\tstyleElement.appendChild(cssNode);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction applyToTag(styleElement, obj) {\n\t\tvar css = obj.css;\n\t\tvar media = obj.media;\n\t\n\t\tif(media) {\n\t\t\tstyleElement.setAttribute(\"media\", media)\n\t\t}\n\t\n\t\tif(styleElement.styleSheet) {\n\t\t\tstyleElement.styleSheet.cssText = css;\n\t\t} else {\n\t\t\twhile(styleElement.firstChild) {\n\t\t\t\tstyleElement.removeChild(styleElement.firstChild);\n\t\t\t}\n\t\t\tstyleElement.appendChild(document.createTextNode(css));\n\t\t}\n\t}\n\t\n\tfunction updateLink(linkElement, obj) {\n\t\tvar css = obj.css;\n\t\tvar sourceMap = obj.sourceMap;\n\t\n\t\tif(sourceMap) {\n\t\t\t// http://stackoverflow.com/a/26603875\n\t\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t\t}\n\t\n\t\tvar blob = new Blob([css], { type: \"text/css\" });\n\t\n\t\tvar oldSrc = linkElement.href;\n\t\n\t\tlinkElement.href = URL.createObjectURL(blob);\n\t\n\t\tif(oldSrc)\n\t\t\tURL.revokeObjectURL(oldSrc);\n\t}\n\n\n/***/ }\n]);\n\n\n// WEBPACK FOOTER //\n// static/js/vendor.0b15bbe1746d0f499cde.js","/**\n * San\n * Copyright 2016 Baidu Inc. All rights reserved.\n *\n * @file 组件体系，vm引擎\n * @author errorrik(errorrik@gmail.com)\n *         otakustay(otakustay@gmail.com)\n *         junmer(junmer@foxmail.com)\n */\n\n\n/* eslint-disable fecs-max-statements */\n(function (root) {\n/* eslint-enable fecs-max-statements */\n\n    // #region utils\n    /**\n     * 对象属性拷贝\n     *\n     * @inner\n     * @param {Object} target 目标对象\n     * @param {Object} source 源对象\n     * @return {Object} 返回目标对象\n     */\n    function extend(target, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                target[key] = source[key];\n            }\n        }\n\n        return target;\n    }\n\n    /**\n     * 构建类之间的继承关系\n     *\n     * @inner\n     * @param {Function} subClass 子类函数\n     * @param {Function} superClass 父类函数\n     */\n    function inherits(subClass, superClass) {\n        /* jshint -W054 */\n        var subClassProto = subClass.prototype;\n        var F = new Function();\n        F.prototype = superClass.prototype;\n        subClass.prototype = new F();\n        subClass.prototype.constructor = subClass;\n        extend(subClass.prototype, subClassProto);\n        /* jshint +W054 */\n    }\n\n    /**\n     * 遍历数组集合\n     *\n     * @inner\n     * @param {Array} array 数组源\n     * @param {function(Any,number):boolean} iterator 遍历函数\n     * @param {Object=} thisArg this指向对象\n     */\n    function each(array, iterator, thisArg) {\n        if (array && array.length > 0) {\n            for (var i = 0, l = array.length; i < l; i++) {\n                if (iterator.call(thisArg || array, array[i], i) === false) {\n                    break;\n                }\n            }\n        }\n    }\n\n\n    /**\n     * 判断数组中是否包含某项\n     *\n     * @inner\n     * @param {Array} array 数组\n     * @param {*} value 包含的项\n     * @return {boolean}\n     */\n    function contains(array, value) {\n        var result;\n        each(array, function (item) {\n            result = item === value;\n            return !result;\n        });\n\n        return result;\n    }\n\n    /**\n     * Function.prototype.bind 方法的兼容性封装\n     *\n     * @inner\n     * @param {Function} func 要bind的函数\n     * @param {Object} thisArg this指向对象\n     * @param {...*} args 预设的初始参数\n     * @return {Function}\n     */\n    function bind(func, thisArg) {\n        var nativeBind = Function.prototype.bind;\n        var slice = Array.prototype.slice;\n        if (nativeBind && func.bind === nativeBind) {\n            return nativeBind.apply(func, slice.call(arguments, 1));\n        }\n\n        var args = slice.call(arguments, 2);\n        return function () {\n            return func.apply(thisArg, args.concat(slice.call(arguments)));\n        };\n    }\n\n    /**\n     * DOM 事件挂载\n     *\n     * @inner\n     * @param {HTMLElement} el DOM元素\n     * @param {string} eventName 事件名\n     * @param {Function} listener 监听函数\n     */\n    function on(el, eventName, listener) {\n        if (el.addEventListener) {\n            el.addEventListener(eventName, listener, false);\n        }\n        else {\n            el.attachEvent('on' + eventName, listener);\n        }\n    }\n\n    /**\n     * DOM 事件卸载\n     *\n     * @inner\n     * @param {HTMLElement} el DOM元素\n     * @param {string} eventName 事件名\n     * @param {Function} listener 监听函数\n     */\n    function un(el, eventName, listener) {\n        if (el.addEventListener) {\n            el.removeEventListener(eventName, listener, false);\n        }\n        else {\n            el.detachEvent('on' + eventName, listener);\n        }\n    }\n\n    /**\n     * 将 DOM 从页面中移除\n     *\n     * @inner\n     * @param {HTMLElement} el DOM元素\n     */\n    function removeEl(el) {\n        if (el && el.parentNode) {\n            el.parentNode.removeChild(el);\n        }\n    }\n\n    /**\n     * svgTags\n     *\n     * @see https://www.w3.org/TR/SVG/svgdtd.html 只取常用\n     * @inner\n     * @type {Object}\n     */\n    var svgTags = {};\n    each((''\n            // structure\n            + 'svg,g,defs,desc,metadata,symbol,use,'\n            // image & shape\n            + 'image,path,rect,circle,line,ellipse,polyline,polygon,'\n            // text\n            + 'text,tspan,tref,textpath,'\n            // other\n            + 'marker,pattern,clippath,mask,filter,cursor,view,animate,'\n            // font\n            + 'font,font-face,glyph,missing-glyph'\n        ).split(','),\n        function (key) {\n            svgTags[key] = 1;\n        }\n    );\n\n    /**\n     * 创建 DOM 元素\n     *\n     * @inner\n     * @param  {string} tagName tagName\n     * @return {HTMLElement}\n     */\n    function createEl(tagName) {\n        if (svgTags[tagName]) {\n            return document.createElementNS('http://www.w3.org/2000/svg', tagName);\n        }\n\n        return document.createElement(tagName);\n    }\n\n    /**\n     * 唯一id的起始值\n     *\n     * @inner\n     * @type {number}\n     */\n    var guidIndex = 1;\n\n    /**\n     * 获取唯一id\n     *\n     * @inner\n     * @return {string} 唯一id\n     */\n    function guid() {\n        return '_san_' + (guidIndex++);\n    }\n\n    /**\n     * 下一个周期要执行的任务列表\n     *\n     * @inner\n     * @type {Array}\n     */\n    var nextTasks = [];\n\n    /**\n     * 执行下一个周期任务的函数\n     *\n     * @inner\n     * @type {Function}\n     */\n    var nextHandler;\n\n    /**\n     * 在下一个时间周期运行任务\n     *\n     * @inner\n     * @param {Function} fn 要运行的任务函数\n     * @param {Object=} thisArg this指向对象\n     */\n    function nextTick(fn, thisArg) {\n        if (thisArg) {\n            fn = bind(fn, thisArg);\n        }\n        nextTasks.push(fn);\n\n        if (nextHandler) {\n            return;\n        }\n\n        nextHandler = function () {\n            var tasks = nextTasks.slice(0);\n            nextTasks = [];\n            nextHandler = null;\n\n            each(tasks, function (task) {\n                task();\n            });\n        };\n\n        if (typeof MutationObserver === 'function') {\n            var num = 1;\n            var observer = new MutationObserver(nextHandler);\n            var text = document.createTextNode(num);\n            observer.observe(text, {\n                characterData: true\n            });\n            text.data = ++num;\n        }\n        else if (typeof setImmediate === 'function') {\n            setImmediate(nextHandler);\n        }\n        else {\n            setTimeout(nextHandler, 0);\n        }\n    }\n\n    /**\n     * 从userAgent中ie版本号的匹配信息\n     *\n     * @inner\n     * @type {Array}\n     */\n    var ieVersionMatch = typeof navigator !== 'undefined'\n        && navigator.userAgent.match(/msie\\s*([0-9]+)/i);\n\n    /**\n     * ie版本号，非ie时为0\n     *\n     * @inner\n     * @type {number}\n     */\n    var ie = ieVersionMatch ? ieVersionMatch[1] - 0 : 0;\n\n    /**\n     * 字符串连接时是否使用老式的兼容方案\n     *\n     * @inner\n     * @type {boolean}\n     */\n    var isCompatStringJoin = ie && ie < 8;\n\n    // HACK: IE8下，设置innerHTML时如果以script开头，script会被自动滤掉\n    //       为了保证script的stump存在，前面加个零宽特殊字符\n    /**\n     * 是否在桩元素前面插入空白字符\n     *\n     * @inner\n     * @type {boolean}\n     */\n    var isFEFFBeforeStump = ie && ie < 9;\n\n    /**\n     * 写个用于跨平台提高性能的字符串连接类\n     * 万一不小心支持老式浏览器了呢\n     *\n     * @inner\n     * @class\n     */\n    function StringBuffer() {\n        this.raw = isCompatStringJoin ? [] : '';\n        this.length = 0;\n    }\n\n    /**\n     * 获取连接的字符串结果\n     *\n     * @inner\n     * @return {string}\n     */\n    StringBuffer.prototype.toString = function () {\n        return isCompatStringJoin ? this.raw.join('') : this.raw;\n    };\n\n    /**\n     * 增加字符串片段\n     * 就不支持多参数，别问我为什么，这东西也不是给外部用的\n     *\n     * @inner\n     * @param {string} source 字符串片段\n     */\n    StringBuffer.prototype.push = isCompatStringJoin\n        ? function (source) {\n            this.raw[this.length++] = source;\n        }\n        : function (source) {\n            this.length++;\n            this.raw += source;\n        };\n\n    /**\n     * 索引列表，能根据 item 中的 name 进行索引\n     *\n     * @inner\n     * @class\n     */\n    function IndexedList() {\n        this.raw = [];\n        this.index = {};\n    }\n\n    /**\n     * 在列表末尾添加 item\n     *\n     * @inner\n     * @param {Object} item 要添加的对象\n     */\n    IndexedList.prototype.push = function (item) {\n        // #begin-ignore\n        if (!item.name) {\n            throw new Error('Miss \"name\" property');\n        }\n        // #end-ignore\n\n        if (!this.index[item.name]) {\n            this.raw.push(item);\n            this.index[item.name] = item;\n        }\n    };\n\n    /**\n     * 根据顺序下标获取 item\n     *\n     * @inner\n     * @param {number} index 顺序下标\n     * @return {Object}\n     */\n    IndexedList.prototype.getAt = function (index) {\n        return this.raw[index];\n    };\n\n    /**\n     * 根据 name 获取 item\n     *\n     * @inner\n     * @param {string} name name\n     * @return {Object}\n     */\n    IndexedList.prototype.get = function (name) {\n        return this.index[name];\n    };\n\n    /**\n     * 遍历 items\n     *\n     * @inner\n     * @param {function(*,Number):boolean} iterator 遍历函数\n     * @param {Object} thisArg 遍历函数运行的this环境\n     */\n    IndexedList.prototype.each = function (iterator, thisArg) {\n        each(this.raw, bind(iterator, thisArg || this));\n    };\n\n    /**\n     * 根据 name 移除 item\n     *\n     * @inner\n     * @param {string} name name\n     */\n    IndexedList.prototype.remove = function (name) {\n        this.index[name] = null;\n\n        var len = this.raw.length;\n        while (len--) {\n            if (this.raw[len].name === name) {\n                this.raw.splice(len, 1);\n                break;\n            }\n        }\n    };\n\n    /**\n     * 连接另外一个 IndexedList，返回一个新的 IndexedList\n     *\n     * @inner\n     * @param {IndexedList} other 要连接的IndexedList\n     * @return {IndexedList}\n     */\n    IndexedList.prototype.concat = function (other) {\n        var result = new IndexedList();\n        each(this.raw.concat(other.raw), function (item) {\n            result.push(item);\n        });\n\n        return result;\n    };\n\n    /**\n     * 判断标签是否应自关闭\n     *\n     * @inner\n     * @param {string} tagName 标签名\n     * @return {boolean}\n     */\n    function tagIsAutoClose(tagName) {\n        return /^(area|base|br|col|embed|hr|img|input|keygen|param|source|track|wbr)$/i.test(tagName);\n    }\n\n\n    // #region parse\n    /**\n     * 表达式类型\n     *\n     * @inner\n     * @const\n     * @type {Object}\n     */\n    var ExprType = {\n        STRING: 1,\n        NUMBER: 2,\n        ACCESSOR: 3,\n        INTERP: 4,\n        CALL: 5,\n        TEXT: 6,\n        BINARY: 7,\n        UNARY: 8,\n        TERTIARY: 9\n    };\n\n    /**\n     * 字符串源码读取类，用于模板字符串解析过程\n     *\n     * @inner\n     * @class\n     * @param {string} source 要读取的字符串\n     */\n    function Walker(source) {\n        this.source = source;\n        this.len = this.source.length;\n        this.index = 0;\n    }\n\n    /**\n     * 获取当前字符码\n     *\n     * @return {number}\n     */\n    Walker.prototype.currentCode = function () {\n        return this.charCode(this.index);\n    };\n\n    /**\n     * 截取字符串片段\n     *\n     * @param {number} start 起始位置\n     * @param {number} end 结束位置\n     * @return {string}\n     */\n    Walker.prototype.cut = function (start, end) {\n        return this.source.slice(start, end);\n    };\n\n    /**\n     * 向前读取字符\n     *\n     * @param {number} distance 读取字符数\n     */\n    Walker.prototype.go = function (distance) {\n        this.index += distance;\n    };\n\n    /**\n     * 读取下一个字符，返回下一个字符的 code\n     *\n     * @return {number}\n     */\n    Walker.prototype.nextCode = function () {\n        this.go(1);\n        return this.currentCode();\n    };\n\n    /**\n     * 获取相应位置字符的 code\n     *\n     * @param {number} index 字符位置\n     * @return {number}\n     */\n    Walker.prototype.charCode = function (index) {\n        return this.source.charCodeAt(index);\n    };\n\n    /**\n     * 向前读取字符，直到遇到指定字符再停止\n     *\n     * @param {number=} charCode 指定字符的code\n     * @return {boolean} 当指定字符时，返回是否碰到指定的字符\n     */\n    Walker.prototype.goUntil = function (charCode) {\n        var code;\n        while (this.index < this.len && (code = this.currentCode())) {\n            switch (code) {\n                case 32:\n                case 9:\n                    this.index++;\n                    break;\n                default:\n                    if (code === charCode) {\n                        this.index++;\n                        return 1;\n                    }\n                    return;\n            }\n        }\n    };\n\n    /**\n     * 向前读取符合规则的字符片段，并返回规则匹配结果\n     *\n     * @param {RegExp} reg 字符片段的正则表达式\n     * @return {Array}\n     */\n    Walker.prototype.match = function (reg) {\n        reg.lastIndex = this.index;\n\n        var match = reg.exec(this.source);\n        if (match) {\n            this.index = reg.lastIndex;\n        }\n\n        return match;\n    };\n\n    /**\n     * 模板解析生成的抽象节点\n     *\n     * @class\n     * @inner\n     * @param {Object=} options 节点参数\n     * @param {string=} options.tagName 标签名\n     * @param {ANode=} options.parent 父节点\n     * @param {boolean=} options.isText 是否文本节点\n     */\n    function ANode(options) {\n        if (!options || !options.isText) {\n            this.directives = new IndexedList();\n            this.props = new IndexedList();\n            this.events = [];\n            this.childs = [];\n        }\n\n        extend(this, options);\n    }\n\n    /**\n     * 解析 template\n     *\n     * @inner\n     * @param {string} source template 源码\n     * @return {node.Root}\n     */\n    function parseTemplate(source) {\n        var rootNode = new ANode();\n\n        if (typeof source !== 'string') {\n            return rootNode;\n        }\n\n        source = source.replace(/<!--([\\s\\S]*?)-->/mg, '').replace(/(^\\s+|\\s+$)/g, '');\n        var walker = new Walker(source);\n\n        var tagReg = /<(\\/)?([a-z0-9-]+)\\s*/ig;\n        var attrReg = /([-:0-9a-z\\(\\)\\[\\]]+)(=(['\"])([^\\3]*?)\\3)?\\s*/ig;\n\n        var tagMatch;\n        var currentNode = rootNode;\n        var beforeLastIndex = 0;\n\n        while ((tagMatch = walker.match(tagReg)) != null) {\n            var tagEnd = tagMatch[1];\n            var tagName = tagMatch[2].toLowerCase();\n\n            pushTextNode(source.slice(\n                beforeLastIndex,\n                walker.index - tagMatch[0].length\n            ));\n\n            // 62: >\n            // 47: /\n            if (tagEnd && walker.currentCode() === 62) {\n                // 满足关闭标签的条件时，关闭标签\n                // 向上查找到对应标签，找不到时忽略关闭\n                var closeTargetNode = currentNode;\n                while (closeTargetNode && closeTargetNode.tagName !== tagName) {\n                    closeTargetNode = closeTargetNode.parent;\n                }\n\n                closeTargetNode && (currentNode = closeTargetNode.parent);\n                walker.go(1);\n            }\n            else if (!tagEnd) {\n                var aElement = new ANode({\n                    tagName: tagName,\n                    parent: currentNode\n                });\n                var tagClose = tagIsAutoClose(tagName);\n\n                // 解析 attributes\n\n                /* eslint-disable no-constant-condition */\n                while (1) {\n                /* eslint-enable no-constant-condition */\n\n                    var nextCharCode = walker.currentCode();\n\n                    // 标签结束时跳出 attributes 读取\n                    // 标签可能直接结束或闭合结束\n                    if (nextCharCode === 62) {\n                        walker.go(1);\n                        break;\n                    }\n                    else if (nextCharCode === 47\n                        && walker.charCode(walker.index + 1) === 62\n                    ) {\n                        walker.go(2);\n                        tagClose = 1;\n                        break;\n                    }\n\n                    // 读取 attribute\n                    var attrMatch = walker.match(attrReg);\n                    if (attrMatch) {\n                        integrateAttr(\n                            aElement,\n                            attrMatch[1],\n                            attrMatch[2] ? attrMatch[4] : attrMatch[1]\n                        );\n                    }\n                }\n\n                currentNode.childs.push(aElement);\n                if (!tagClose) {\n                    currentNode = aElement;\n                }\n            }\n\n            beforeLastIndex = walker.index;\n        }\n\n        pushTextNode(walker.cut(beforeLastIndex));\n\n        return rootNode;\n\n        /**\n         * 在读取栈中添加文本节点\n         *\n         * @inner\n         * @param {string} text 文本内容\n         */\n        function pushTextNode(text) {\n            if (text) {\n                currentNode.childs.push(new ANode({\n                    isText: true,\n                    text: text,\n                    textExpr: parseText(text),\n                    parent: currentNode\n                }));\n            }\n        }\n    }\n\n    /**\n     * 解析抽象节点属性\n     *\n     * @inner\n     * @param {ANode} aNode 抽象节点\n     * @param {string} name 属性名称\n     * @param {string} value 属性值\n     * @param {boolean=} ignoreNormal 是否忽略无前缀的普通属性\n     */\n    function integrateAttr(aNode, name, value, ignoreNormal) {\n        if (name === 'id') {\n            aNode.id = value;\n            return;\n        }\n\n        var prefixIndex = name.indexOf('-');\n        var realName;\n        var prefix;\n\n        if (prefixIndex > 0) {\n            prefix = name.slice(0, prefixIndex);\n            realName = name.slice(prefixIndex + 1);\n        }\n\n        switch (prefix) {\n            case 'on':\n                aNode.events.push({\n                    name: realName,\n                    expr: parseCall(value)\n                });\n                break;\n\n            case 'san':\n                var directive = parseDirective(realName, value);\n                directive && aNode.directives.push(directive);\n                break;\n\n            case 'prop':\n                integrateProp(aNode, realName, value);\n                break;\n\n            default:\n                if (!ignoreNormal) {\n                    integrateProp(aNode, name, value);\n                }\n        }\n    }\n\n    /**\n     * 解析抽象节点绑定属性\n     *\n     * @inner\n     * @param {ANode} aNode 抽象节点\n     * @param {string} name 属性名称\n     * @param {string} value 属性值\n     */\n    function integrateProp(aNode, name, value) {\n        // parse two way binding, e.g. value=\"{=ident=}\"\n        var xMatch = value.match(/^\\{=\\s*(.*?)\\s*=\\}$/);\n\n        if (xMatch) {\n            aNode.props.push({\n                name: name,\n                expr: parseExpr(xMatch[1]),\n                x: true\n            });\n\n            return;\n        }\n\n        // parse normal prop\n        aNode.props.push(textPropExtra({\n            name: name,\n            expr: parseText(value),\n            raw: value\n        }));\n    }\n\n    /**\n     * 为text类型的属性绑定附加额外的行为，用于一些特殊需求，比如class中插值的自动展开\n     *\n     * @inner\n     * @param {Object} prop 绑定信息\n     * @return {Object}\n     */\n    function textPropExtra(prop) {\n        // 这里不能把只有一个插值的属性抽取\n        // 因为插值里的值可能是html片段，容易被注入\n        // 组件的数据绑定在组件init时做抽取\n        switch (prop.name) {\n            case 'class':\n                each(prop.expr.segs, function (seg) {\n                    if (seg.type === ExprType.INTERP) {\n                        seg.filters.push({\n                            type: ExprType.CALL,\n                            name: 'clazz',\n                            args: []\n                        });\n                    }\n                });\n                break;\n\n            case 'style':\n                each(prop.expr.segs, function (seg) {\n                    if (seg.type === ExprType.INTERP) {\n                        seg.filters.push({\n                            type: ExprType.CALL,\n                            name: 'style',\n                            args: []\n                        });\n                    }\n                });\n                break;\n        }\n\n        return prop;\n    }\n\n    /**\n     * 指令解析器\n     *\n     * @type {Object}\n     * @inner\n     */\n    var directiveParsers = {\n        'for': function (value) {\n            var walker = new Walker(value);\n            var match = walker.match(/^\\s*([\\$0-9a-z_]+)(\\s*,\\s*([\\$0-9a-z_]+))?\\s+in\\s+/ig);\n\n            if (match) {\n                return {\n                    item: match[1],\n                    index: match[3] || '$index',\n                    list: readPropertyAccessor(walker)\n                };\n            }\n\n            // #begin-ignore\n            throw new Error('[SAN FATAL] for syntax error: ' + value);\n            // #end-ignore\n        },\n\n        'ref': function (value) {\n            return {\n                value: parseText(value)\n            };\n        },\n\n        'if': function (value) {\n            return {\n                value: parseExpr(value)\n            };\n        },\n\n        'else': function () {\n            return {\n                value: true\n            };\n        }\n    };\n\n    /**\n     * 解析指令\n     *\n     * @inner\n     * @param {string} name 指令名称\n     * @param {string} value 指令值\n     * @return {Object?}\n     */\n    function parseDirective(name, value) {\n        var parser = directiveParsers[name];\n        if (parser) {\n            var result = parser(value);\n            result.name = name;\n            return result;\n        }\n    }\n\n    /**\n     * 解析文本\n     *\n     * @inner\n     * @param {string} source 源码\n     * @return {Object}\n     */\n    function parseText(source) {\n        var exprStartReg = /\\{\\{\\s*([\\s\\S]+?)\\s*\\}\\}/ig;\n        var exprMatch;\n\n        var walker = new Walker(source);\n        var beforeIndex = 0;\n\n        var segs = [];\n        function pushStringToSeg(text) {\n            text && segs.push({\n                type: ExprType.STRING,\n                value: text\n            });\n        }\n\n        while ((exprMatch = walker.match(exprStartReg)) != null) {\n            pushStringToSeg(walker.cut(\n                beforeIndex,\n                walker.index - exprMatch[0].length\n            ));\n            segs.push(parseInterp(exprMatch[1]));\n            beforeIndex = walker.index;\n        }\n\n        pushStringToSeg(walker.cut(beforeIndex));\n\n        return {\n            type: ExprType.TEXT,\n            segs: segs\n        };\n    }\n\n    /**\n     * 解析插值替换\n     *\n     * @inner\n     * @param {string} source 源码\n     * @return {Object}\n     */\n    function parseInterp(source) {\n        var walker = new Walker(source);\n        var expr = readTertiaryExpr(walker);\n\n        var filters = [];\n        while (walker.goUntil(124)) { // |\n            filters.push(readCall(walker));\n        }\n\n        return {\n            type: ExprType.INTERP,\n            expr: expr,\n            filters: filters\n        };\n    }\n\n    /**\n     * 解析表达式\n     *\n     * @inner\n     * @param {string} source 源码\n     * @return {Object}\n     */\n    function parseExpr(source) {\n        if (typeof source === 'object' && source.type) {\n            return source;\n        }\n\n        return readTertiaryExpr(new Walker(source));\n    }\n\n    /**\n     * 解析调用\n     *\n     * @inner\n     * @param {string} source 源码\n     * @return {Object}\n     */\n    function parseCall(source) {\n        return readCall(new Walker(source));\n    }\n\n    /**\n     * 读取字符串\n     *\n     * @inner\n     * @param {Walker} walker 源码读取对象\n     * @return {Object}\n     */\n    function readString(walker) {\n        var startCode = walker.currentCode();\n        var startIndex = walker.index;\n        var charCode;\n\n        walkLoop: while ((charCode = walker.nextCode())) {\n            switch (charCode) {\n                case 92: // \\\n                    walker.go(1);\n                    break;\n                case startCode:\n                    walker.go(1);\n                    break walkLoop;\n            }\n        }\n\n        var literal = walker.cut(startIndex, walker.index);\n        return {\n            type: ExprType.STRING,\n            value: (new Function('return ' + literal))()\n        };\n    }\n\n    /**\n     * 读取ident\n     *\n     * @inner\n     * @param {Walker} walker 源码读取对象\n     * @return {string}\n     */\n    function readIdentifier(walker) {\n        var match = walker.match(/\\s*([\\$0-9a-z_]+)/ig);\n        return match[1];\n    }\n\n    /**\n     * 读取数字\n     *\n     * @inner\n     * @param {Walker} walker 源码读取对象\n     * @return {Object}\n     */\n    function readNumber(walker) {\n        var match = walker.match(/\\s*(-?[0-9]+(.[0-9]+)?)/g);\n\n        return {\n            type: ExprType.NUMBER,\n            value: match[1] - 0\n        };\n    }\n\n    /**\n     * 读取属性访问表达式\n     *\n     * @inner\n     * @param {Walker} walker 源码读取对象\n     * @return {Object}\n     */\n    function readPropertyAccessor(walker) {\n        var result = {\n            type: ExprType.ACCESSOR,\n            paths: [\n                {\n                    type: ExprType.STRING,\n                    value: readIdentifier(walker)\n                }\n            ]\n        };\n\n        /* eslint-disable no-constant-condition */\n        accessorLoop: while (1) {\n        /* eslint-enable no-constant-condition */\n\n            switch (walker.currentCode()) {\n                case 46: // .\n                    walker.go(1);\n\n                    // ident as string\n                    result.paths.push({\n                        type: ExprType.STRING,\n                        value: readIdentifier(walker)\n                    });\n                    break;\n\n                case 91: // [\n                    walker.go(1);\n                    result.paths.push(readTertiaryExpr(walker));\n                    walker.goUntil(93);  // ]\n                    break;\n\n                default:\n                    break accessorLoop;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * 读取三元表达式\n     *\n     * @inner\n     * @param {Walker} walker 源码读取对象\n     * @return {Object}\n     */\n    function readTertiaryExpr(walker) {\n        var conditional = readLogicalORExpr(walker);\n        walker.goUntil();\n\n        if (walker.currentCode() === 63) { // ?\n            walker.go(1);\n            var yesExpr = readTertiaryExpr(walker);\n            walker.goUntil();\n\n            if (walker.currentCode() === 58) { // :\n                walker.go(1);\n                return {\n                    type: ExprType.TERTIARY,\n                    segs: [\n                        conditional,\n                        yesExpr,\n                        readTertiaryExpr(walker)\n                    ]\n                };\n            }\n        }\n\n        return conditional;\n    }\n\n    /**\n     * 读取逻辑或表达式\n     *\n     * @inner\n     * @param {Walker} walker 源码读取对象\n     * @return {Object}\n     */\n    function readLogicalORExpr(walker) {\n        var expr = readLogicalANDExpr(walker);\n        walker.goUntil();\n\n        if (walker.currentCode() === 124) { // |\n            if (walker.nextCode() === 124) {\n                walker.go(1);\n                return {\n                    type: ExprType.BINARY,\n                    operator: 248,\n                    segs: [expr, readLogicalORExpr(walker)]\n                };\n            }\n\n            walker.go(-1);\n        }\n\n        return expr;\n    }\n\n    /**\n     * 读取逻辑与表达式\n     *\n     * @inner\n     * @param {Walker} walker 源码读取对象\n     * @return {Object}\n     */\n    function readLogicalANDExpr(walker) {\n        var expr = readEqualityExpr(walker);\n        walker.goUntil();\n\n        if (walker.currentCode() === 38) { // &\n            if (walker.nextCode() === 38) {\n                walker.go(1);\n                return {\n                    type: ExprType.BINARY,\n                    operator: 76,\n                    segs: [expr, readLogicalANDExpr(walker)]\n                };\n            }\n\n            walker.go(-1);\n        }\n\n        return expr;\n    }\n\n    /**\n     * 读取相等比对表达式\n     *\n     * @inner\n     * @param {Walker} walker 源码读取对象\n     * @return {Object}\n     */\n    function readEqualityExpr(walker) {\n        var expr = readRelationalExpr(walker);\n        walker.goUntil();\n\n        var code = walker.currentCode();\n        switch (code) {\n            case 61: // =\n            case 33: // !\n                if (walker.nextCode() === 61) {\n                    code += 61;\n                    if (walker.nextCode() === 61) {\n                        code += 61;\n                        walker.go(1);\n                    }\n\n                    return {\n                        type: ExprType.BINARY,\n                        operator: code,\n                        segs: [expr, readEqualityExpr(walker)]\n                    };\n                }\n\n                walker.go(-1);\n        }\n\n        return expr;\n    }\n\n    /**\n     * 读取关系判断表达式\n     *\n     * @inner\n     * @param {Walker} walker 源码读取对象\n     * @return {Object}\n     */\n    function readRelationalExpr(walker) {\n        var expr = readAdditiveExpr(walker);\n        walker.goUntil();\n\n        var code = walker.currentCode();\n        switch (code) {\n            case 60: // <\n            case 62: // >\n                if (walker.nextCode() === 61) {\n                    code += 61;\n                    walker.go(1);\n                }\n\n                return {\n                    type: ExprType.BINARY,\n                    operator: code,\n                    segs: [expr, readRelationalExpr(walker)]\n                };\n        }\n\n        return expr;\n    }\n\n    /**\n     * 读取加法表达式\n     *\n     * @inner\n     * @param {Walker} walker 源码读取对象\n     * @return {Object}\n     */\n    function readAdditiveExpr(walker) {\n        var expr = readMultiplicativeExpr(walker);\n        walker.goUntil();\n\n        var code = walker.currentCode();\n        switch (code) {\n            case 43: // +\n            case 45: // -\n                walker.go(1);\n                return {\n                    type: ExprType.BINARY,\n                    operator: code,\n                    segs: [expr, readAdditiveExpr(walker)]\n                };\n        }\n\n        return expr;\n    }\n\n    /**\n     * 读取乘法表达式\n     *\n     * @inner\n     * @param {Walker} walker 源码读取对象\n     * @return {Object}\n     */\n    function readMultiplicativeExpr(walker) {\n        var expr = readUnaryExpr(walker);\n        walker.goUntil();\n\n        var code = walker.currentCode();\n        switch (code) {\n            case 42: // *\n            case 47: // /\n                walker.go(1);\n                return {\n                    type: ExprType.BINARY,\n                    operator: code,\n                    segs: [expr, readMultiplicativeExpr(walker)]\n                };\n        }\n\n        return expr;\n    }\n\n    /**\n     * 读取一元表达式\n     *\n     * @inner\n     * @param {Walker} walker 源码读取对象\n     * @return {Object}\n     */\n    function readUnaryExpr(walker) {\n        walker.goUntil();\n\n        switch (walker.currentCode()) {\n            case 33: // !\n                walker.go(1);\n                return {\n                    type: ExprType.UNARY,\n                    expr: readUnaryExpr(walker)\n                };\n            case 34: // \"\n            case 39: // '\n                return readString(walker);\n            case 45: // number\n            case 48:\n            case 49:\n            case 50:\n            case 51:\n            case 52:\n            case 53:\n            case 54:\n            case 55:\n            case 56:\n            case 57:\n                return readNumber(walker);\n            case 40: // (\n                return readParenthesizedExpr(walker);\n        }\n\n        return readPropertyAccessor(walker);\n    }\n\n    function readParenthesizedExpr(walker) {\n        walker.go(1);\n        var expr = readTertiaryExpr(walker);\n        walker.goUntil(41);  // )\n\n        return expr;\n    }\n\n    /**\n     * 二元表达式操作函数\n     *\n     * @inner\n     * @type {Object}\n     */\n    var BinaryOp = {\n        /* eslint-disable */\n        43: function (a, b) {\n            return a + b;\n        },\n        45: function (a, b) {\n            return a - b;\n        },\n        42: function (a, b) {\n            return a * b;\n        },\n        47: function (a, b) {\n            return a / b;\n        },\n        60: function (a, b) {\n            return a < b;\n        },\n        62: function (a, b) {\n            return a > b;\n        },\n        76: function (a, b) {\n            return a && b;\n        },\n        94: function (a, b) {\n            return a != b;\n        },\n        121: function (a, b) {\n            return a <= b;\n        },\n        122: function (a, b) {\n            return a == b;\n        },\n        123: function (a, b) {\n            return a >= b;\n        },\n        155: function (a, b) {\n            return a !== b;\n        },\n        183: function (a, b) {\n            return a === b;\n        },\n        248: function (a, b) {\n            return a || b;\n        }\n        /* eslint-enable */\n    };\n\n    /**\n     * 读取调用\n     *\n     * @inner\n     * @param {Walker} walker 源码读取对象\n     * @return {Object}\n     */\n    function readCall(walker) {\n        walker.goUntil();\n        var ident = readIdentifier(walker);\n        var args = [];\n\n        if (walker.goUntil(40)) { // (\n            while (!walker.goUntil(41)) { // )\n                args.push(readTertiaryExpr(walker));\n                walker.goUntil(44); // ,\n            }\n        }\n\n        return {\n            type: ExprType.CALL,\n            name: ident,\n            args: args\n        };\n    }\n\n    /**\n     * 判断变更表达式与多个表达式之间的关系，-1为完全没关系，0为有关系\n     *\n     * @inner\n     * @param {Object} changeExpr 目标表达式\n     * @param {Array} exprs 多个源表达式\n     * @param {Model} model 表达式所属数据环境\n     * @return {number}\n     */\n    function changeExprCompareExprs(changeExpr, exprs, model) {\n        var result;\n        each(exprs, function (expr) {\n            result = changeExprCompare(changeExpr, expr, model);\n            return !result;\n        });\n\n        return result ? 1 : 0;\n    }\n\n    /**\n     * 比较变更表达式与目标表达式之间的关系，用于视图更新判断\n     * 视图更新需要根据其关系，做出相应的更新行为\n     *\n     * 0: 完全没关系\n     * 1: 变更表达式是目标表达式的母项(如a与a.b) 或 表示需要完全变化\n     * 2: 变更表达式是目标表达式相等\n     * >2: 变更表达式是目标表达式的子项，如a.b.c与a.b\n     *\n     * @param {Object} changeExpr 变更表达式\n     * @param {Object} expr 要比较的目标表达式\n     * @param {Model} model 表达式所属数据环境\n     * @return {number}\n     */\n    function changeExprCompare(changeExpr, expr, model) {\n        switch (expr.type) {\n            case ExprType.ACCESSOR:\n                var paths = expr.paths;\n                var len = paths.length;\n                var changePaths = changeExpr.paths;\n                var changeLen = changePaths.length;\n\n                var result = 1;\n                for (var i = 0; i < len; i++) {\n                    var pathExpr = paths[i];\n\n                    if (pathExpr.type === ExprType.ACCESSOR\n                        && changeExprCompare(changeExpr, pathExpr, model)\n                    ) {\n                        return 1;\n                    }\n\n                    if (result && i < changeLen\n                        /* eslint-disable eqeqeq */\n                        && evalExpr(pathExpr, model) != changePaths[i].value\n                        /* eslint-enable eqeqeq */\n                    ) {\n                        result = 0;\n                    }\n                }\n\n                if (result) {\n                    result = Math.max(1, changeLen - len + 2);\n                }\n                return result;\n\n            case ExprType.UNARY:\n                return changeExprCompare(changeExpr, expr.expr, model) ? 1 : 0;\n\n\n            case ExprType.TEXT:\n            case ExprType.BINARY:\n            case ExprType.TERTIARY:\n                return changeExprCompareExprs(changeExpr, expr.segs, model);\n\n            case ExprType.INTERP:\n                if (!changeExprCompare(changeExpr, expr.expr, model)) {\n                    var filterResult;\n                    each(expr.filters, function (filter) {\n                        filterResult = changeExprCompareExprs(changeExpr, filter.args, model);\n                        return !filterResult;\n                    });\n\n                    return filterResult ? 1 : 0;\n                }\n\n                return 1;\n        }\n\n        return 0;\n    }\n\n    // #region Model\n\n    /**\n     * 数据容器类\n     *\n     * @inner\n     * @class\n     * @param {Model} parent 父级数据容器\n     */\n    function Model(parent) {\n        this.parent = parent;\n        this.listeners = [];\n        this.data = {};\n    }\n\n    /**\n     * 数据变更类型枚举\n     *\n     * @inner\n     * @const\n     * @type {Object}\n     */\n    var ModelChangeType = {\n        SET: 1,\n        SPLICE: 2\n    };\n\n    /**\n     * 添加数据变更的事件监听器\n     *\n     * @param {Function} listener 监听函数\n     */\n    Model.prototype.onChange = function (listener) {\n        if (typeof listener === 'function') {\n            this.listeners.push(listener);\n        }\n    };\n\n    /**\n     * 移除数据变更的事件监听器\n     *\n     * @param {Function} listener 监听函数\n     */\n    Model.prototype.unChange = function (listener) {\n        var len = this.listeners.length;\n        while (len--) {\n            if (!listener || this.listeners[len] === listener) {\n                this.listeners.splice(len, 1);\n            }\n        }\n    };\n\n    /**\n     * 触发数据变更\n     *\n     * @param {Object} change 变更信息对象\n     */\n    Model.prototype.fireChange = function (change) {\n        each(this.listeners, function (listener) {\n            listener.call(this, change);\n        }, this);\n    };\n\n    /**\n     * 获取数据项\n     *\n     * @param {string|Object?} expr 数据项路径\n     * @return {*}\n     */\n    Model.prototype.get = function (expr) {\n        var value = this.data;\n        if (!expr) {\n            return value;\n        }\n\n        expr = parseExpr(expr);\n\n        if (expr.type === ExprType.ACCESSOR) {\n            var paths = expr.paths;\n            var start = 0;\n            var l = paths.length;\n\n            for (; start < l; start++) {\n                if (paths[start].value == null) {\n                    break;\n                }\n            }\n\n            var i = 0;\n            for (; value != null && i < start; i++) {\n                value = value[paths[i].value];\n            }\n\n            if (value == null && this.parent) {\n                value = this.parent.get({\n                    type: ExprType.ACCESSOR,\n                    paths: paths.slice(0, start)\n                });\n            }\n\n            for (i = start; value != null && i < l; i++) {\n                value = value[paths[i].value || evalExpr(paths[i], this)];\n            }\n\n            return value;\n        }\n    };\n\n    /**\n     * 设置数据项\n     *\n     * @param {string|Object} expr 数据项路径\n     * @param {*} value 数据值\n     * @param {Object=} option 设置参数\n     * @param {boolean} option.silence 静默设置，不触发变更事件\n     */\n    Model.prototype.set = function (expr, value, option) {\n        option = option || {};\n        expr = parseExpr(expr);\n\n        if (expr.type === ExprType.ACCESSOR) {\n            var data = this.data;\n            var prop;\n\n            var paths = expr.paths;\n            for (var i = 0, l = paths.length; i < l - 1; i++) {\n                var pathValue = evalExpr(paths[i], this);\n\n                if (data[pathValue] == null) {\n                    data[pathValue] = {};\n                }\n                data = data[pathValue];\n            }\n\n            prop = evalExpr(paths[i], this);\n\n            if (prop != null) {\n                data[prop] = value;\n                !option.silence && this.fireChange({\n                    type: ModelChangeType.SET,\n                    expr: expr,\n                    value: value,\n                    option: option\n                });\n            }\n        }\n    };\n\n    /**\n     * 数组数据项push操作\n     *\n     * @param {string|Object} expr 数据项路径\n     * @param {*} item 要push的值\n     * @param {Object=} option 设置参数\n     * @param {boolean} option.silence 静默设置，不触发变更事件\n     */\n    Model.prototype.push = function (expr, item, option) {\n        var target = this.get(expr);\n\n        if (target instanceof Array) {\n            this.splice(expr, [target.length, 0, item], option);\n        }\n    };\n\n    /**\n     * 数组数据项pop操作\n     *\n     * @param {string|Object} expr 数据项路径\n     * @param {Object=} option 设置参数\n     * @param {boolean} option.silence 静默设置，不触发变更事件\n     * @return {*}\n     */\n    Model.prototype.pop = function (expr, option) {\n        var target = this.get(expr);\n\n        if (target instanceof Array) {\n            var len = target.length;\n            if (len) {\n                return this.splice(expr, [len - 1, 1], option)[0];\n            }\n        }\n    };\n\n    /**\n     * 数组数据项shift操作\n     *\n     * @param {string|Object} expr 数据项路径\n     * @param {Object=} option 设置参数\n     * @param {boolean} option.silence 静默设置，不触发变更事件\n     * @return {*}\n     */\n    Model.prototype.shift = function (expr, option) {\n        return this.splice(expr, [0, 1], option)[0];\n    };\n\n    /**\n     * 数组数据项unshift操作\n     *\n     * @param {string|Object} expr 数据项路径\n     * @param {*} item 要unshift的值\n     * @param {Object=} option 设置参数\n     * @param {boolean} option.silence 静默设置，不触发变更事件\n     */\n    Model.prototype.unshift = function (expr, item, option) {\n        this.splice(expr, [0, 0, item], option);\n    };\n\n    /**\n     * 数组数据项移除操作\n     *\n     * @param {string|Object} expr 数据项路径\n     * @param {number} index 要移除项的索引\n     * @param {Object=} option 设置参数\n     * @param {boolean} option.silence 静默设置，不触发变更事件\n     */\n    Model.prototype.removeAt = function (expr, index, option) {\n        this.splice(expr, [index, 1], option);\n    };\n\n    /**\n     * 数组数据项移除操作\n     *\n     * @param {string|Object} expr 数据项路径\n     * @param {*} value 要移除的项\n     * @param {Object=} option 设置参数\n     * @param {boolean} option.silence 静默设置，不触发变更事件\n     */\n    Model.prototype.remove = function (expr, value, option) {\n        var target = this.get(expr);\n\n        if (target instanceof Array) {\n            var len = target.length;\n            while (len--) {\n                if (target[len] === value) {\n                    this.splice(expr, [len, 1], option);\n                    break;\n                }\n            }\n        }\n    };\n\n    Model.prototype.splice = function (expr, args, option) {\n        option = option || {};\n        expr = parseExpr(expr);\n\n        var target = this.get(expr);\n        var returnValue = [];\n\n        if (target instanceof Array) {\n            var index = args[0];\n            if (index < 0 || index > target.length) {\n                return;\n            }\n\n            returnValue = target.splice.apply(target, args);\n\n            !option.silence && this.fireChange({\n                expr: expr,\n                type: ModelChangeType.SPLICE,\n                index: index,\n                deleteCount: returnValue.length,\n                value: returnValue,\n                insertions: args.slice(2),\n                option: option\n            });\n        }\n\n        return returnValue;\n    };\n\n    /**\n     * HTML Filter替换的字符实体表\n     *\n     * @const\n     * @inner\n     * @type {Object}\n     */\n    var HTML_ENTITY = {\n        /* jshint ignore:start */\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        /* eslint-disable quotes */\n        \"'\": '&#39;'\n        /* eslint-enable quotes */\n        /* jshint ignore:end */\n    };\n\n    /**\n     * HTML Filter的替换函数\n     *\n     * @inner\n     * @param {string} c 替换字符\n     * @return {string} 替换后的HTML字符实体\n     */\n    function htmlFilterReplacer(c) {\n        return HTML_ENTITY[c];\n    }\n\n    /**\n     * HTML转义\n     *\n     * @param {string} source 源串\n     * @return {string} 替换结果串\n     */\n    function escapeHTML(source) {\n        if (source == null) {\n            return '';\n        }\n\n        return String(source).replace(/[&<>\"']/g, htmlFilterReplacer);\n    }\n\n    /**\n     * 默认filter\n     *\n     * @inner\n     * @const\n     * @type {Object}\n     */\n    var DEFAULT_FILTERS = {\n\n        /**\n         * HTML转义filter\n         *\n         * @param {string} source 源串\n         * @return {string} 替换结果串\n         */\n        html: escapeHTML,\n\n        /**\n         * URL编码filter\n         *\n         * @param {string} source 源串\n         * @return {string} 替换结果串\n         */\n        url: encodeURIComponent,\n\n        /**\n         * 源串filter，用于在默认开启HTML转义时获取源串，不进行转义\n         *\n         * @param {string} source 源串\n         * @return {string} 替换结果串\n         */\n        raw: function (source) {\n            return source;\n        },\n\n        clazz: function (source) {\n            if (source instanceof Array) {\n                return source.join(' ');\n            }\n\n            return source;\n        },\n\n        style: function (source) {\n            if (typeof source === 'object') {\n                var result = '';\n                for (var key in source) {\n                    result += key + ':' + source[key] + ';';\n                }\n\n                return result;\n            }\n\n            return source;\n        }\n    };\n\n    /**\n     * 计算表达式的值\n     *\n     * @inner\n     * @param {Object} expr 表达式对象\n     * @param {Model} model 数据容器对象\n     * @param {Component=} owner 所属组件环境\n     * @param {boolean?} escapeInterpHtml 是否对插值进行html转义\n     * @return {*}\n     */\n    function evalExpr(expr, model, owner, escapeInterpHtml) {\n        switch (expr.type) {\n            case ExprType.UNARY:\n                return !evalExpr(expr.expr, model, owner);\n\n            case ExprType.BINARY:\n                var opHandler = BinaryOp[expr.operator];\n                if (typeof opHandler === 'function') {\n                    return opHandler(\n                        evalExpr(expr.segs[0], model, owner),\n                        evalExpr(expr.segs[1], model, owner)\n                    );\n                }\n                return;\n\n            case ExprType.TERTIARY:\n                var cond = evalExpr(expr.segs[0], model, owner);\n                return evalExpr(\n                    cond ? expr.segs[1] : expr.segs[2],\n                    model,\n                    owner\n                );\n\n            case ExprType.STRING:\n            case ExprType.NUMBER:\n                return expr.value;\n\n            case ExprType.ACCESSOR:\n                return model.get(expr);\n\n            case ExprType.INTERP:\n                var value = evalExpr(expr.expr, model, owner);\n\n                owner && each(expr.filters, function (filter) {\n                    var filterName = filter.name;\n                    /* eslint-disable no-use-before-define */\n                    var filterFn = owner.filters[filterName] || DEFAULT_FILTERS[filterName];\n                    /* eslint-enable no-use-before-define */\n\n                    if (typeof filterFn === 'function') {\n                        var args = [value];\n                        each(filter.args, function (arg) {\n                            args.push(evalExpr(arg, model, owner));\n                        });\n\n                        value = filterFn.apply(owner, args);\n                    }\n                });\n\n                if (value == null) {\n                    value = '';\n                }\n\n                return value;\n\n            case ExprType.TEXT:\n                var buf = new StringBuffer();\n                each(expr.segs, function (seg) {\n                    var segValue = evalExpr(seg, model, owner);\n\n                    // escape html\n                    if (escapeInterpHtml && seg.type === ExprType.INTERP && !seg.filters[0]) {\n                        segValue = escapeHTML(segValue);\n                    }\n\n                    buf.push(segValue);\n                });\n                return buf.toString();\n        }\n    }\n\n    // #region node\n\n\n\n    /* eslint-disable fecs-valid-var-jsdoc */\n    /**\n     * 节点生命周期信息\n     *\n     * @inner\n     * @type {Object}\n     */\n    var LifeCycles = {\n        compiled: {\n            value: 1\n        },\n\n        inited: {\n            value: 2\n        },\n\n        created: {\n            value: 3\n        },\n\n        attached: {\n            value: 4,\n            mutex: 'detached'\n        },\n\n        detached: {\n            value: 5,\n            mutex: 'attached'\n        },\n\n        disposed: {\n            value: 6,\n            mutex: '*'\n        }\n    };\n    /* eslint-enable fecs-valid-var-jsdoc */\n\n    /**\n     * 生命周期类\n     *\n     * @inner\n     * @class\n     */\n    function LifeCycle() {\n        this.raw = {};\n    }\n\n    /**\n     * 设置生命周期\n     *\n     * @param {string} name 生命周期名称\n     */\n    LifeCycle.prototype.set = function (name) {\n        var lifeCycle = LifeCycles[name];\n        if (!lifeCycle) {\n            return;\n        }\n\n        if (lifeCycle.mutex === '*') {\n            this.raw = {};\n        }\n        else if (lifeCycle.mutex) {\n            this.raw[LifeCycles[lifeCycle.mutex].value] = 0;\n        }\n\n        this.raw[lifeCycle.value] = 1;\n    };\n\n    /**\n     * 是否位于生命周期\n     *\n     * @param {string} name 生命周期名称\n     * @return {boolean}\n     */\n    LifeCycle.prototype.is = function (name) {\n        var lifeCycle = LifeCycles[name];\n        if (lifeCycle) {\n            return !!this.raw[lifeCycle.value];\n        }\n\n        return false;\n    };\n\n    /**\n     * 节点基类\n     *\n     * @inner\n     * @class\n     * @param {Object} options 初始化参数\n     * @param {ANode} options.aNode 抽象信息节点对象\n     * @param {Component=} options.owner 所属的组件对象\n     */\n    function Node(options) {\n        options = options || {};\n\n        this.lifeCycle = new LifeCycle();\n        this.init(options);\n    }\n\n    /**\n     * 使节点到达相应的生命周期，并调用钩子\n     *\n     * @protected\n     * @param {string} name 生命周期名称\n     */\n    Node.prototype._callHook = function (name) {\n        if (this.lifeCycle.is(name)) {\n            return;\n        }\n\n        this.lifeCycle.set(name);\n\n        if (typeof this['_' + name] === 'function') {\n            this['_' + name].call(this);\n        }\n\n        if (typeof this[name] === 'function') {\n            this[name].call(this);\n        }\n    };\n\n    /**\n     * 初始化\n     *\n     * @param {Object} options 初始化参数\n     */\n    Node.prototype.init = function (options) {\n        this._init(options);\n        this._callHook('inited');\n    };\n\n    /**\n     * 初始化行为\n     *\n     * @param {Object} options 初始化参数\n     */\n    Node.prototype._init = function (options) {\n        this.owner = options.owner;\n        this.parent = options.parent;\n        this.parentComponent = this.parent instanceof Component\n            ? this.parent\n            : this.parent && this.parent.parentComponent;\n\n        this.scope = options.scope;\n        this.aNode = this.aNode || options.aNode;\n        this.el = options.el;\n\n        this.id = (this.el && this.el.id)\n            || (this.aNode && this.aNode.id)\n            || guid();\n    };\n\n    /**\n     * 创建完成后的行为\n     */\n    Node.prototype._created = function () {\n        if (!this.el) {\n            this.el = document.getElementById(this.id);\n        }\n    };\n\n    /**\n     * 通知自己和childs完成attached状态\n     *\n     * @protected\n     */\n    Node.prototype._noticeAttached = function () {\n        each(this.childs, function (child) {\n            child._noticeAttached();\n        });\n\n        this._callHook('created');\n        this._callHook('attached');\n    };\n\n    /**\n     * 销毁释放元素\n     */\n    Node.prototype.dispose = function () {\n        this._dispose();\n        this._callHook('disposed');\n    };\n\n    /**\n     * 销毁释放元素行为\n     */\n    Node.prototype._dispose = function () {\n        this.el = null;\n        this.owner = null;\n        this.scope = null;\n        this.aNode = null;\n        this.parent = null;\n        this.parentComponent = null;\n    };\n\n    /**\n     * 计算表达式的结果\n     *\n     * @param {Object} expr 表达式对象\n     * @param {boolean} escapeInterpHtml 是否要对插值结果进行html转义\n     * @return {*}\n     */\n    Node.prototype.evalExpr = function (expr, escapeInterpHtml) {\n        return evalExpr(expr, this.scope, this.owner, escapeInterpHtml);\n    };\n\n    /**\n     * 创建桩的html\n     *\n     * @inner\n     * @param {Node} node 节点对象\n     * @return {string}\n     */\n    function genStumpHTML(node) {\n        return '<script type=\"text/san\" id=\"' + node.id + '\"></script>';\n    }\n\n    /**\n     * 文本节点类\n     *\n     * @inner\n     * @class\n     * @param {Object} options 初始化参数\n     * @param {ANode} options.aNode 抽象信息节点对象\n     * @param {Component} options.owner 所属的组件对象\n     */\n    function TextNode(options) {\n        Node.call(this, options);\n    }\n\n    inherits(TextNode, Node);\n\n    /**\n     * 初始化行为\n     *\n     * @param {Object} options 初始化参数\n     */\n    TextNode.prototype._init = function (options) {\n        Node.prototype._init.call(this, options);\n\n        // from el\n        if (this.el) {\n            this.aNode.isText = true;\n            this.aNode.textExpr = parseText(this.el.innerHTML);\n            this.parent._pushChildANode(this.aNode);\n        }\n\n        var segs = this.aNode.textExpr.segs;\n        this._static = segs.length === 1 && segs[0].type === ExprType.STRING;\n    };\n\n    /**\n     * 初始化完成后的行为\n     */\n    TextNode.prototype._inited = function () {\n        if (this.el) {\n            this._callHook('created');\n\n            if (this.el.parentNode) {\n                this._callHook('attached');\n            }\n        }\n    };\n\n    /**\n     * 生成文本节点的HTML\n     *\n     * @return {string}\n     */\n    TextNode.prototype.genHTML = function () {\n        var defaultText = isFEFFBeforeStump ? '\\uFEFF' : '';\n        return (this.evalExpr(this.aNode.textExpr, 1) || defaultText)\n            + (this._static ? '' : genStumpHTML(this));\n    };\n\n    /**\n     * 刷新文本节点的内容\n     */\n    TextNode.prototype.update = function () {\n        var node = this.el.previousSibling;\n\n        if (node && node.nodeType === 3) {\n            var textProp = typeof node.textContent === 'string'\n                ? 'textContent'\n                : 'data';\n            node[textProp] = this.evalExpr(this.aNode.textExpr);\n        }\n        else {\n            this.el.insertAdjacentHTML(\n                'beforebegin',\n                this.evalExpr(this.aNode.textExpr, 1)\n            );\n        }\n    };\n\n    /**\n     * 视图更新函数\n     *\n     * @param {Array} changes 数据变化信息\n     */\n    TextNode.prototype.updateView = function (changes) {\n        each(changes, function (change) {\n            if (changeExprCompare(change.expr, this.aNode.textExpr, this.scope)) {\n                this.update();\n                return false;\n            }\n        }, this);\n    };\n\n\n    // #region Element\n\n    /**\n     * 元素存储对象\n     *\n     * @inner\n     * @type {Object}\n     */\n    var elementContainer = {};\n\n    /**\n     * 元素类\n     *\n     * @inner\n     * @class\n     * @param {Object} options 初始化参数\n     * @param {ANode} options.aNode 抽象信息节点对象\n     * @param {Component} options.owner 所属的组件对象\n     */\n    function Element(options) {\n        this.childs = [];\n        this.listeners = {};\n\n        Node.call(this, options);\n    }\n\n    inherits(Element, Node);\n\n    /**\n     * 初始化行为\n     *\n     * @param {Object} options 初始化参数\n     */\n    Element.prototype._init = function (options) {\n        Node.prototype._init.call(this, options);\n\n        if (this.el) {\n            this._initFromEl(options);\n        }\n\n        elementContainer[this.id] = this;\n\n        this.tagName = this.tagName || this.aNode.tagName || 'div';\n        // ie8- 不支持innerHTML输出自定义标签\n        if (ie && ie < 9 && /^[a-z0-9]+-[a-z0-9]+$/i.test(this.tagName)) {\n            this.tagName = 'div';\n        }\n    };\n\n    /**\n     * 从已有的el进行初始化\n     */\n    Element.prototype._initFromEl = function () {\n        this.aNode = parseANodeFromEl(this.el);\n        this.parent._pushChildANode(this.aNode);\n        this.tagName = this.aNode.tagName;\n    };\n\n    /**\n     * 初始化完成后的行为\n     */\n    Element.prototype._inited = function () {\n        // ie 下，如果 option 没有 value 属性，select.value = xx 操作不会选中 option\n        // 所以没有设置 value 时，默认把 option 的内容作为 value\n        if (this.tagName === 'option'\n            && !this.aNode.props.get('value')\n            && this.aNode.childs[0]\n        ) {\n            this.aNode.props.push({\n                name: 'value',\n                expr: this.aNode.childs[0].textExpr\n            });\n        }\n\n        this.props = this.binds = this.aNode.props;\n        this._initPropHandlers();\n\n        if (this.el) {\n            this.tagName = this.el.tagName.toLowerCase();\n\n            compileChildsFromEl(this);\n            this._callHook('created');\n\n            if (this.el.parentNode) {\n                this._callHook('attached');\n            }\n        }\n    };\n\n    /**\n     * 创建元素DOM行为\n     */\n    Element.prototype._create = function () {\n        if (!this.el) {\n            this.el = createEl(this.tagName);\n            this.el.id = this.id;\n\n            this.props.each(function (prop) {\n                var value = this instanceof Component\n                    ? evalExpr(prop.expr, this.data, this)\n                    : this.evalExpr(prop.expr, 1);\n\n                var match = /^\\s+([a-z0-9_-]+)=(['\"])([^\\2]*)\\2$/.exec(\n                    getPropHandler(this, prop.name)\n                        .input\n                        .attr(this, prop.name, value)\n                );\n\n                if (match) {\n                    this.el.setAttribute(match[1], match[3]);\n                }\n            }, this);\n        }\n    };\n\n    /**\n     * 创建元素DOM\n     */\n    Element.prototype.create = function () {\n        if (!this.lifeCycle.is('created')) {\n            this._create();\n            this._callHook('created');\n        }\n    };\n\n    /**\n     * 完成创建元素DOM后的行为\n     */\n    Element.prototype._created = function () {\n        Node.prototype._created.call(this);\n        this._initSelfChanger();\n        this.bindEvents();\n    };\n\n    /**\n     * 处理自身变化时双绑的逻辑\n     *\n     * @private\n     */\n    Element.prototype._initSelfChanger = function () {\n        this.binds && this.binds.each(function (bindInfo) {\n            if (!bindInfo.x) {\n                return;\n            }\n\n            var outputer = bind(bindOutputer, this, bindInfo);\n            switch (bindInfo.name) {\n                case 'value':\n                    switch (this.tagName) {\n                        case 'input':\n                        case 'textarea':\n                            if (root.CompositionEvent) {\n                                this.on('compositionstart', function () {\n                                    this.composing = 1;\n                                });\n                                this.on('compositionend', function () {\n                                    this.composing = 0;\n\n                                    var event = document.createEvent('HTMLEvents');\n                                    event.initEvent('input', true, true);\n                                    this.dispatchEvent(event);\n                                });\n                            }\n\n                            this.on(\n                                ('oninput' in this.el) ? 'input' : 'propertychange',\n                                function (e) {\n                                    if (!this.composing) {\n                                        outputer(e);\n                                    }\n                                }\n                            );\n\n                            break;\n\n                        case 'select':\n                            this.on('change', outputer);\n                            break;\n                    }\n                    break;\n\n                case 'checked':\n                    switch (this.tagName) {\n                        case 'input':\n                            switch (this.el.type) {\n                                case 'checkbox':\n                                case 'radio':\n                                    this.on('click', outputer);\n                            }\n                    }\n                    break;\n            }\n\n        }, this);\n    };\n\n\n    /**\n     * HTML 属性和 DOM 操作属性的对照表\n     *\n     * @inner\n     * @const\n     * @type {Object}\n     */\n    var HTML_ATTR_PROP_MAP = {\n        'readonly': 'readOnly',\n        'cellpadding': 'cellPadding',\n        'cellspacing': 'cellSpacing',\n        'colspan': 'colSpan',\n        'rowspan': 'rowSpan',\n        'valign': 'vAlign',\n        'usemap': 'useMap',\n        'frameborder': 'frameBorder',\n        'for': 'htmlFor',\n        'class': 'className'\n    };\n\n    /**\n     * 默认的元素的属性设置的变换方法\n     *\n     * @inner\n     * @type {Object}\n     */\n    var defaultElementPropHandler = {\n        input: {\n            attr: function (element, name, value) {\n                if (value != null) {\n                    return ' ' + name + '=\"' + value + '\"';\n                }\n            },\n\n            prop: function (element, name, value) {\n                name = HTML_ATTR_PROP_MAP[name] || name;\n                if (svgTags[element.tagName]) {\n                    element.el.setAttribute(name, value);\n                }\n                else {\n                    element.el[name] = value;\n                }\n            }\n        },\n\n        output: function (element, bindInfo) {\n            element.scope.set(bindInfo.expr, element.el[bindInfo.name], {\n                target: {\n                    id: element.id,\n                    prop: bindInfo.name\n                }\n            });\n        }\n    };\n\n    /**\n     * 生成 bool 类型属性绑定操作的变换方法\n     *\n     * @inner\n     * @param {string} attrName 属性名\n     * @param {Array} tagNames 匹配的元素名\n     * @return {Object}\n     */\n    function genBoolPropHandler(attrName, tagNames) {\n        attrName = attrName.toLowerCase();\n\n        return {\n            input: {\n                attr: function (element, name, value) {\n                    // 因为元素的attr值必须经过html escape，否则可能有漏洞\n                    // 所以这里直接对假值字符串形式进行处理\n                    // NaN之类非主流的就先不考虑了\n                    if (value && value !== 'false' && value !== '0') {\n                        return ' ' + attrName + '=\"' + attrName + '\"';\n                    }\n                },\n\n                prop: function (element, name, value) {\n                    var propName = HTML_ATTR_PROP_MAP[attrName] || attrName;\n                    element.el[propName] = !!(value && value !== 'false' && value !== '0');\n                }\n            },\n\n            choose: function (element) {\n                if (contains(tagNames, element.tagName)) {\n                    return attrName;\n                }\n            }\n        };\n    }\n\n    /**\n     * 元素的属性设置的变换方法集合\n     *\n     * @inner\n     * @type {Array}\n     */\n    var elementPropHandlers = [\n        // 表单元素(input / button / textarea / select) 的 disabled\n        genBoolPropHandler('disabled', ['input', 'textarea', 'button', 'select']),\n\n        // 表单元素(input / textarea) 的 readonly\n        genBoolPropHandler('readonly', ['input', 'textarea']),\n\n        // 表单元素(input) 的 mutiple\n        genBoolPropHandler('mutiple', ['input']),\n\n        // input[type=checkbox] 的 checked bind handler\n        {\n            input: {\n                attr: function (element, name, value) {\n                    var bindValue = element.props.get('value');\n                    if (bindValue) {\n                        if (contains(value, element.evalExpr(bindValue.expr))) {\n                            return ' checked=\"checked\"';\n                        }\n                    }\n                },\n\n                prop: function (element, name, value) {\n                    var bindValue = element.props.get('value');\n                    if (bindValue) {\n                        if (contains(value, element.evalExpr(bindValue.expr))) {\n                            element.el.checked = true;\n                            return;\n                        }\n                    }\n\n                    element.el.checked = false;\n                }\n            },\n\n            output: function (element, bindInfo) {\n                var el = element.el;\n                element.scope[el.checked ? 'push' : 'remove'](bindInfo.expr, el.value);\n            },\n\n            choose: function (element) {\n                if (element.aNode) {\n                    var bindType = element.props.get('type');\n                    return element.tagName === 'input'\n                        && bindType && bindType.raw === 'checkbox'\n                        && 'checked';\n                }\n            }\n        },\n\n        // input[type=radio] 的 checked bind handler\n        {\n            input: {\n                attr: function (element, name, value) {\n                    var bindValue = element.props.get('value');\n                    if (bindValue) {\n                        if (value === element.evalExpr(bindValue.expr)) {\n                            return ' checked=\"checked\"';\n                        }\n                    }\n                },\n\n                prop: function (element, name, value) {\n                    var bindValue = element.props.get('value');\n                    if (bindValue) {\n                        if (value === element.evalExpr(bindValue.expr)) {\n                            element.el.checked = true;\n                            return;\n                        }\n                    }\n\n                    element.el.checked = false;\n                }\n            },\n\n            output: function (element, bindInfo) {\n                var el = element.el;\n                element.scope.set(bindInfo.expr, el.checked ? el.value : '', {\n                    target: {\n                        id: element.id,\n                        prop: bindInfo.name\n                    }\n                });\n            },\n\n            choose: function (element) {\n                if (element.aNode) {\n                    var bindType = element.props.get('type');\n                    return element.tagName === 'input'\n                        && bindType && bindType.raw === 'radio'\n                        && 'checked';\n                }\n            }\n        },\n\n        // option value bind handler，附加 selected\n        {\n            input: {\n                attr: function (element, name, value) {\n                    var attrStr = defaultElementPropHandler.input.attr(element, name, value);\n                    var parent = element.parent;\n                    var parentValueProp;\n\n                    if (parent.tagName === 'select'\n                        && (parentValueProp = parent.props.get('value'))\n                        && parent.evalExpr(parentValueProp.expr) === value\n                    ) {\n                        attrStr += ' selected';\n                    }\n\n                    return attrStr;\n                },\n\n                prop: defaultElementPropHandler.input.prop\n            },\n\n            choose: function (element) {\n                return 'option' === element.tagName && 'value';\n            }\n        },\n\n        // textarea 的 value bind handler\n        {\n            input: {\n                attr: function () {},\n\n                prop: function (element, name, value) {\n                    element.el[name] = value;\n                }\n            },\n\n            output: defaultElementPropHandler.output,\n\n            choose: function (element) {\n                return 'textarea' === element.tagName && 'value';\n            }\n        },\n\n        // style 的 bind handler\n        {\n            input: {\n                attr: function (element, name, value) {\n                    if (value) {\n                        return ' style=\"' + value + '\"';\n                    }\n                },\n\n                prop: function (element, name, value) {\n                    element.el.style.cssText = value;\n                }\n            },\n\n            choose: function () {\n                return 'style';\n            }\n        }\n    ];\n\n    /**\n     * 初始化元素属性操作的处理器\n     * 元素属性操作和具体名称可能不同，比如style操作的是style.cssText等等\n     * 所以需要一些 handler 做输入输出的属性名与值变换。这里就是初始化这些 handler\n     */\n    Element.prototype._initPropHandlers = function () {\n        this.propHandlers = {};\n        each(\n            elementPropHandlers,\n            function (propHandler) {\n                var name = propHandler.choose(this);\n                if (name) {\n                    this.propHandlers[name] = propHandler;\n                }\n            },\n            this\n        );\n    };\n\n    function getPropHandler(element, name) {\n        return element.propHandlers[name] || defaultElementPropHandler;\n    }\n\n    function bindOutputer(bindInfo) {\n        getPropHandler(this, bindInfo.name).output(this, bindInfo);\n    }\n\n    /**\n     * 将元素attach到页面\n     *\n     * @param {HTMLElement} parentEl 要添加到的父元素\n     * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n     */\n    Element.prototype.attach = function (parentEl, beforeEl) {\n        if (!this.lifeCycle.is('attached')) {\n            this._attach(parentEl, beforeEl);\n            this._noticeAttached();\n        }\n    };\n\n    /**\n     * 将元素attach到页面的行为\n     *\n     * @param {HTMLElement} parentEl 要添加到的父元素\n     * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n     */\n    Element.prototype._attach = function (parentEl, beforeEl) {\n        this.create();\n\n        this.el.innerHTML = elementGenChildsHTML(this);\n\n        if (parentEl) {\n            if (beforeEl) {\n                parentEl.insertBefore(this.el, beforeEl);\n            }\n            else {\n                parentEl.appendChild(this.el);\n            }\n        }\n    };\n\n    /**\n     * 普适事件监听函数\n     *\n     * @inner\n     * @param {Object} eventBind 绑定信息对象\n     * @param {Event} e 事件对象\n     */\n    function elementEventListener(eventBind, e) {\n        var args = [];\n        var expr = eventBind.expr;\n\n        each(expr.args, function (argExpr) {\n            args.push(argExpr.type === ExprType.ACCESSOR\n                    && argExpr.paths.length === 1\n                    && argExpr.paths[0].value === '$event'\n                ? (this instanceof Component ? e : e || window.event)\n                : this.evalExpr(argExpr)\n            );\n        }, this);\n\n        var owner = this.owner;\n        if (this instanceof Component && eventBind.isOwn) {\n            owner = this;\n        }\n\n        var method = owner[expr.name];\n        if (typeof method === 'function') {\n            method.apply(owner, args);\n        }\n    }\n\n    /**\n     * 绑定事件\n     */\n    Element.prototype.bindEvents = function () {\n        each(this.aNode.events, function (eventBind) {\n            this.on(eventBind.name, bind(elementEventListener, this, eventBind));\n        }, this);\n    };\n\n    /**\n     * 解除绑定事件\n     */\n    Element.prototype.unbindEvents = function () {\n        var listeners = this.listeners;\n\n        for (var key in listeners) {\n            if (listeners.hasOwnProperty(key)) {\n                this.un(key);\n            }\n        }\n\n        this.listeners = null;\n    };\n\n    /**\n     * 派发事件\n     *\n     * @param {string} name 事件名\n     * @param {Object} event 事件对象\n     */\n    Element.prototype.fire = function (name, event) {\n        each(this.listeners[name], function (listener) {\n            listener.call(this, event);\n        }, this);\n    };\n\n    /**\n     * 添加事件监听器\n     *\n     * @param {string} name 事件名\n     * @param {Function} listener 监听器\n     */\n    Element.prototype.on = function (name, listener) {\n        if (typeof listener === 'function') {\n            if (!this.listeners[name]) {\n                this.listeners[name] = [];\n            }\n            this.listeners[name].push(listener);\n\n            on(this.el, name, listener);\n        }\n    };\n\n    /**\n     * 移除事件监听器\n     *\n     * @param {string} name 事件名\n     * @param {Function=} listener 监听器\n     */\n    Element.prototype.un = function (name, listener) {\n        var nameListeners = this.listeners[name];\n        var len = nameListeners && nameListeners.length;\n\n        while (len--) {\n            var fn = nameListeners[len];\n            if (!listener || listener === fn) {\n                nameListeners.splice(len, 1);\n                un(this.el, name, fn);\n            }\n        }\n    };\n\n    /**\n     * 生成元素的html\n     *\n     * @return {string}\n     */\n    Element.prototype.genHTML = function () {\n        var buf = new StringBuffer();\n\n        elementGenStartHTML(this, buf);\n        buf.push(elementGenChildsHTML(this));\n        elementGenCloseHTML(this, buf);\n\n        return buf.toString();\n    };\n\n    /**\n     * 生成元素标签起始的html\n     *\n     * @inner\n     * @param {Element} element 元素\n     * @param {StringBuffer} stringBuffer html串存储对象\n     */\n    function elementGenStartHTML(element, stringBuffer) {\n        if (!element.tagName) {\n            return;\n        }\n\n        stringBuffer.push('<');\n        stringBuffer.push(element.tagName);\n        stringBuffer.push(' id=\"');\n        stringBuffer.push(element.id);\n        stringBuffer.push('\"');\n\n        element.props.each(function (prop) {\n            var value = this instanceof Component\n                ? evalExpr(prop.expr, this.data, this)\n                : this.evalExpr(prop.expr, 1);\n\n            stringBuffer.push(\n                getPropHandler(this, prop.name)\n                    .input\n                    .attr(this, prop.name, value)\n                || ''\n            );\n        }, element);\n\n        stringBuffer.push('>');\n    }\n\n    /**\n     * 生成元素标签结束的html\n     *\n     * @inner\n     * @param {Element} element 元素\n     * @param {StringBuffer} stringBuffer html串存储对象\n     */\n    function elementGenCloseHTML(element, stringBuffer) {\n        var tagName = element.tagName;\n\n        if (!tagIsAutoClose(tagName)) {\n            stringBuffer.push('</');\n            stringBuffer.push(tagName);\n            stringBuffer.push('>');\n        }\n    }\n\n    /**\n     * 生成元素的子元素html\n     *\n     * @inner\n     * @param {Element} element 元素\n     * @return {string}\n     */\n    function elementGenChildsHTML(element) {\n        if (element.tagName === 'textarea') {\n            var valueProp = element.props.get('value');\n            return valueProp ? escapeHTML(element.evalExpr(valueProp.expr)) : '';\n        }\n\n        var buf = new StringBuffer();\n\n        each(element.aNode.childs, function (aNodeChild) {\n            var child = createNode(aNodeChild, element);\n            if (!this._static) {\n                element.childs.push(child);\n            }\n            buf.push(child.genHTML());\n        });\n\n        return buf.toString();\n    }\n\n    /**\n     * 设置元素属性\n     *\n     * @param {string} name 属性名称\n     * @param {*} value 属性值\n     */\n    Element.prototype.setProp = function (name, value) {\n        if (this.lifeCycle.is('created')) {\n            getPropHandler(this, name).input.prop(this, name, value);\n        }\n    };\n\n    /**\n     * 判断变更是否来源于元素，来源于元素时，视图更新需要阻断\n     *\n     * @inner\n     * @param {Object} change 变更对象\n     * @param {Element} element 元素\n     * @param {string?} propName 属性名，可选。需要精确判断是否来源于此属性时传入\n     * @return {boolean}\n     */\n    function isDataChangeByElement(change, element, propName) {\n        var changeTarget = change.option.target;\n        return changeTarget && changeTarget.id === element.id\n            && (!propName || changeTarget.prop === propName);\n    }\n\n    /**\n     * 视图更新函数\n     *\n     * @param {Array} changes 数据变化信息\n     */\n    Element.prototype.updateView = function (changes) {\n        this.props.each(function (prop) {\n            each(changes, function (change) {\n                if (!isDataChangeByElement(change, this, prop.name)\n                    && changeExprCompare(change.expr, prop.expr, this.scope)\n                ) {\n                    this.setProp(prop.name, this.evalExpr(prop.expr));\n                    return false;\n                }\n            }, this);\n        }, this);\n\n        each(this.childs, function (child) {\n            child.updateView(changes);\n        });\n    };\n\n\n    /**\n     * 将元素从页面上移除\n     */\n    Element.prototype.detach = function () {\n        if (this.lifeCycle.is('attached')) {\n            this._detach();\n            this._callHook('detached');\n        }\n    };\n\n    /**\n     * 将元素从页面上移除的行为\n     */\n    Element.prototype._detach = function () {\n        removeEl(this.el);\n    };\n\n    /**\n     * 销毁释放元素的行为\n     */\n    Element.prototype._dispose = function () {\n        this._disposeChilds();\n        this.detach();\n        this.unbindEvents();\n\n        this.el = null;\n        this.childs = null;\n\n        this.propHandlers = null;\n        this.props = null;\n        this.binds = null;\n        elementContainer[this.id] = null;\n        Node.prototype._dispose.call(this);\n    };\n\n    /**\n     * 销毁释放子元素的行为\n     */\n    Element.prototype._disposeChilds = function () {\n        each(this.childs, function (child) {\n            child.dispose();\n        });\n        this.childs.length = 0;\n    };\n\n    /**\n     * 添加子节点的 ANode\n     * 用于从 el 初始化时，需要将解析的元素抽象成 ANode，并向父级注册\n     *\n     * @param {ANode} aNode 抽象节点对象\n     */\n    Element.prototype._pushChildANode = function (aNode) {\n        this.aNode.childs.push(aNode);\n    };\n\n    /**\n     * slot 元素类\n     *\n     * @class\n     * @param {Object} options 初始化参数\n     */\n    function SlotElement(options) {\n        this.childs = [];\n        Node.call(this, options);\n    }\n\n    inherits(SlotElement, Node);\n\n    /**\n     * 初始化行为\n     *\n     * @param {Object} options 初始化参数\n     */\n    SlotElement.prototype._init = function (options) {\n        var nameBind = options.aNode.props.get('name');\n        this.name = nameBind ? nameBind.raw : '____';\n\n        var literalOwner = options.owner;\n        var givenSlots = literalOwner.aNode.givenSlots;\n        var givenChilds = givenSlots && givenSlots[this.name];\n\n\n        var aNode = new ANode();\n        if (givenChilds) {\n            aNode.childs = givenChilds;\n            options.owner = literalOwner.owner;\n            options.scope = literalOwner.scope;\n        }\n        else {\n            aNode.childs = options.aNode.childs.slice(0);\n        }\n\n        options.aNode = aNode;\n        Node.prototype._init.call(this, options);\n    };\n\n    /**\n     * 初始化完成后的行为\n     */\n    SlotElement.prototype._inited = function () {\n        this.owner.slotChilds.push(this);\n    };\n\n    /**\n     * 生成元素的html\n     *\n     * @return {string}\n     */\n    SlotElement.prototype.genHTML = function () {\n        return elementGenChildsHTML(this);\n    };\n\n    /**\n     * 隔离实际所属组件对其的视图更新调用。更新应由outer组件调用\n     */\n    SlotElement.prototype.updateView = function () {\n    };\n\n    /**\n     * 视图更新函数\n     *\n     * @param {Array} changes 数据变化信息\n     */\n    SlotElement.prototype.slotUpdateView = function (changes) {\n        each(this.childs, function (child) {\n            child.updateView(changes);\n        });\n    };\n\n    /**\n     * 销毁释放元素行为\n     */\n    SlotElement.prototype._dispose = function () {\n        Element.prototype._disposeChilds.call(this);\n        Node.prototype._dispose.call(this);\n    };\n\n\n    // #region Component\n\n    /**\n     * 组件类\n     *\n     * @class\n     * @param {Object} options 初始化参数\n     */\n    function Component(options) {\n        this.slotChilds = [];\n        this.data = new Model();\n        this.dataChanges = [];\n\n        Element.call(this, options);\n    }\n\n    inherits(Component, Element);\n\n    /**\n     * 初始化\n     *\n     * @param {Object} options 初始化参数\n     */\n    Component.prototype.init = function (options) {\n        this.filters = this.filters || this.constructor.filters || {};\n        this.computed = this.computed || this.constructor.computed || {};\n        this.messages = options.messages || this.messages || {};\n\n        // compile\n        this._compile();\n\n        if (!options.el) {\n            var protoANode = this.constructor.prototype.aNode;\n\n            if (options.aNode) {\n                var givenANode = options.aNode;\n\n                // 组件运行时传入的结构，做slot解析\n                var givenSlots = {};\n                each(givenANode.childs, function (child) {\n                    var slotName = '____';\n                    var slotBind = !child.isText && child.props.get('slot');\n                    if (slotBind) {\n                        slotName = slotBind.raw;\n                    }\n\n                    if (!givenSlots[slotName]) {\n                        givenSlots[slotName] = [];\n                    }\n\n                    givenSlots[slotName].push(child);\n                }, this);\n\n                this.aNode = new ANode({\n                    tagName: protoANode.tagName || givenANode.tagName,\n                    givenSlots: givenSlots,\n\n                    // 组件的实际结构应为template编译的结构\n                    childs: protoANode.childs,\n\n                    // 合并运行时的一些绑定和事件声明\n                    props: protoANode.props,\n                    binds: givenANode.props,\n                    events: givenANode.events.concat(protoANode.events),\n                    directives: givenANode.directives.concat(protoANode.directives)\n                });\n            }\n        }\n\n        this._callHook('compiled');\n\n\n        Element.prototype._init.call(this, options);\n        this.binds = this.aNode.binds || new IndexedList();\n        this.binds.each(function (bind) {\n            var expr = bind.expr;\n\n            // 当 text 解析只有一项时，要么就是 string，要么就是 interp\n            // interp 有可能是绑定到组件属性的表达式，不希望被 eval text 成 string\n            // 所以这里做个处理，只有一项时直接抽出来\n            if (expr.type === ExprType.TEXT && expr.segs.length === 1) {\n                expr = bind.expr = expr.segs[0];\n                if (expr.type === ExprType.INTERP && expr.filters.length === 0) {\n                    bind.expr = expr.expr;\n                }\n            }\n        });\n        this.props = this.aNode.props;\n\n        // init data\n        var initData = options.data\n            || (typeof this.initData === 'function' && this.initData());\n        for (var key in initData) {\n            if (initData.hasOwnProperty(key)) {\n                this.data.set(key, initData[key]);\n            }\n        }\n\n        this.scope && this.binds.each(function (bind) {\n            this.data.set(bind.name, this.evalExpr(bind.expr));\n        }, this);\n\n        this.computedDeps = {};\n        for (var expr in this.computed) {\n            if (!this.computedDeps[expr]) {\n                this._calcComputed(expr);\n            }\n        }\n\n        this._callHook('inited');\n    };\n\n    /**\n     * 计算 computed 属性的值\n     *\n     * @private\n     * @param {string} computedExpr computed表达式串\n     */\n    Component.prototype._calcComputed = function (computedExpr) {\n        var computedDeps = this.computedDeps[computedExpr];\n        if (!computedDeps) {\n            computedDeps = this.computedDeps[computedExpr] = {};\n        }\n\n        this.data.set(computedExpr, this.computed[computedExpr].call({\n            data: {\n                get: bind(function (expr) {\n                    if (expr) {\n                        if (!computedDeps[expr]) {\n                            computedDeps[expr] = 1;\n\n                            if (this.computed[expr]) {\n                                this._calcComputed(expr);\n                            }\n\n                            this.watch(expr, function () {\n                                this._calcComputed(computedExpr);\n                            });\n                        }\n\n                        return this.data.get(expr);\n                    }\n\n                    // #begin-ignore\n                    throw new Error('[SAN ERROR] call get method in computed need argument');\n                    // #end-ignore\n                }, this)\n            }\n        }));\n    };\n\n    /**\n     * 初始化完成后的行为\n     * 清空Element.prototype._inited的行为\n     */\n    Component.prototype._inited = function () {\n        this._initPropHandlers();\n\n        // 如果从el编译的，认为已经attach了，触发钩子\n        if (this._isInitFromEl) {\n            this._callHook('created');\n            this._callHook('attached');\n        }\n    };\n\n    // #begin-ignore\n    /**\n     * attach 完成后的行为\n     * 通知devtool\n     */\n    Component.prototype._attached = function () {\n        emitDevTool('comp-attached', this);\n    };\n\n    /**\n     * detach 完成后的行为\n     * 通知devtool\n     */\n    Component.prototype._detached = function () {\n        emitDevTool('comp-detached', this);\n    };\n\n    /**\n     * update 完成后的行为\n     * 通知devtool\n     */\n    Component.prototype._updated = function () {\n        emitDevTool('comp-updated', this);\n    };\n    // #end-ignore\n\n    /**\n     * 派发消息\n     * 组件可以派发消息，消息将沿着组件树向上传递，直到遇上第一个处理消息的组件\n     *\n     * @param {string} name 消息名称\n     * @param {*?} value 消息值\n     */\n    Component.prototype.dispatch = function (name, value) {\n        var parentComponent = this.parentComponent;\n\n        while (parentComponent) {\n            if (typeof parentComponent.messages[name] === 'function') {\n                parentComponent.messages[name].call(\n                    parentComponent,\n                    {target: this, value: value}\n                );\n                break;\n            }\n\n            parentComponent = parentComponent.parentComponent;\n        }\n    };\n\n    /**\n     * 获取带有 san-ref 指令的子组件引用\n     *\n     * @param {string} name 子组件的引用名\n     * @return {Component}\n     */\n    Component.prototype.ref = function (name) {\n        var refComponent;\n        var owner = this;\n\n        function childsTraversal(element) {\n            each(element.childs, function (child) {\n                if (child instanceof Component) {\n                    var refDirective = child.aNode.directives.get('ref');\n                    if (refDirective\n                        && evalExpr(refDirective.value, child.scope || owner.data, owner) === name\n                    ) {\n                        refComponent = child;\n                    }\n                }\n                else if (child instanceof Element) {\n                    childsTraversal(child);\n                }\n\n                return !refComponent;\n            });\n        }\n\n\n        childsTraversal(this);\n        each(this.slotChilds, function (slotChild) {\n            childsTraversal(slotChild);\n            return !refComponent;\n        });\n        return refComponent;\n    };\n\n    /**\n     * 从存在的 el 中编译抽象节点\n     */\n    Component.prototype._initFromEl = function () {\n        this._isInitFromEl = true;\n        this.aNode = parseANodeFromEl(this.el);\n        this.aNode.binds = this.aNode.props;\n        this.aNode.props = new IndexedList();\n\n        this.parent && this.parent._pushChildANode(this.aNode);\n        compileChildsFromEl(this);\n    };\n\n    /**\n     * 遍历和编译已有元素的孩子\n     *\n     * @inner\n     * @param {HTMLElement} element 已有元素\n     */\n    function compileChildsFromEl(element) {\n        var walker = new DOMChildsWalker(element.el);\n        var current;\n        while ((current = walker.current)) {\n            var child = createNodeByEl(current, element, walker);\n            if (child) {\n                element.childs.push(child);\n            }\n\n            walker.goNext();\n        }\n    }\n\n    /**\n     * 创建节点的工厂方法\n     *\n     * @inner\n     * @param {ANode} aNode 抽象节点\n     * @param {Node} parent 父亲节点\n     * @param {Model=} scope 所属数据环境\n     * @return {Node}\n     */\n    function createNode(aNode, parent, scope) {\n        var owner = parent instanceof Component ? parent : parent.owner;\n        // scope = scope || owner.data;\n        scope = scope || (parent instanceof Component ? parent.data : parent.scope);\n        var options = {\n            aNode: aNode,\n            owner: owner,\n            scope: scope,\n            parent: parent\n        };\n\n        if (aNode.isText) {\n            return new TextNode(options);\n        }\n\n        if (aNode.directives.get('if')) {\n            return new IfDirective(options);\n        }\n\n        if (aNode.directives.get('else')) {\n            return new ElseDirective(options);\n        }\n\n        if (aNode.directives.get('for')) {\n            return new ForDirective(options);\n        }\n\n        var ComponentType = owner.components[aNode.tagName];\n        if (ComponentType) {\n            return new ComponentType(options);\n        }\n\n        if (aNode.tagName === 'slot') {\n            return new SlotElement(options);\n        }\n\n        return new Element(options);\n    }\n\n    /**\n     * 通过存在的 el 创建节点的工厂方法\n     *\n     * @inner\n     * @param {HTMLElement} el 页面中存在的元素\n     * @param {Node} parent 父亲节点\n     * @param {DOMChildsWalker} elWalker 遍历元素的功能对象\n     * @return {Node}\n     */\n    function createNodeByEl(el, parent, elWalker) {\n        var owner = parent instanceof Component ? parent : parent.owner;\n\n        // find component class\n        var tagName = el.tagName.toLowerCase();\n        var ComponentClass = null;\n\n        if (tagName.indexOf('-') > 0) {\n            ComponentClass = owner.components[tagName];\n        }\n\n        var componentName = el.getAttribute('san-component');\n        if (componentName) {\n            ComponentClass = owner.components[componentName];\n        }\n\n        var option = {\n            owner: owner,\n            scope: owner.data,\n            parent: parent,\n            el: el,\n            elWalker: elWalker\n        };\n\n        // as Component\n        if (ComponentClass) {\n            return new ComponentClass(option);\n        }\n\n        // as normal Element\n        var childANode = parseANodeFromEl(el);\n        var stumpName = el.getAttribute('san-stump');\n        option.aNode = childANode;\n\n        if (childANode.directives.get('if') || stumpName === 'if') {\n            return new IfDirective(option);\n        }\n\n        if (childANode.directives.get('else') || stumpName === 'else') {\n            return new ElseDirective(option);\n        }\n\n        if (childANode.directives.get('for') || stumpName === 'for') {\n            return new ForDirective(option);\n        }\n\n        if (isStump(el)) {\n            // as TextNode\n            return new TextNode(option);\n        }\n\n        // as Element\n        return new Element(option);\n    }\n\n    /**\n     * 解析元素自身的 ANode\n     *\n     * @inner\n     * @param {HTMLElement} el 页面元素\n     * @return {ANode}\n     */\n    function parseANodeFromEl(el) {\n        var aNode = new ANode();\n        aNode.tagName = el.tagName.toLowerCase();\n\n        each(\n            el.attributes,\n            function (attr) {\n                integrateAttr(aNode, attr.name, attr.value, true);\n            }\n        );\n\n        return aNode;\n    }\n\n    /**\n     * 判断一个元素是不是桩\n     *\n     * @inner\n     * @param {HTMLElement} element 要判断的元素\n     * @return {boolean}\n     */\n    function isStump(element) {\n        return element.tagName === 'SCRIPT' && element.type === 'text/san';\n    }\n\n    /**\n     * 元素子节点遍历操作对象\n     *\n     * @inner\n     * @class\n     * @param {HTMLElement} el 要遍历的元素\n     */\n    function DOMChildsWalker(el) {\n        this.raw = [];\n        this.index = 0;\n\n        var child = el.firstChild;\n        while (child) {\n            if (child.nodeType === 1) {\n                this.raw.push(child);\n            }\n\n            child = child.nextSibling;\n        }\n\n        this.current = this.raw[this.index];\n        this.next = this.raw[this.index + 1];\n    }\n\n    /**\n     * 往下走一个元素\n     */\n    DOMChildsWalker.prototype.goNext = function () {\n        this.current = this.raw[++this.index];\n        this.next = this.raw[this.index + 1];\n    };\n\n    var componentPropExtra = [\n        {name: 'class', expr: parseText(\"{{class ? ' ' + class : ''}}\")},\n        {name: 'style', expr: parseText(\"{{style ? ';' + style : ''}}\")}\n    ];\n\n\n    /**\n     * 模板编译行为\n     *\n     * @private\n     */\n    Component.prototype._compile = function () {\n        var ComponentClass = this.constructor;\n        var proto = ComponentClass.prototype;\n\n        // pre define components class\n        if (!proto._isComponentsReady) {\n            proto.components = proto.components || ComponentClass.components || {};\n            var components = proto.components;\n\n            for (var key in components) {\n                var componentClass = components[key];\n\n                if (typeof componentClass === 'object') {\n                    components[key] = defineComponent(componentClass);\n                }\n                else if (componentClass === 'self') {\n                    components[key] = ComponentClass;\n                }\n            }\n\n            proto._isComponentsReady = 1;\n        }\n\n\n        // pre compile template\n        if (!proto.aNode) {\n            proto.aNode = new ANode();\n            var tpl = proto.template || ComponentClass.template;\n\n            if (tpl) {\n                var aNode = parseTemplate(tpl);\n                var firstChild = aNode.childs[0];\n\n                // #begin-ignore\n                if (aNode.childs.length !== 1 || firstChild.isText) {\n                    throw new Error('[SAN FATAL] template must have a root element.');\n                }\n                // #end-ignore\n\n                proto.aNode = firstChild;\n                if (firstChild.tagName === 'template') {\n                    firstChild.tagName = null;\n                }\n\n                each(firstChild.events, function (item) {\n                    item.isOwn = 1;\n                });\n\n                each(componentPropExtra, function (extra) {\n                    var prop = firstChild.props.get(extra.name);\n                    if (prop) {\n                        prop.expr.segs.push(extra.expr.segs[0]);\n                    }\n                    else {\n                        firstChild.props.push({\n                            name: extra.name,\n                            expr: extra.expr\n                        });\n                    }\n                });\n            }\n        }\n    };\n\n    /**\n     * 初始化自身变化时，监听数据变化的行为\n     *\n     * @private\n     */\n    Component.prototype._initSelfChanger = function () {\n        if (!this.dataChanger) {\n            this.dataChanger = bind(this._dataChanger, this);\n            this.data.onChange(this.dataChanger);\n        }\n    };\n\n    /**\n     * 视图更新函数\n     */\n    Component.prototype.updateView = function (changes) {\n        if (this.lifeCycle.is('disposed')) {\n            return;\n        }\n\n        each(changes, function (change) {\n            var changeExpr = change.expr;\n\n            this.binds.each(function (bindItem) {\n                var relation;\n                var setExpr = bindItem.name;\n                var updateExpr = bindItem.expr;\n\n                if (!isDataChangeByElement(change, this, setExpr)\n                    && (relation = changeExprCompare(changeExpr, updateExpr, this.scope))\n                ) {\n                    if (relation > 2) {\n                        setExpr = {\n                            type: ExprType.ACCESSOR,\n                            paths: [{\n                                type: ExprType.STRING,\n                                value: setExpr\n                            }].concat(changeExpr.paths.slice(updateExpr.paths.length))\n                        };\n                        updateExpr = changeExpr;\n                    }\n\n                    this.data.set(setExpr, this.evalExpr(updateExpr), {\n                        target: {\n                            id: this.owner.id\n                        }\n                    });\n                }\n            }, this);\n        }, this);\n\n\n        var dataChanges = this.dataChanges;\n        if (dataChanges.length) {\n            this.dataChanges = [];\n            this.props.each(function (prop) {\n                each(dataChanges, function (change) {\n                    if (changeExprCompare(change.expr, prop.expr, this.data)) {\n                        this.setProp(\n                            prop.name,\n                            evalExpr(prop.expr, this.data, this)\n                        );\n\n                        return false;\n                    }\n                }, this);\n            }, this);\n\n\n            each(this.childs, function (child) {\n                child.updateView(dataChanges);\n            });\n\n            each(this.slotChilds, function (child) {\n                child.slotUpdateView(dataChanges);\n            });\n\n            this._callHook('updated');\n\n            if (this.owner) {\n                each(dataChanges, function (change) {\n                    this.binds.each(function (bindItem) {\n                        var changeExpr = change.expr;\n                        if (bindItem.x\n                            && !isDataChangeByElement(change, this.owner)\n                            && changeExprCompare(changeExpr, parseExpr(bindItem.name), this.data)\n                        ) {\n                            var updateScopeExpr = bindItem.expr;\n                            if (changeExpr.paths.length > 1) {\n                                updateScopeExpr = {\n                                    type: ExprType.ACCESSOR,\n                                    paths: bindItem.expr.paths.concat(changeExpr.paths.slice(1))\n                                };\n                            }\n\n                            this.scope.set(\n                                updateScopeExpr,\n                                evalExpr(changeExpr, this.data, this),\n                                {\n                                    target: {\n                                        id: this.id,\n                                        prop: bindItem.name\n                                    }\n                                }\n                            );\n                        }\n                    }, this);\n                }, this);\n                this.owner.updateView();\n            }\n\n        }\n    };\n\n\n    /**\n     * 组件内部监听数据变化的函数\n     *\n     * @private\n     * @param {Object} change 数据变化信息\n     */\n    Component.prototype._dataChanger = function (change) {\n        var len = this.dataChanges.length;\n\n        if (!len) {\n            nextTick(this.updateView, this);\n        }\n\n        while (len--) {\n            switch (changeExprCompare(change.expr, this.dataChanges[len].expr)) {\n                case 1:\n                case 2:\n                    if (change.type === ModelChangeType.SET) {\n                        this.dataChanges.splice(len, 1);\n                    }\n            }\n        }\n\n        this.dataChanges.push(change);\n    };\n\n\n    /**\n     * 监听组件的数据变化\n     *\n     * @param {string} dataName 变化的数据项\n     * @param {Function} listener 监听函数\n     */\n    Component.prototype.watch = function (dataName, listener) {\n        var dataExpr = parseExpr(dataName);\n\n        this.data.onChange(bind(function (change) {\n            if (changeExprCompare(change.expr, dataExpr, this.data)) {\n                listener.call(this, evalExpr(dataExpr, this.data, this), change);\n            }\n        }, this));\n    };\n\n    /**\n     * 组件销毁的行为\n     */\n    Component.prototype._dispose = function () {\n        // 这里不用挨个调用 dispose 了，因为 childs 释放链会调用的\n        this.slotChilds = null;\n\n        this.data.unChange();\n        this.dataChanger = null;\n        this.dataChanges.length = 0;\n\n        this.data = null;\n        Element.prototype._dispose.call(this);\n    };\n\n\n    /**\n     * if 指令处理类\n     *\n     * @class\n     * @param {Object} options 初始化参数\n     */\n    function IfDirective(options) {\n        Element.call(this, options);\n    }\n\n    inherits(IfDirective, Element);\n\n    /**\n     * 创建 if 指令对应条件为 true 时对应的元素\n     *\n     * @param {IfDirective} ifElement if指令元素\n     * @return {Element}\n     */\n    function createIfDirectiveChild(ifElement) {\n        var aNode = ifElement.aNode;\n        var childANode = new ANode({\n            childs: aNode.childs,\n            props: aNode.props,\n            events: aNode.events,\n            tagName: aNode.tagName,\n            directives: (new IndexedList()).concat(aNode.directives)\n        });\n\n        childANode.directives.remove('if');\n        childANode.directives.remove('else');\n\n        return createNode(childANode, ifElement);\n    }\n\n    /**\n     * 从已有的el进行初始化的\n     *\n     * @param {Object} options 初始化参数\n     */\n    IfDirective.prototype._initFromEl = function (options) {\n        if (options.el) {\n            if (options.el.getAttribute('san-stump') === 'if') {\n                var aNode = parseTemplate(options.el.innerHTML);\n                aNode = aNode.childs[0];\n                this.aNode = aNode;\n            }\n            else {\n                this.el = null;\n                this._create();\n                options.el.parentNode.insertBefore(this.el, options.el.nextSibling);\n\n                options.el.removeAttribute('san-if');\n                var child = createNodeByEl(options.el, this, options.elWalker);\n\n                this.childs.push(child);\n                this.aNode.childs = child.aNode.childs.slice(0);\n            }\n\n            if (options.ifDirective) {\n                this.aNode.directives.push(options.ifDirective);\n            }\n\n            this.parent._pushChildANode(this.aNode);\n        }\n    };\n\n    /**\n     * 创建元素DOM行为\n     */\n    IfDirective.prototype._create = function () {\n        if (!this.el) {\n            this.el = document.createElement('script');\n            this.el.type = 'text/san';\n            this.el.id = this.id;\n        }\n    };\n\n    /**\n     * 初始化完成后的行为\n     */\n    IfDirective.prototype._inited = function () {\n        if (this.el) {\n            this._callHook('created');\n            if (this.el.parentNode) {\n                this._callHook('attached');\n            }\n        }\n    };\n\n    IfDirective.prototype._created = Node.prototype._created;\n\n    /**\n     * 生成html\n     *\n     * @return {string}\n     */\n    IfDirective.prototype.genHTML = function () {\n        var buf = new StringBuffer();\n\n        if (this.evalExpr(this.aNode.directives.get('if').value)) {\n            var child = createIfDirectiveChild(this);\n            this.childs[0] = child;\n            buf.push(child.genHTML());\n        }\n\n        if (isFEFFBeforeStump && !buf.length) {\n            buf.push('\\uFEFF');\n        }\n        buf.push(genStumpHTML(this));\n\n        return buf.toString();\n    };\n\n    /**\n     * 视图更新函数\n     *\n     * @param {Array} changes 数据变化信息\n     */\n    IfDirective.prototype.updateView = function (changes) {\n        var ifExpr = this.aNode.directives.get('if').value;\n        var child = this.childs[0];\n\n        if (this.evalExpr(ifExpr)) {\n            if (child) {\n                child.updateView(changes);\n            }\n            else {\n                child = createIfDirectiveChild(this);\n                child.attach(this.el.parentNode, this.el);\n                this.childs[0] = child;\n            }\n        }\n        else {\n            this._disposeChilds();\n        }\n    };\n\n    /**\n     * 清空添加子节点的 ANode 的行为\n     * 从 el 初始化时，不接受子节点的 ANode信息\n     */\n    IfDirective.prototype._pushChildANode = function () {};\n\n    /**\n     * else 指令处理类\n     * 不做具体事情，直接归约成 if\n     *\n     * @class\n     * @param {Object} options 初始化参数\n     */\n    function ElseDirective(options) {\n        var parentChilds = options.parent.childs;\n\n        var len = parentChilds.length;\n        while (len--) {\n            var child = parentChilds[len];\n\n            if (child instanceof IfDirective) {\n                var directiveValue = {\n                    name: 'if',\n                    value: {\n                        type: ExprType.UNARY,\n                        expr: child.aNode.directives.get('if').value\n                    }\n                };\n                options.aNode.directives.push(directiveValue);\n\n                if (options.el) {\n                    if (isStump(options.el)) {\n                        options.el.setAttribute('san-stump', 'if');\n                    }\n                    else {\n                        options.el.removeAttribute('san-else');\n                    }\n                }\n\n                options.ifDirective = directiveValue;\n                return new IfDirective(options);\n            }\n\n            // #begin-ignore\n            if (!(child instanceof TextNode)) {\n                throw new Error('[SAN FATEL] else not match if.');\n            }\n            // #end-ignore\n        }\n    }\n\n    /**\n     * for 指令处理类\n     *\n     * @class\n     * @param {Object} options 初始化参数\n     */\n    function ForDirective(options) {\n        Element.call(this, options);\n    }\n\n    inherits(ForDirective, Element);\n\n    /**\n     * 清空添加子节点的 ANode 的行为\n     * 从 el 初始化时，不接受子节点的 ANode信息\n     */\n    ForDirective.prototype._pushChildANode = function () {};\n\n    ForDirective.prototype._created = Node.prototype._created;\n\n    /**\n     * 生成html\n     *\n     * @param {boolean} onlyChilds 是否只生成列表本身html，不生成stump部分\n     * @return {string}\n     */\n    ForDirective.prototype.genHTML = function (onlyChilds) {\n        var buf = new StringBuffer();\n\n        each(\n            this.evalExpr(this.aNode.directives.get('for').list),\n            function (item, i) {\n                var child = createForDirectiveChild(this, item, i);\n                this.childs.push(child);\n                buf.push(child.genHTML());\n            },\n            this\n        );\n\n        if (!onlyChilds) {\n            if (isFEFFBeforeStump && !buf.length) {\n                buf.push('\\uFEFF');\n            }\n            buf.push(genStumpHTML(this));\n        }\n\n        return buf.toString();\n    };\n\n    /**\n     * 从已有的el进行初始化\n     *\n     * @param {Object} options 初始化参数\n     */\n    ForDirective.prototype._initFromEl = function (options) {\n        if (options.el) {\n            while (1) {\n                var current = options.elWalker.current;\n                if (current.getAttribute('san-stump') === 'for') {\n                    var aNode = parseTemplate(current.innerHTML);\n                    aNode = aNode.childs[0];\n                    this.aNode = aNode;\n                    break;\n                }\n                else {\n                    current.removeAttribute('san-for');\n                    var child = createNodeByEl(current, this, options.elWalker);\n                    this.childs.push(child);\n                }\n\n                var next = options.elWalker.next;\n                if (next && (next.getAttribute('san-for') || next.getAttribute('san-stump') === 'for')) {\n                    options.elWalker.goNext();\n                }\n                else {\n                    break;\n                }\n            }\n\n            this.parent._pushChildANode(this.aNode);\n        }\n    };\n\n    /**\n     * 初始化完成后的行为\n     */\n    ForDirective.prototype._inited = function () {\n        if (this.el) {\n            this._callHook('created');\n            if (this.el.parentNode) {\n                this._callHook('attached');\n            }\n        }\n    };\n\n    /**\n     * 将元素attach到页面的行为\n     *\n     * @param {HTMLElement} parentEl 要添加到的父元素\n     * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n     */\n    ForDirective.prototype._attach = function (parentEl, beforeEl) {\n        this.create();\n        if (parentEl) {\n            if (beforeEl) {\n                parentEl.insertBefore(this.el, beforeEl);\n            }\n            else {\n                parentEl.appendChild(this.el);\n            }\n        }\n\n        this.el.insertAdjacentHTML('beforebegin', this.genHTML(1));\n    };\n\n    /**\n     * 将元素从页面上移除的行为\n     */\n    ForDirective.prototype._detach = function () {\n        this._disposeChilds();\n        removeEl(this.el);\n    };\n\n    /**\n     * 创建元素DOM行为\n     */\n    ForDirective.prototype._create = function () {\n        if (!this.el) {\n            this.el = document.createElement('script');\n            this.el.type = 'text/san';\n            this.el.id = this.id;\n        }\n    };\n\n    /**\n     * 创建 for 指令元素的子元素\n     *\n     * @inner\n     * @param {ForDirective} forElement for 指令元素对象\n     * @param {*} item 子元素对应数据\n     * @param {number} index 子元素对应序号\n     * @return {Element}\n     */\n    function createForDirectiveChild(forElement, item, index) {\n        var forDirective = forElement.aNode.directives.get('for');\n        var itemScope = new Model(forElement.scope);\n        itemScope.set(forDirective.item, item);\n        itemScope.set(forDirective.index, index);\n\n        function exprResolve(expr) {\n            // 这里是各种操作方法用的，只能是ExprType.ACCESSOR\n            if (expr.paths[0].value === forDirective.item) {\n                return {\n                    type: ExprType.ACCESSOR,\n                    paths: forDirective.list.paths.concat(\n                        {\n                            type: ExprType.NUMBER,\n                            value: itemScope.get(forDirective.index)\n                        },\n                        expr.paths.slice(1)\n                    )\n                };\n            }\n\n            var resolvedExpr = {\n                type: ExprType.ACCESSOR,\n                paths: []\n            };\n            each(expr.paths, function (item) {\n                resolvedExpr.paths.push(\n                    item.type === ExprType.ACCESSOR\n                        && item.paths[0].value === forDirective.index\n                    ? {\n                        type: ExprType.NUMBER,\n                        value: itemScope.get(forDirective.index)\n                    }\n                    : item\n                );\n            });\n            return resolvedExpr;\n        }\n\n        each(\n            ['set', 'remove', 'unshift', 'shift', 'push', 'pop', 'splice'],\n            function (method) {\n                var rawFn = forElement.scope[method];\n                itemScope[method] = function (expr) {\n                    expr = exprResolve(parseExpr(expr));\n\n                    rawFn.apply(\n                        forElement.scope,\n                        [expr].concat(Array.prototype.slice.call(arguments, 1))\n                    );\n                };\n            }\n        );\n\n        var aNode = forElement.aNode;\n        var directiveANode = new ANode({\n            childs: aNode.childs,\n            props: aNode.props,\n            events: aNode.events,\n            tagName: aNode.tagName,\n            directives: (new IndexedList()).concat(aNode.directives)\n        });\n\n        directiveANode.directives.remove('for');\n\n        return createNode(directiveANode, forElement, itemScope);\n    }\n\n\n    /**\n     * 视图更新函数\n     */\n    ForDirective.prototype.updateView = function (changes) {\n        var childsChanges = [];\n        each(this.childs, function () {\n            childsChanges.push([]);\n        });\n\n        var repaintAll = 0;\n        var forDirective = this.aNode.directives.get('for');\n        each(changes, function (change) {\n            var relation = changeExprCompare(change.expr, forDirective.list, this.scope);\n\n            if (!relation) {\n                // 无关时，直接传递给子元素更新，列表本身不需要动\n                each(childsChanges, function (childChanges) {\n                    childChanges.push(change);\n                });\n            }\n            else if (relation > 2) {\n                // 变更表达式是list绑定表达式的子项\n                // 只需要对相应的子项进行更新\n                var changePaths = change.expr.paths;\n                var forLen = forDirective.list.paths.length;\n\n                change = extend({}, change);\n                change.expr = {\n                    type: ExprType.ACCESSOR,\n                    paths: [\n                        {value: forDirective.item, type: ExprType.STRING}\n                    ].concat(changePaths.slice(forLen + 1))\n                };\n\n                var changeIndex = +this.evalExpr(changePaths[forLen]);\n                Model.prototype.set.call(\n                    this.childs[changeIndex].scope,\n                    change.expr,\n                    change.value,\n                    {silence: true}\n                );\n                childsChanges[changeIndex].push(change);\n            }\n            else if (change.type === ModelChangeType.SET) {\n                // 变更表达式是list绑定表达式本身或母项的重新设值\n                // 此时需要更新整个列表\n                this._disposeChilds();\n                repaintAll = 1;\n            }\n            else if (relation === 2 && change.type === ModelChangeType.SPLICE) {\n                // 变更表达式是list绑定表达式本身数组的SPLICE操作\n                // 此时需要删除部分项，创建部分项\n                var changeStart = change.index;\n                var deleteCount = change.deleteCount;\n\n                var lengthChange = {\n                    type: ModelChangeType.SET,\n                    option: change.option,\n                    expr: {\n                        type: ExprType.ACCESSOR,\n                        paths: change.expr.paths.concat({\n                            type: ExprType.STRING,\n                            value: 'length'\n                        })\n                    }\n                };\n                var indexChange = {\n                    type: ModelChangeType.SET,\n                    option: change.option,\n                    expr: {\n                        type: ExprType.ACCESSOR,\n                        paths: [{\n                            type: ExprType.STRING,\n                            value: forDirective.index\n                        }]\n                    }\n                };\n\n                var insertionsLen = change.insertions.length;\n                each(this.childs, function (child, index) {\n                    childsChanges[index].push(lengthChange);\n\n                    // update child index\n                    if (index >= changeStart + deleteCount) {\n                        childsChanges[index].push(indexChange);\n                        Model.prototype.set.call(\n                            child.scope,\n                            indexChange.expr,\n                            index - deleteCount + insertionsLen,\n                            {silence: true}\n                        );\n                    }\n                }, this);\n\n                var spliceArgs = [changeStart, deleteCount];\n                var childsChangesSpliceArgs = [changeStart, deleteCount];\n                each(change.insertions, function (insertion, index) {\n                    spliceArgs.push(createForDirectiveChild(this, insertion, changeStart + index));\n                    childsChangesSpliceArgs.push([]);\n                }, this);\n\n                each(this.childs.splice.apply(this.childs, spliceArgs), function (child) {\n                    child.dispose();\n                });\n                childsChanges.splice.apply(childsChanges, childsChangesSpliceArgs);\n            }\n\n            return !repaintAll;\n        }, this);\n\n\n        if (repaintAll) {\n            // 整个列表都需要重新刷新\n            this.el.insertAdjacentHTML('beforebegin', this.genHTML(1));\n            this._noticeAttached();\n        }\n        else {\n            // 对相应的项进行更新\n            // 如果不存在则直接创建，如果存在则调用更新函数\n            var len = this.childs.length;\n            var attachStump = this;\n\n            while (len--) {\n                var child = this.childs[len];\n                if (child.lifeCycle.is('attached')) {\n                    child.updateView(childsChanges[len]);\n                }\n                else {\n                    child.attach(attachStump.el.parentNode, attachStump.el);\n                }\n\n                attachStump = child;\n            }\n        }\n    };\n\n\n    /* eslint-disable */\n    if (isFEFFBeforeStump) {\n        IfDirective.prototype.attached =\n        TextNode.prototype.attached =\n        ForDirective.prototype.attached = function () {\n            // 移除节点桩元素前面的空白 FEFF 字符\n            if (this.el) {\n                var headingBlank = this.el.previousSibling;\n\n                if (headingBlank && headingBlank.nodeType === 3) {\n                    var textProp = typeof headingBlank.textContent === 'string'\n                        ? 'textContent'\n                        : 'data';\n                    var text = headingBlank[textProp];\n\n                    if (!text || text === '\\uFEFF') {\n                        removeEl(headingBlank);\n                    }\n                }\n            }\n        };\n    }\n    /* eslint-enable */\n\n    /**\n     * 创建组件类\n     *\n     * @param {Object} proto 组件类的方法表\n     * @return {Function}\n     */\n    function defineComponent(proto) {\n        function ComponentClass(option) {\n            Component.call(this, option);\n        }\n\n        ComponentClass.prototype = proto;\n        inherits(ComponentClass, Component);\n\n        return ComponentClass;\n    }\n\n    // #region exports\n    var san = {\n        /**\n         * san版本号\n         *\n         * @type {string}\n         */\n        version: '3.0.3-rc.20',\n\n        /**\n         * 组件基类\n         *\n         * @type {Function}\n         */\n        Component: Component,\n\n        /**\n         * 创建组件类\n         *\n         * @param {Object} proto 组件类的方法表\n         * @return {Function}\n         */\n        defineComponent: defineComponent,\n\n        /**\n         * 解析 template\n         *\n         * @inner\n         * @param {string} source template 源码\n         * @return {ANode}\n         */\n        parseTemplate: parseTemplate,\n\n        /**\n         * 解析表达式\n         *\n         * @param {string} source 源码\n         * @return {Object}\n         */\n        parseExpr: parseExpr,\n\n        /**\n         * 表达式类型枚举\n         *\n         * @const\n         * @type {Object}\n         */\n        ExprType: ExprType,\n\n        /**\n         * 生命周期类\n         *\n         * @class\n         */\n        LifeCycle: LifeCycle,\n\n        /**\n         * 在下一个更新周期运行函数\n         *\n         * @param {Function} fn 要运行的函数\n         */\n        nextTick: nextTick,\n\n        /**\n         * 构建类之间的继承关系\n         *\n         * @param {Function} subClass 子类函数\n         * @param {Function} superClass 父类函数\n         */\n        inherits: inherits,\n\n        /**\n         * 是否开启调试。开启调试时 devtool 会工作\n         *\n         * @type {boolean}\n         */\n        debug: true\n    };\n\n\n    // export\n    if (typeof exports === 'object' && typeof module === 'object') {\n        // For CommonJS\n        exports = module.exports = san;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        // For AMD\n        define('san', [], san);\n    }\n    else {\n        // For <script src=\"...\"\n        root.san = san;\n    }\n\n    // #begin-ignore\n    /**\n     * 给 devtool 发通知消息\n     *\n     * @inner\n     * @param {string} name 消息名称\n     * @param {*} arg 消息参数\n     */\n    function emitDevTool(name, arg) {\n        if (san.debug && root.__san_devtool__) {\n            root.__san_devtool__.emit(name, arg);\n        }\n    }\n\n    emitDevTool('san', san);\n    // #end-ignore\n})(this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/san/dist/san.source.js\n// module id = 1\n// module chunks = 2","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"san-router\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"san-router\"] = factory();\n\telse\n\t\troot[\"san-router\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 6);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = resolveURL;\n\nvar _parseUrl = __webpack_require__(1);\n\nvar _parseUrl2 = _interopRequireDefault(_parseUrl);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * 将 URL 中相对路径部分展开\n *\n * @param {string} source 要展开的url\n * @param {string} base 当前所属环境的url\n * @return {string}\n */\nfunction resolveURL(source, base) {\n    var sourceLoc = (0, _parseUrl2.default)(source);\n    var baseLoc = (0, _parseUrl2.default)(base);\n\n    var sourcePath = sourceLoc.path;\n    if (sourcePath.indexOf('/') === 0) {\n        return source;\n    }\n\n    var sourceSegs = sourcePath.split('/');\n    var baseSegs = baseLoc.path.split('/');\n    baseSegs.pop();\n\n    for (var i = 0; i < sourceSegs.length; i++) {\n        var seg = sourceSegs[i];\n        switch (seg) {\n            case '..':\n                baseSegs.pop();\n                break;\n            case '.':\n                break;\n            default:\n                baseSegs.push(seg);\n        }\n    }\n\n    if (baseSegs[0] !== '') {\n        baseSegs.unshift('');\n    }\n\n    return baseSegs.join('/') + (sourceLoc.queryString ? '?' + sourceLoc.queryString : '');\n} /**\n   * san-router\n   * Copyright 2017 Baidu Inc. All rights reserved.\n   *\n   * @file 将 URL 中相对路径部分展开\n   * @author errorrik\n   */\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = parseURL;\n/**\n * san-router\n * Copyright 2017 Baidu Inc. All rights reserved.\n *\n * @file 解析URL\n * @author errorrik\n */\n\n/**\n * 解析URL，返回包含path、query、queryString的对象\n *\n * @param {string} url 要解析的url\n * @return {Object}\n */\nfunction parseURL(url) {\n    var result = {};\n\n    // parse hash\n    result.hash = '';\n    var hashStart = url.indexOf('#');\n    if (hashStart >= 0) {\n        result.hash = url.slice(hashStart + 1);\n        url = url.slice(0, hashStart);\n    }\n\n    // parse query\n    result.queryString = '';\n    var query = {};\n    result.query = query;\n    var queryStart = url.indexOf('?');\n    if (queryStart >= 0) {\n        result.queryString = url.slice(queryStart + 1);\n        url = url.slice(0, queryStart);\n\n        result.queryString.split('&').forEach(function (querySeg) {\n            // 考虑到有可能因为未处理转义问题，\n            // 导致value中存在**=**字符，因此不使用`split`函数\n            var equalIndex = querySeg.indexOf('=');\n            var value = '';\n            if (equalIndex > 0) {\n                value = querySeg.slice(equalIndex + 1);\n                querySeg = querySeg.slice(0, equalIndex);\n            }\n\n            var key = decodeURIComponent(querySeg);\n            value = decodeURIComponent(value);\n\n            // 已经存在这个参数，且新的值不为空时，把原来的值变成数组\n            if (query.hasOwnProperty(key)) {\n                query[key] = [].concat(query[key], value);\n            } else {\n                query[key] = value;\n            }\n        });\n    }\n\n    // left path\n    result.path = url;\n\n    return result;\n}\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nnterprise RIA)\nopyright 2013 Baidu Inc. All rights reserved.\nnignore\nfile 提供事件相关操作的基类\nauthor otakustay\nn\nvar _Event = __webpack_require__(7);\n\nvar _Event2 = _interopRequireDefault(_Event);\n\nvar _EventQueue = __webpack_require__(8);\n\nvar _EventQueue2 = _interopRequireDefault(_EventQueue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar EVENT_POOL = Symbol('eventPool');\n\n/**\n * 提供事件相关操作的基类\n *\n * 可以让某个类继承此类，获得事件的相关功能：\n *\n * ```js\n * function MyClass() {\n *     // 此处可以不调用EventTarget构造函数\n * }\n *\n * inherits(MyClass, EventTarget);\n *\n * let instance = new MyClass();\n * instance.on('foo', executeFoo);\n * instance.fire('foo', { bar: 'Hello World' });\n * ```\n *\n * 当然也可以使用`Object.create`方法：\n *\n * ```js\n * let instance = Object.create(EventTarget.prototype);\n * instance.on('foo', executeFoo);\n * instance.fire('foo', { bar: 'Hello World' });\n * ```\n *\n * 还可以使用`enable`方法让一个静态的对象拥有事件功能：\n *\n * ```js\n * let instance = {}\n * EventTarget.enable(instance);\n *\n * // 同样可以使用事件\n * instance.on('foo', executeFoo);\n * instance.fire('foo', { bar: 'Hello World' });\n * ```\n */\n\nvar EventTarget = function () {\n    function EventTarget() {\n        _classCallCheck(this, EventTarget);\n    }\n\n    _createClass(EventTarget, [{\n        key: 'on',\n\n\n        /**\n         * 注册一个事件处理函数\n         *\n         * @param {string} type 事件的类型\n         * @param {Function | boolean} fn 事件的处理函数，\n         * 特殊地，如果此参数为`false`，将被视为特殊的事件处理函数，\n         * 其效果等于`preventDefault()`及`stopPropagation()`\n         * @param {*} [thisObject] 事件执行时`this`对象\n         * @param {Object} [options] 事件相关配置项\n         * @param {boolean} [options.once=false] 控制事件仅执行一次\n         */\n        value: function on(type, fn, thisObject, options) {\n            if (!this[EVENT_POOL]) {\n                this[EVENT_POOL] = Object.create(null);\n            }\n\n            if (!this[EVENT_POOL][type]) {\n                this[EVENT_POOL][type] = new _EventQueue2.default();\n            }\n\n            var queue = this[EVENT_POOL][type];\n\n            options = Object.assign({}, options);\n            if (thisObject) {\n                options.thisObject = thisObject;\n            }\n\n            queue.add(fn, options);\n        }\n\n        /**\n         * 注册一个仅执行一次的处理函数\n         *\n         * @param {string} type 事件的类型\n         * @param {Function} fn 事件的处理函数\n         * @param {*} [thisObject] 事件执行时`this`对象\n         * @param {Object} [options] 事件相关配置项\n         */\n\n    }, {\n        key: 'once',\n        value: function once(type, fn, thisObject, options) {\n            options = Object.assign({}, options);\n            options.once = true;\n            this.on(type, fn, thisObject, options);\n        }\n\n        /**\n         * 注销一个事件处理函数\n         *\n         * @param {string} type 事件的类型，如果值为`*`仅会注销通过`*`为类型注册的事件，并不会将所有事件注销\n         * @param {Function} [handler] 事件的处理函数，无此参数则注销`type`指定类型的所有事件处理函数\n         * @param {*} [thisObject] 处理函数对应的`this`对象，无此参数则注销`type`与`handler`符合要求，且无`this`对象的处理函数\n         */\n\n    }, {\n        key: 'un',\n        value: function un(type, handler, thisObject) {\n            if (!this[EVENT_POOL] || !this[EVENT_POOL][type]) {\n                return;\n            }\n\n            var queue = this[EVENT_POOL][type];\n            queue.remove(handler, thisObject);\n        }\n\n        /**\n         * 触发指定类型的事件\n         *\n         * 3个重载：\n         *\n         * - `.fire(type)`\n         * - `.fire(args)`\n         * - `.fire(type, args)`\n         *\n         * @param {string | Object} type 事件类型\n         * @param {*} [args] 事件对象\n         * @return {Event} 事件传递过程中的`Event`对象\n         */\n\n    }, {\n        key: 'fire',\n        value: function fire(type, args) {\n            // 只提供一个对象作为参数，则是`.fire(args)`的形式，需要加上type\n            /* eslint-disable prefer-rest-params */\n            if (arguments.length === 1 && (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object') {\n                args = type;\n                type = args.type;\n            }\n            /* eslint-enable prefer-rest-params */\n\n            if (!type) {\n                throw new Error('No event type specified');\n            }\n\n            if (type === '*') {\n                throw new Error('Cannot fire global event');\n            }\n\n            var event = args instanceof _Event2.default ? args : new _Event2.default(type, args);\n            event.target = this;\n\n            // 在此处可能没有[EVENT_POOL]`，这是指对象整个就没初始化，\n            // 即一个事件也没注册过就`fire`了，这是正常现象\n            if (this[EVENT_POOL] && this[EVENT_POOL][type]) {\n                var queue = this[EVENT_POOL][type];\n                queue.execute(event, this);\n            }\n\n            // 同时也有可能在上面执行标准事件队列的时候，把这个`EventTarget`给销毁了，\n            // 此时[EVENT_POOL]`就没了，这种情况是正常的不能抛异常，要特别处理\n            if (this[EVENT_POOL] && this[EVENT_POOL]['*']) {\n                var globalQueue = this[EVENT_POOL]['*'];\n                globalQueue.execute(event, this);\n            }\n\n            return event;\n        }\n\n        /**\n         * 销毁所有事件\n         */\n\n    }, {\n        key: 'destroyEvents',\n        value: function destroyEvents() {\n            if (!this[EVENT_POOL]) {\n                return;\n            }\n\n            for (var name in this[EVENT_POOL]) {\n                if (this[EVENT_POOL][name]) {\n                    this[EVENT_POOL][name].dispose();\n                }\n            }\n\n            this[EVENT_POOL] = null;\n        }\n    }]);\n\n    return EventTarget;\n}();\n\nexports.default = EventTarget;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _main = __webpack_require__(6);\n\nvar _resolveUrl = __webpack_require__(0);\n\nvar _resolveUrl2 = _interopRequireDefault(_resolveUrl);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * san-router\n * Copyright 2017 Baidu Inc. All rights reserved.\n *\n * @file 路由链接的 San 组件\n * @author errorrik\n */\n\nexports.default = {\n    template: '<a href=\"{{href}}\" onclick=\"return false;\" on-click=\"clicker($event)\" target=\"{{target}}\" class=\"{{class}}\" style=\"{{style}}\"><slot></slot></a>',\n\n    clicker: function clicker(e) {\n        var href = this.data.get('href');\n\n        if (typeof href === 'string') {\n            _main.router.locator.redirect(href.replace(/^#/, ''));\n        }\n\n        e.preventDefault();\n    },\n\n\n    computed: {\n        href: function href() {\n            var url = this.data.get('to');\n            if (typeof url !== 'string') {\n                return;\n            }\n\n            var href = (0, _resolveUrl2.default)(url, _main.router.locator.current);\n            if (_main.router.mode === 'hash') {\n                href = '#' + href;\n            }\n\n            return href;\n        }\n    }\n};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _EventTarget2 = __webpack_require__(2);\n\nvar _EventTarget3 = _interopRequireDefault(_EventTarget2);\n\nvar _resolveUrl = __webpack_require__(0);\n\nvar _resolveUrl2 = _interopRequireDefault(_resolveUrl);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * san-router\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2017 Baidu Inc. All rights reserved.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file hash 模式地址监听器\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author errorrik\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n/**\n * 获取当前URL\n *\n * @return {string}\n */\nfunction getLocation() {\n    // Firefox下`location.hash`存在自动解码的情况，\n    // 比如hash的值是**abc%3def**，\n    // 在Firefox下获取会成为**abc=def**\n    // 为了避免这一情况，需要从`location.href`中分解\n    var index = location.href.indexOf('#');\n    var url = index < 0 ? '/' : location.href.slice(index + 1);\n\n    return url;\n}\n\nvar HASHCHANGE_HANDLER_KEY = Symbol('hashchange_handler_key');\n\n/**\n * hash 模式地址监听器\n *\n * @class\n */\n\nvar Locator = function (_EventTarget) {\n    _inherits(Locator, _EventTarget);\n\n    /**\n     * 构造函数\n     */\n    function Locator() {\n        _classCallCheck(this, Locator);\n\n        var _this = _possibleConstructorReturn(this, (Locator.__proto__ || Object.getPrototypeOf(Locator)).call(this));\n\n        _this.current = getLocation();\n        _this.referrer = '';\n\n        _this[HASHCHANGE_HANDLER_KEY] = function () {\n            _this.redirect(getLocation());\n        };\n        return _this;\n    }\n\n    /**\n     * 开始监听 url 变化\n     */\n\n\n    _createClass(Locator, [{\n        key: 'start',\n        value: function start() {\n            window.addEventListener('hashchange', this[HASHCHANGE_HANDLER_KEY], false);\n        }\n\n        /**\n         * 停止监听\n         */\n\n    }, {\n        key: 'stop',\n        value: function stop() {\n            window.removeEventListener('hashchange', this[HASHCHANGE_HANDLER_KEY], false);\n        }\n\n        /**\n         * 重定向\n         *\n         * @param {string} url 重定向的地址\n         * @param {Object?} options 重定向的行为配置\n         * @param {boolean?} options.force 是否强制刷新\n         */\n\n    }, {\n        key: 'redirect',\n        value: function redirect(url) {\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { force: false };\n\n            url = (0, _resolveUrl2.default)(url, this.current);\n            var referrer = this.current;\n\n            var isChanged = url !== referrer;\n            if (isChanged) {\n                this.referrer = referrer;\n                this.current = url;\n                location.hash = url;\n            } else {\n                referrer = this.referrer;\n            }\n\n            if ((isChanged || options.force) && !options.silent) {\n                this.fire('redirect', { url: url, referrer: referrer });\n            }\n        }\n\n        /**\n         * 刷新当前 url\n         */\n\n    }, {\n        key: 'reload',\n        value: function reload() {\n            this.redirect(this.current, { force: true });\n        }\n    }]);\n\n    return Locator;\n}(_EventTarget3.default);\n\nexports.default = Locator;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _EventTarget2 = __webpack_require__(2);\n\nvar _EventTarget3 = _interopRequireDefault(_EventTarget2);\n\nvar _resolveUrl = __webpack_require__(0);\n\nvar _resolveUrl2 = _interopRequireDefault(_resolveUrl);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * san-router\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2017 Baidu Inc. All rights reserved.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file html5 模式地址监听器\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author errorrik\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n/**\n * 获取当前URL\n *\n * @return {string}\n */\nfunction getLocation() {\n    return location.pathname + location.search;\n}\n\nvar POPSTATE_HANDLER_KEY = Symbol('popstate_handler_key');\n\n/**\n * html5 模式地址监听器\n *\n * @class\n */\n\nvar Locator = function (_EventTarget) {\n    _inherits(Locator, _EventTarget);\n\n    /**\n     * 构造函数\n     */\n    function Locator() {\n        _classCallCheck(this, Locator);\n\n        var _this = _possibleConstructorReturn(this, (Locator.__proto__ || Object.getPrototypeOf(Locator)).call(this));\n\n        _this.current = getLocation();\n        _this.referrer = '';\n\n        _this[POPSTATE_HANDLER_KEY] = function () {\n            _this.referrer = _this.current;\n            _this.current = getLocation();\n\n            _this.fire('redirect', {\n                url: _this.current,\n                referrer: _this.referrer\n            });\n        };\n        return _this;\n    }\n\n    /**\n     * 开始监听 url 变化\n     */\n\n\n    _createClass(Locator, [{\n        key: 'start',\n        value: function start() {\n            window.addEventListener('popstate', this[POPSTATE_HANDLER_KEY]);\n        }\n\n        /**\n         * 停止监听\n         */\n\n    }, {\n        key: 'stop',\n        value: function stop() {\n            window.removeEventListener('popstate', this[POPSTATE_HANDLER_KEY]);\n        }\n\n        /**\n         * 重定向\n         *\n         * @param {string} url 重定向的地址\n         * @param {Object?} options 重定向的行为配置\n         * @param {boolean?} options.force 是否强制刷新\n         */\n\n    }, {\n        key: 'redirect',\n        value: function redirect(url) {\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { force: false };\n\n            url = (0, _resolveUrl2.default)(url, this.current);\n            var referrer = this.current;\n\n            var isChanged = url !== referrer;\n\n            if (isChanged) {\n                this.referrer = referrer;\n                this.current = url;\n\n                history.pushState({}, '', url);\n            }\n\n            if ((isChanged || options.force) && !options.silent) {\n                this.fire('redirect', { url: url, referrer: referrer });\n            }\n        }\n\n        /**\n         * 刷新当前 url\n         */\n\n    }, {\n        key: 'reload',\n        value: function reload() {\n            this.fire('redirect', {\n                url: this.current,\n                referrer: this.referrer\n            });\n        }\n    }]);\n\n    return Locator;\n}(_EventTarget3.default);\n\nexports.default = Locator;\n\n\nLocator.isSupport = 'pushState' in window.history;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Link = exports.router = exports.Router = exports.version = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nsan-router\nopyright 2017 Baidu Inc. All rights reserved.\nnfile 主模块\nauthor errorrik\nn\nvar _hash = __webpack_require__(4);\n\nvar _hash2 = _interopRequireDefault(_hash);\n\nvar _html = __webpack_require__(5);\n\nvar _html2 = _interopRequireDefault(_html);\n\nvar _parseUrl = __webpack_require__(1);\n\nvar _parseUrl2 = _interopRequireDefault(_parseUrl);\n\nvar _link = __webpack_require__(3);\n\nvar _link2 = _interopRequireDefault(_link);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar routeID = 0x5942b;\nvar guid = function guid() {\n    return (++routeID).toString();\n};\n\n/**\n * 版本号\n *\n * @type {string}\n */\nvar version = exports.version = '1.0.1';\n\n/**\n * 路由器类\n *\n * @class\n */\n\nvar Router = exports.Router = function () {\n    /**\n     * 构造函数\n     *\n     * @param {Object?} options 初始化参数\n     * @param {string?} options.mode 路由模式，hash | html5\n     */\n    function Router() {\n        var _this = this;\n\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            _ref$mode = _ref.mode,\n            mode = _ref$mode === undefined ? 'hash' : _ref$mode;\n\n        _classCallCheck(this, Router);\n\n        this.routes = [];\n        this.routeAlives = [];\n\n        this.locatorRedirectHandler = function (e) {\n            var url = (0, _parseUrl2.default)(e.url);\n\n            for (var i = 0; i < _this.routes.length; i++) {\n                var routeItem = _this.routes[i];\n                var match = routeItem.rule.exec(url.path);\n\n                if (match) {\n                    // fill query\n                    var keys = routeItem.keys || [];\n                    for (var j = 1; j < match.length; j++) {\n                        url.query[keys[j] || j] = match[j];\n                    }\n\n                    // fill referrer\n                    url.referrer = e.referrer;\n\n                    _this.doRoute(routeItem, url);\n                    return;\n                }\n            }\n\n            var len = _this.routeAlives.length;\n            while (len--) {\n                _this.routeAlives[len].component.dispose();\n                _this.routeAlives.splice(len, 1);\n            }\n        };\n\n        this.setMode(mode);\n    }\n\n    /**\n     * 执行路由\n     *\n     * @private\n     * @param {Object} routeItem 路由项\n     * @param {Object} e 路由信息\n     */\n\n\n    _createClass(Router, [{\n        key: 'doRoute',\n        value: function doRoute(routeItem, e) {\n            var isUpdateAlive = false;\n            var len = this.routeAlives.length;\n\n            while (len--) {\n                var routeAlive = this.routeAlives[len];\n\n                if (routeAlive.id === routeItem.id) {\n                    routeAlive.component.data.set('route', e);\n                    routeAlive.component._callHook('route');\n                    isUpdateAlive = true;\n                } else {\n                    routeAlive.component.dispose();\n                    this.routeAlives.splice(len, 1);\n                }\n            }\n\n            if (!isUpdateAlive) {\n                if (routeItem.Component) {\n                    var component = new routeItem.Component();\n                    component.data.set('route', e);\n                    component._callHook('route');\n\n                    var targetEl = document.querySelector(routeItem.target);\n                    targetEl && component.attach(targetEl);\n\n                    this.routeAlives.push({\n                        component: component,\n                        id: routeItem.id\n                    });\n                } else {\n                    routeItem.handler.call(this, e);\n                }\n            }\n        }\n\n        /**\n         * 添加路由项\n         * 当规则匹配时，路由将优先将Component渲染到target中。如果没有包含Component，则执行handler函数\n         *\n         * @private\n         * @param {Object} routeItem 路由项\n         * @param {string|RegExp} routeItem.rule 路由规则\n         * @param {Function?} routeItem.handler 路由函数\n         * @param {Function?} routeItem.Component 路由组件\n         * @param {string} routeItem.target 路由组件要渲染到的目标位置\n         */\n\n    }, {\n        key: 'add',\n        value: function add(_ref2) {\n            var rule = _ref2.rule,\n                handler = _ref2.handler,\n                _ref2$target = _ref2.target,\n                target = _ref2$target === undefined ? '#main' : _ref2$target,\n                Component = _ref2.Component;\n\n            var keys = [''];\n\n            if (typeof rule === 'string') {\n                // 没用path-to-regexp，暂时不提供这么多功能支持\n                var regText = rule.replace(/\\/:([a-z0-9_-]+)(?=\\/|$)/g, function (match, key) {\n                    keys.push(key);\n                    return '/([a-z0-9_-]+)';\n                });\n\n                rule = new RegExp('^' + regText + '$', 'i');\n            }\n\n            if (!(rule instanceof RegExp)) {\n                throw new Error('Rule must be string or RegExp!');\n            }\n\n            var id = guid();\n            this.routes.push({ id: id, rule: rule, handler: handler, keys: keys, target: target, Component: Component });\n\n            return this;\n        }\n\n        /**\n         * 启动路由功能\n         */\n\n    }, {\n        key: 'start',\n        value: function start() {\n            if (!this.isStarted) {\n                this.isStarted = true;\n                this.locator.on('redirect', this.locatorRedirectHandler);\n                this.locator.start();\n                this.locator.reload();\n            }\n\n            return this;\n        }\n\n        /**\n         * 停止路由功能\n         */\n\n    }, {\n        key: 'stop',\n        value: function stop() {\n            this.locator.un('redirect', this.locatorRedirectHandler);\n            this.locator.stop();\n            this.isStarted = false;\n\n            return this;\n        }\n\n        /**\n         * 设置路由模式\n         *\n         * @param {string} mode 路由模式，hash | html5\n         */\n\n    }, {\n        key: 'setMode',\n        value: function setMode(mode) {\n            mode = mode.toLowerCase();\n            if (this.mode === mode) {\n                return;\n            }\n\n            this.mode = mode;\n\n            var restart = false;\n            if (this.isStarted) {\n                this.stop();\n                restart = true;\n            }\n\n            switch (mode) {\n                case 'hash':\n                    this.locator = new _hash2.default();\n                    break;\n                case 'html5':\n                    this.locator = new _html2.default();\n            }\n\n            if (restart) {\n                this.start();\n            }\n\n            return this;\n        }\n    }]);\n\n    return Router;\n}();\n\n/**\n * 默认的路由器实例\n *\n * @type {Router}\n */\n\n\nvar router = exports.router = new Router();\n\n/**\n * 路由链接的 San 组件\n *\n * @class\n */\nexports.Link = _link2.default;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * mini-event\n * Copyright 2013 Baidu Inc. All rights reserved.\n *\n * @ignore\n * @file 事件对象类\n * @author otakustay\n */\n\nvar isObject = function isObject(target) {\n    return Object.prototype.toString.call(target) === '[object Object]';\n};\n\n// 复制事件属性的时候不复制这几个\nvar EVENT_PROPERTY_BLACK_LIST = new Set(['type', 'target', 'preventDefault', 'isDefaultPrevented', 'stopPropagation', 'isPropagationStopped', 'stopImmediatePropagation', 'isImmediatePropagationStopped']);\n\n/**\n * 事件对象类\n */\n\nvar Event = function () {\n\n    /**\n     * 构造函数\n     *\n     * 3个重载：\n     *      - `new Event(type)`\n     *      - `new Event(args)`\n     *      - `new Event(type, args)`\n     * 只提供一个对象作为参数，则是`new Event(args)`的形式，需要加上type\n     *\n     * @param {string | *} [type] 事件类型\n     * @param {*} [args] 事件中的数据，如果为对象则将参数扩展到`Event`实例上。如果参数是非对象类型，则作为实例的`data`属性使用\n     */\n    function Event(type, args) {\n        _classCallCheck(this, Event);\n\n        // 如果第1个参数是对象，则就当是`new Event(args)`形式\n        if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object') {\n            args = type;\n            type = args.type;\n        }\n\n        if (isObject(args)) {\n            Object.assign(this, args);\n        } else if (args) {\n            this.data = args;\n        }\n\n        if (type) {\n            this.type = type;\n        }\n    }\n\n    /**\n     * 判断默认行为是否已被阻止\n     *\n     * @return {boolean}\n     */\n\n\n    _createClass(Event, [{\n        key: 'isDefaultPrevented',\n        value: function isDefaultPrevented() {\n            return false;\n        }\n\n        /**\n         * 阻止默认行为\n         */\n\n    }, {\n        key: 'preventDefault',\n        value: function preventDefault() {\n            this.isDefaultPrevented = function () {\n                return true;\n            };\n        }\n\n        /**\n         * 判断事件传播是否已被阻止\n         *\n         * @return {boolean}\n         */\n\n    }, {\n        key: 'isPropagationStopped',\n        value: function isPropagationStopped() {\n            return false;\n        }\n\n        /**\n         * 阻止事件传播\n         */\n\n    }, {\n        key: 'stopPropagation',\n        value: function stopPropagation() {\n            this.isPropagationStopped = function () {\n                return true;\n            };\n        }\n\n        /**\n         * 判断事件的立即传播是否已被阻止\n         *\n         * @return {boolean}\n         */\n\n    }, {\n        key: 'isImmediatePropagationStopped',\n        value: function isImmediatePropagationStopped() {\n            return false;\n        }\n\n        /**\n         * 立即阻止事件传播\n         */\n\n    }, {\n        key: 'stopImmediatePropagation',\n        value: function stopImmediatePropagation() {\n            this.isImmediatePropagationStopped = function () {\n                return true;\n            };\n\n            this.stopPropagation();\n        }\n\n        /**\n         * 从一个已有事件对象生成一个新的事件对象\n         *\n         * @static\n         * @param {Event} originalEvent 作为源的已有事件对象\n         * @param {Object} [options] 配置项\n         * @param {string} [options.type] 新事件对象的类型，不提供则保留原类型\n         * @param {boolean} [options.preserveData=false] 是否保留事件的信息\n         * @param {boolean} [options.syncState=false] 是否让2个事件状态同步，状态包括阻止传播、立即阻止传播和阻止默认行为\n         * @param {Object} [options.extend] 提供事件对象的更多属性\n         * @return {Event}\n         */\n\n    }], [{\n        key: 'fromEvent',\n        value: function fromEvent(originalEvent, options) {\n            var defaults = {\n                type: originalEvent.type,\n                preserveData: false,\n                syncState: false\n            };\n            options = Object.assign(defaults, options);\n\n            var newEvent = new Event(options.type);\n            // 如果保留数据，则把数据复制过去\n            if (options.preserveData) {\n                // 要去掉一些可能出现的杂质，因此不用`lib.extend`\n                for (var key in originalEvent) {\n                    if (originalEvent.hasOwnProperty(key) && !EVENT_PROPERTY_BLACK_LIST.has(key)) {\n                        newEvent[key] = originalEvent[key];\n                    }\n                }\n            }\n\n            // 如果有扩展属性，加上去\n            if (options.extend) {\n                Object.assign(newEvent, options.extend);\n            }\n\n            // 如果要同步状态，把和状态相关的方法挂接上\n            if (options.syncState) {\n                (function () {\n                    var preventDefault = newEvent.preventDefault;\n                    newEvent.preventDefault = function () {\n                        originalEvent.preventDefault();\n\n                        preventDefault.call(this);\n                    };\n\n                    var stopPropagation = originalEvent.stopPropagation;\n                    newEvent.stopPropagation = function () {\n                        originalEvent.stopPropagation();\n\n                        stopPropagation.call(this);\n                    };\n\n                    var stopImmediatePropagation = originalEvent.stopImmediatePropagation;\n                    newEvent.stopImmediatePropagation = function () {\n                        originalEvent.stopImmediatePropagation();\n\n                        stopImmediatePropagation.call(this);\n                    };\n                })();\n            }\n\n            return newEvent;\n        }\n\n        /**\n         * 将一个对象的事件代理到另一个对象\n         *\n         * @static\n         * @param {EventTarget} from 事件提供方\n         * @param {EventTarget | string} fromType 为字符串表示提供方事件类型；\n         * 为可监听对象则表示接收方，此时事件类型由第3个参数提供\n         * @param {EventTarget | string} to 为字符串则表示提供方和接收方事件类型一致，\n         * 由此参数作为事件类型；为可监听对象则表示接收方，此时第2个参数必须为字符串\n         * @param {string} [toType] 接收方的事件类型\n         * @param {Object} [options] 配置项\n         * @param {boolean} [options.preserveData=false] 是否保留事件的信息\n         * @param {boolean} [options.syncState=false] 是否让2个事件状态同步，状态包括阻止传播、立即阻止传播和阻止默认行为\n         * @param {Object} [options.extend] 提供事件对象的更多属性\n         *\n         * ```\n         * // 当`label`触发`click`事件时，自身也触发`click`事件\n         * Event.delegate(label, this, 'click');\n         *\n         * // 当`label`触发`click`事件时，自身触发`labelclick`事件\n         * Event.delegate(label, 'click', this, 'labelclick');\n         * ```\n         */\n\n    }, {\n        key: 'delegate',\n        value: function delegate(from, fromType, to, toType, options) {\n            // 重载：\n            //\n            // 1. `.delegate(from, fromType, to, toType)`\n            // 2. `.delegate(from, fromType, to, toType, options)`\n            // 3. `.delegate(from, to, type)`\n            // 4. `.delegate(from, to, type, options)\n\n            // 重点在于第2个参数的类型，如果为字符串则肯定是1或2，否则为3或4\n            var useDifferentType = typeof fromType === 'string';\n            var source = {\n                object: from,\n                type: useDifferentType ? fromType : to\n            };\n            var target = {\n                object: useDifferentType ? to : fromType,\n                type: useDifferentType ? toType : to\n            };\n            var config = useDifferentType ? options : toType;\n            config = Object.assign({ preserveData: false }, config);\n\n            // 如果提供方不能注册事件，或接收方不能触发事件，那就不用玩了\n            if (typeof source.object.on !== 'function' || typeof target.object.on !== 'function' || typeof target.object.fire !== 'function') {\n                return;\n            }\n\n            var delegator = function delegator(originalEvent) {\n                var event = Event.fromEvent(originalEvent, config);\n                // 修正`type`和`target`属性\n                event.type = target.type;\n                event.target = target.object;\n\n                target.object.fire(target.type, event);\n            };\n\n            source.object.on(source.type, delegator);\n        }\n    }]);\n\n    return Event;\n}();\n\nexports.default = Event;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * mini-event\n * Copyright 2013 Baidu Inc. All rights reserved.\n *\n * @ignore\n * @file 事件队列\n * @author otakustay\n */\n\nvar QUEUE = Symbol('queue');\n\n/**\n * 判断已有的一个事件上下文对象是否和提供的参数等同\n *\n * @param {Object} context 在队列中已有的事件上下文对象\n * @param {Function | boolean} handler 处理函数，可以是`false`\n * @param {Mixed} [thisObject] 处理函数的`this`对象\n * @return {boolean}\n * @ignore\n */\n/* eslint-disable fecs-arrow-body-style */\nvar isContextIdentical = function isContextIdentical(context, handler, thisObject) {\n    // `thisObject`为`null`和`undefined`时认为等同，所以用`==`\n    /* eslint-disable eqeqeq */\n    return context && context.handler === handler && context.thisObject == thisObject;\n    /* eslint-enable eqeqeq */\n};\n/* eslint-enable fecs-arrow-body-style */\n\n/**\n * 事件队列\n *\n * @constructor\n */\n\nvar EventQueue = function () {\n    function EventQueue() {\n        _classCallCheck(this, EventQueue);\n\n        this[QUEUE] = [];\n    }\n\n    /**\n     * 添加一个事件处理函数\n     *\n     * @param {Function | boolean} handler 处理函数，\n     * 可以传递`false`作为特殊的处理函数，参考{@link EventTarget#on}\n     * @param {Object} [options] 相关配置\n     * @param {Mixed} [options.thisObject] 执行处理函数时的`this`对象\n     * @param {boolean} [options.once=false] 设定函数仅执行一次\n     */\n\n\n    _createClass(EventQueue, [{\n        key: 'add',\n        value: function add(handler, options) {\n            if (handler !== false && typeof handler !== 'function') {\n                throw new Error('event handler must be a function or const false');\n            }\n\n            var wrapper = Object.assign({ handler: handler }, options);\n\n            for (var i = 0; i < this[QUEUE].length; i++) {\n                var context = this[QUEUE][i];\n                // 同样的处理函数，不同的`this`对象，相当于外面`bind`了一把再添加，\n                // 此时认为这是完全不同的2个处理函数，但`null`和`undefined`认为是一样的\n                if (isContextIdentical(context, handler, wrapper.thisObject)) {\n                    return;\n                }\n            }\n\n            this[QUEUE].push(wrapper);\n        }\n\n        /**\n         * 移除一个或全部处理函数\n         *\n         * @param {Function | boolean} [handler] 指定移除的处理函数，\n         * 如不提供则移除全部处理函数，可以传递`false`作为特殊的处理函数\n         * @param {Mixed} [thisObject] 指定函数对应的`this`对象，\n         * 不提供则仅移除没有挂载`this`对象的那些处理函数\n         */\n\n    }, {\n        key: 'remove',\n        value: function remove(handler, thisObject) {\n            // 如果没提供`handler`，则直接清空\n            if (!handler) {\n                this.clear();\n                return;\n            }\n\n            for (var i = 0; i < this[QUEUE].length; i++) {\n                var context = this[QUEUE][i];\n\n                if (isContextIdentical(context, handler, thisObject)) {\n                    // 为了让`execute`过程中调用的`remove`工作正常，\n                    // 这里不能用`splice`直接删除，仅设为`null`留下这个空间\n                    this[QUEUE][i] = null;\n\n                    // 完全符合条件的处理函数在`add`时会去重，因此这里肯定只有一个\n                    return;\n                }\n            }\n        }\n\n        /**\n         * 移除全部处理函数，如果队列执行时调用这个函数，会导致剩余的处理函数不再执行\n         */\n\n    }, {\n        key: 'clear',\n        value: function clear() {\n            this[QUEUE].length = 0;\n        }\n\n        /**\n         * 执行所有处理函数\n         *\n         * @param {Event} event 事件对象\n         * @param {Mixed} thisObject 函数执行时的`this`对象\n         */\n\n    }, {\n        key: 'execute',\n        value: function execute(event, thisObject) {\n            // 如果执行过程中销毁，`dispose`会把`this[QUEUE]`弄掉，所以这里留一个引用，\n            // 在`dispose`中会额外把数组清空，因此不用担心后续的函数会执行\n            var queue = this[QUEUE];\n            for (var i = 0; i < queue.length; i++) {\n                if (typeof event.isImmediatePropagationStopped === 'function' && event.isImmediatePropagationStopped()) {\n                    return;\n                }\n\n                var context = queue[i];\n\n                // 移除事件时设置为`null`，因此可能无值\n                if (!context) {\n                    continue;\n                }\n\n                var handler = context.handler;\n\n                // `false`等同于两个方法的调用\n                if (handler === false) {\n                    if (typeof event.preventDefault === 'function') {\n                        event.preventDefault();\n                    }\n                    if (typeof event.stopPropagation === 'function') {\n                        event.stopPropagation();\n                    }\n                } else {\n                    // 这里不需要做去重处理了，在`on`的时候会去重，因此这里不可能重复\n                    handler.call(context.thisObject || thisObject, event);\n                }\n\n                if (context.once) {\n                    this.remove(context.handler, context.thisObject);\n                }\n            }\n        }\n\n        /**\n         * 获取队列的长度\n         *\n         * @return {number}\n         */\n\n    }, {\n        key: 'length',\n        value: function length() {\n            return this[QUEUE].filter(function (item) {\n                return !!item;\n            }).length;\n        }\n\n        /**\n         * 销毁\n         *\n         * 如果在队列执行的过程中销毁了对象，则在对象销毁后，剩余的处理函数不会再执行了\n         */\n\n    }, {\n        key: 'dispose',\n        value: function dispose() {\n            // 在执行过程中被销毁的情况下，这里`length`置为0，循环就走不下去了\n            this.clear();\n            this[QUEUE] = null;\n        }\n    }]);\n\n    return EventQueue;\n}();\n\nexports.default = EventQueue;\n\n/***/ }\n/******/ ]);\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/san-router/dist/san-router.source.js\n// module id = 2\n// module chunks = 2","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function(){\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/babel-runtime/~/core-js/library/modules/_descriptors.js\n// module id = 3\n// module chunks = 2","module.exports = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/babel-runtime/~/core-js/library/modules/_is-object.js\n// module id = 6\n// module chunks = 2","var core = module.exports = {version: '2.4.0'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/babel-runtime/~/core-js/library/modules/_core.js\n// module id = 7\n// module chunks = 2","module.exports = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/babel-runtime/~/core-js/library/modules/_fails.js\n// module id = 8\n// module chunks = 2","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/babel-runtime/~/core-js/library/modules/_global.js\n// module id = 9\n// module chunks = 2","var anObject       = require('./_an-object')\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')\n  , toPrimitive    = require('./_to-primitive')\n  , dP             = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if(IE8_DOM_DEFINE)try {\n    return dP(O, P, Attributes);\n  } catch(e){ /* empty */ }\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n  if('value' in Attributes)O[P] = Attributes.value;\n  return O;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/babel-runtime/~/core-js/library/modules/_object-dp.js\n// module id = 10\n// module chunks = 2","module.exports = { \"default\": require(\"core-js/library/fn/object/define-property\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/babel-runtime/core-js/object/define-property.js\n// module id = 23\n// module chunks = 2","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (obj, key, value) {\n  if (key in obj) {\n    (0, _defineProperty2.default)(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/babel-runtime/helpers/defineProperty.js\n// module id = 24\n// module chunks = 2","require('../../modules/es6.object.define-property');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperty(it, key, desc){\n  return $Object.defineProperty(it, key, desc);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/babel-runtime/~/core-js/library/fn/object/define-property.js\n// module id = 25\n// module chunks = 2","module.exports = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/babel-runtime/~/core-js/library/modules/_a-function.js\n// module id = 26\n// module chunks = 2","var isObject = require('./_is-object');\nmodule.exports = function(it){\n  if(!isObject(it))throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/babel-runtime/~/core-js/library/modules/_an-object.js\n// module id = 27\n// module chunks = 2","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function(fn, that, length){\n  aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/* ...args */){\n    return fn.apply(that, arguments);\n  };\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/babel-runtime/~/core-js/library/modules/_ctx.js\n// module id = 28\n// module chunks = 2","var isObject = require('./_is-object')\n  , document = require('./_global').document\n  // in old IE typeof document.createElement is 'object'\n  , is = isObject(document) && isObject(document.createElement);\nmodule.exports = function(it){\n  return is ? document.createElement(it) : {};\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/babel-runtime/~/core-js/library/modules/_dom-create.js\n// module id = 29\n// module chunks = 2","var global    = require('./_global')\n  , core      = require('./_core')\n  , ctx       = require('./_ctx')\n  , hide      = require('./_hide')\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , IS_WRAP   = type & $export.W\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , expProto  = exports[PROTOTYPE]\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n    , key, own, out;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if(own && key in exports)continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function(C){\n      var F = function(a, b, c){\n        if(this instanceof C){\n          switch(arguments.length){\n            case 0: return new C;\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if(IS_PROTO){\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library` \nmodule.exports = $export;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/babel-runtime/~/core-js/library/modules/_export.js\n// module id = 30\n// module chunks = 2","var dP         = require('./_object-dp')\n  , createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function(object, key, value){\n  return dP.f(object, key, createDesc(1, value));\n} : function(object, key, value){\n  object[key] = value;\n  return object;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/babel-runtime/~/core-js/library/modules/_hide.js\n// module id = 31\n// module chunks = 2","module.exports = !require('./_descriptors') && !require('./_fails')(function(){\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/babel-runtime/~/core-js/library/modules/_ie8-dom-define.js\n// module id = 32\n// module chunks = 2","module.exports = function(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/babel-runtime/~/core-js/library/modules/_property-desc.js\n// module id = 33\n// module chunks = 2","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function(it, S){\n  if(!isObject(it))return it;\n  var fn, val;\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/babel-runtime/~/core-js/library/modules/_to-primitive.js\n// module id = 34\n// module chunks = 2","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperty: require('./_object-dp').f});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/babel-runtime/~/core-js/library/modules/es6.object.define-property.js\n// module id = 35\n// module chunks = 2","/*!\n  Copyright (c) 2016 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tclasses.push(classNames.apply(null, arg));\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/classnames/index.js\n// module id = 36\n// module chunks = 2","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/webpack/~/node-libs-browser/~/process/browser.js\n// module id = 62\n// module chunks = 2","var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\nexports.setImmediate = setImmediate;\nexports.clearImmediate = clearImmediate;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/webpack/~/node-libs-browser/~/timers-browserify/main.js\n// module id = 63\n// module chunks = 2","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/webpack/~/node-libs-browser/~/timers-browserify/~/setimmediate/setImmediate.js\n// module id = 64\n// module chunks = 2","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/css-loader/lib/css-base.js\n// module id = 65\n// module chunks = 2","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nvar stylesInDom = {},\n\tmemoize = function(fn) {\n\t\tvar memo;\n\t\treturn function () {\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\t\treturn memo;\n\t\t};\n\t},\n\tisOldIE = memoize(function() {\n\t\treturn /msie [6-9]\\b/.test(self.navigator.userAgent.toLowerCase());\n\t}),\n\tgetHeadElement = memoize(function () {\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\n\t}),\n\tsingletonElement = null,\n\tsingletonCounter = 0,\n\tstyleElementsInsertedAtTop = [];\n\nmodule.exports = function(list, options) {\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the bottom of <head>.\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list);\n\taddStylesToDom(styles, options);\n\n\treturn function update(newList) {\n\t\tvar mayRemove = [];\n\t\tfor(var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\n\t\t\t\t\tdomStyle.parts[j]();\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction addStylesToDom(styles, options) {\n\tfor(var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles(list) {\n\tvar styles = [];\n\tvar newStyles = {};\n\tfor(var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\t\tif(!newStyles[id])\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse\n\t\t\tnewStyles[id].parts.push(part);\n\t}\n\treturn styles;\n}\n\nfunction insertStyleElement(options, styleElement) {\n\tvar head = getHeadElement();\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\n\tif (options.insertAt === \"top\") {\n\t\tif(!lastStyleElementInsertedAtTop) {\n\t\t\thead.insertBefore(styleElement, head.firstChild);\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\thead.appendChild(styleElement);\n\t\t}\n\t\tstyleElementsInsertedAtTop.push(styleElement);\n\t} else if (options.insertAt === \"bottom\") {\n\t\thead.appendChild(styleElement);\n\t} else {\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\n\t}\n}\n\nfunction removeStyleElement(styleElement) {\n\tstyleElement.parentNode.removeChild(styleElement);\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\n\tif(idx >= 0) {\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement(options) {\n\tvar styleElement = document.createElement(\"style\");\n\tstyleElement.type = \"text/css\";\n\tinsertStyleElement(options, styleElement);\n\treturn styleElement;\n}\n\nfunction createLinkElement(options) {\n\tvar linkElement = document.createElement(\"link\");\n\tlinkElement.rel = \"stylesheet\";\n\tinsertStyleElement(options, linkElement);\n\treturn linkElement;\n}\n\nfunction addStyle(obj, options) {\n\tvar styleElement, update, remove;\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\n\t} else if(obj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\") {\n\t\tstyleElement = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, styleElement);\n\t\tremove = function() {\n\t\t\tremoveStyleElement(styleElement);\n\t\t\tif(styleElement.href)\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\n\t\t};\n\t} else {\n\t\tstyleElement = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, styleElement);\n\t\tremove = function() {\n\t\t\tremoveStyleElement(styleElement);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle(newObj) {\n\t\tif(newObj) {\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\n\t\t\t\treturn;\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (styleElement.styleSheet) {\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = styleElement.childNodes;\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\n\t\tif (childNodes.length) {\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyleElement.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag(styleElement, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyleElement.setAttribute(\"media\", media)\n\t}\n\n\tif(styleElement.styleSheet) {\n\t\tstyleElement.styleSheet.cssText = css;\n\t} else {\n\t\twhile(styleElement.firstChild) {\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\n\t\t}\n\t\tstyleElement.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink(linkElement, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\tif(sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = linkElement.href;\n\n\tlinkElement.href = URL.createObjectURL(blob);\n\n\tif(oldSrc)\n\t\tURL.revokeObjectURL(oldSrc);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/style-loader/addStyles.js\n// module id = 66\n// module chunks = 2"],"sourceRoot":""}